diff a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/ElementalBlast.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/mage/ElementalBlast.java	(rejected hunks)
@@ -129,9 +137,9 @@ public class ElementalBlast extends ArmorAbility {
 	@Override
 	protected void activate(ClassArmor armor, Hero hero, Integer target) {
 		Ballistica aim;
-		//Basically the direction of the aim only matters if it goes outside the map
-		//So we just ensure it won't do that.
-		if (hero.pos % Dungeon.level.width() > 10){
+		// Basically the direction of the aim only matters if it goes outside the map
+		// So we just ensure it won't do that.
+		if (hero.pos % Dungeon.level.width() > 10) {
 			aim = new Ballistica(hero.pos, hero.pos - 1, Ballistica.WONT_STOP);
 		} else {
 			aim = new Ballistica(hero.pos, hero.pos + 1, Ballistica.WONT_STOP);
@@ -151,37 +159,39 @@ public class ElementalBlast extends ArmorAbility {
 
 		int projectileProps = Ballistica.STOP_SOLID | Ballistica.STOP_TARGET;
 
-		//### Special Projectile Properties ###
-		//*** Wand of Disintegration ***
-		if (wandCls == WandOfDisintegration.class){
+		// ### Special Projectile Properties ###
+		// *** Wand of Disintegration *** wall piercing effect
+		if (wandCls == WandOfDisintegration.class) {
 			projectileProps = Ballistica.STOP_TARGET;
 
-		//*** Wand of Fireblast ***
-		} else if (wandCls == WandOfFireblast.class){
+			// *** Wand of Fireblast *** goes through burnable terrain
+		} else if (wandCls == WandOfFireblast.class) {
 			projectileProps = projectileProps | Ballistica.IGNORE_SOFT_SOLID;
 
-		//*** Wand of Warding ***
-		} else if (wandCls == WandOfWarding.class){
+			// *** Wand of Warding *** wall piercing effect
+		} else if (wandCls == WandOfWarding.class) {
 			projectileProps = Ballistica.STOP_TARGET;
 
+			// *** wand of chaos *** wall piercing effect
+		} else if (wandCls == WandOfChaos.class) {
+			projectileProps = Ballistica.STOP_TARGET;
 		}
 
 		ConeAOE aoe = new ConeAOE(aim, aoeSize, 360, projectileProps);
 
-		for (Ballistica ray : aoe.outerRays){
-			((MagicMissile)hero.sprite.parent.recycle( MagicMissile.class )).reset(
+		for (Ballistica ray : aoe.outerRays) {
+			((MagicMissile) hero.sprite.parent.recycle(MagicMissile.class)).reset(
 					effectTypes.get(wandCls),
 					hero.sprite,
 					ray.path.get(ray.dist),
-					null
-			);
+					null);
 		}
 
-		final float effectMulti = 1f + 0.25f*hero.pointsInTalent(Talent.ELEMENTAL_POWER);
+		final float effectMulti = 1f + 0.25f * hero.pointsInTalent(Talent.ELEMENTAL_POWER);
 
-		//cast a ray 2/3 the way, and do effects
+		// cast a ray 2/3 the way, and do effects
 		Class<? extends Wand> finalWandCls = wandCls;
-		((MagicMissile)hero.sprite.parent.recycle( MagicMissile.class )).reset(
+		((MagicMissile) hero.sprite.parent.recycle(MagicMissile.class)).reset(
 				effectTypes.get(wandCls),
 				hero.sprite,
 				aim.path.get(aoeSize / 2),
@@ -300,32 +310,32 @@ public class ElementalBlast extends ArmorAbility {
 												ElementalBlast.this.getClass());
 									}
 
-								//*** Wand of Frost ***
-								} else if (finalWandCls == WandOfFrost.class){
+									// *** Wand of Frost ***
+								} else if (finalWandCls == WandOfFrost.class) {
 									if (mob.isAlive() && mob.alignment != Char.Alignment.ALLY) {
-										Buff.affect( mob, Frost.class, effectMulti*Frost.DURATION );
+										Buff.affect(mob, Frost.class, effectMulti * Frost.DURATION);
 									}
 
-								//*** Wand of Prismatic Light ***
-								} else if (finalWandCls == WandOfPrismaticLight.class){
+									// *** Wand of Prismatic Light ***
+								} else if (finalWandCls == WandOfPrismaticLight.class) {
 									if (mob.isAlive() && mob.alignment != Char.Alignment.ALLY) {
-										Buff.prolong(mob, Blindness.class, effectMulti*Blindness.DURATION/2);
+										Buff.prolong(mob, Blindness.class, effectMulti * Blindness.DURATION / 2);
 										charsHit++;
 									}
 
-								//*** Wand of Warding ***
-								} else if (finalWandCls == WandOfWarding.class){
-									if (mob instanceof WandOfWarding.Ward){
+									// *** Wand of Warding ***
+								} else if (finalWandCls == WandOfWarding.class) {
+									if (mob instanceof WandOfWarding.Ward) {
 										((WandOfWarding.Ward) mob).wandHeal(0, effectMulti);
 										charsHit++;
 									}
 
-								//*** Wand of Transfusion ***
-								} else if (finalWandCls == WandOfTransfusion.class){
-									if(mob.alignment == Char.Alignment.ALLY || mob.buff(Charm.class) != null){
-										int healing = Math.round(10*effectMulti);
+									// *** Wand of Transfusion ***
+								} else if (finalWandCls == WandOfTransfusion.class) {
+									if (mob.alignment == Char.Alignment.ALLY || mob.buff(Charm.class) != null) {
+										int healing = Math.round(10 * effectMulti);
 										int shielding = (mob.HP + healing) - mob.HT;
-										if (shielding > 0){
+										if (shielding > 0) {
 											healing -= shielding;
 											Buff.affect(mob, Barrier.class).setShield(shielding);
 										} else {
