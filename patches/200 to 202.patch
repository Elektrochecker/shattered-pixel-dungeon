From 35fdca29e533797d5333759b7bd3db7dc3c21303 Mon Sep 17 00:00:00 2001
From: Elektrochecker <50339852+Elektrochecker@users.noreply.github.com>
Date: Tue, 9 May 2023 20:44:41 +0200
Subject: [PATCH] 2.0.2 patch

---
 .../com/watabou/input/ControllerHandler.java  |  29 ++--
 .../java/com/watabou/input/InputHandler.java  |  12 +-
 .../main/java/com/watabou/input/KeyEvent.java |   6 +-
 .../java/com/watabou/input/PointerEvent.java  |  14 +-
 .../main/java/com/watabou/noosa/Camera.java   |   5 +-
 core/src/main/assets/interfaces/chrome.png    | Bin 1159 -> 1153 bytes
 .../src/main/assets/interfaces/hero_icons.png | Bin 1511 -> 1863 bytes
 .../assets/messages/actors/actors.properties  |  35 +----
 .../assets/messages/items/items.properties    |  30 ++--
 .../shatteredpixeldungeon/Badges.java         |  13 +-
 .../shatteredpixeldungeon/Dungeon.java        |  18 +--
 .../GamesInProgress.java                      |   4 +-
 .../shatteredpixeldungeon/Rankings.java       |   7 +
 .../shatteredpixeldungeon/SPDSettings.java    |   3 -
 .../ShatteredPixelDungeon.java                |  34 +----
 .../shatteredpixeldungeon/actors/Char.java    |  19 ++-
 .../actors/blobs/Alchemy.java                 |  10 --
 .../actors/buffs/Berserk.java                 |  27 +++-
 .../actors/buffs/Buff.java                    |   6 +-
 .../actors/buffs/Combo.java                   |  47 +++++--
 .../actors/buffs/LifeLink.java                |   2 +-
 .../actors/buffs/Momentum.java                |  37 +++--
 .../actors/buffs/MonkEnergy.java              |  71 +++++++---
 .../actors/buffs/Preparation.java             |  47 ++++---
 .../actors/buffs/SnipersMark.java             |  12 +-
 .../actors/hero/Hero.java                     |  39 ++++--
 .../actors/hero/Talent.java                   |  12 +-
 .../actors/hero/abilities/Ratmogrify.java     |   5 +-
 .../abilities/duelist/ElementalStrike.java    |   9 +-
 .../actors/hero/abilities/duelist/Feint.java  |   4 +-
 .../actors/mobs/Bee.java                      |  15 +-
 .../actors/mobs/DM100.java                    |   8 +-
 .../actors/mobs/Elemental.java                |  15 +-
 .../actors/mobs/Eye.java                      |  13 +-
 .../actors/mobs/Ghoul.java                    |   8 +-
 .../actors/mobs/GnollTrickster.java           |   4 +-
 .../actors/mobs/Mimic.java                    |  15 +-
 .../actors/mobs/Mob.java                      |  44 +++---
 .../actors/mobs/Pylon.java                    |   5 +-
 .../actors/mobs/Scorpio.java                  |   4 +-
 .../actors/mobs/Shaman.java                   |  10 +-
 .../actors/mobs/Statue.java                   |  11 +-
 .../actors/mobs/Tengu.java                    |   5 +-
 .../actors/mobs/Warlock.java                  |   6 +-
 .../actors/mobs/npcs/Blacksmith.java          |   6 +-
 .../actors/mobs/npcs/Ghost.java               |   8 +-
 .../actors/mobs/npcs/Imp.java                 |   8 +-
 .../actors/mobs/npcs/RatKing.java             |   8 +-
 .../actors/mobs/npcs/Sheep.java               |   6 +-
 .../actors/mobs/npcs/Shopkeeper.java          |   8 +-
 .../actors/mobs/npcs/Wandmaker.java           |   8 +-
 .../items/EquipableItem.java                  |  10 ++
 .../shatteredpixeldungeon/items/Item.java     |   5 +-
 .../items/KindOfWeapon.java                   |  30 ++--
 .../items/KindofMisc.java                     |   7 +-
 .../items/LiquidMetal.java                    |   2 +-
 .../shatteredpixeldungeon/items/Recipe.java   |   3 -
 .../items/armor/glyphs/AntiMagic.java         |   2 +
 .../items/artifacts/MasterThievesArmband.java |   9 --
 .../items/artifacts/UnstableSpellbook.java    |   4 +-
 .../items/bombs/Noisemaker.java               |  28 +++-
 .../potions/exotic/PotionOfDragonsBreath.java |  42 +++---
 .../items/spells/Alchemize.java               |   4 +-
 .../items/spells/AquaBlast.java               |   4 +-
 .../items/spells/BeaconOfReturning.java       |   4 +-
 .../items/spells/CurseInfusion.java           |   4 +-
 .../items/spells/FeatherFall.java             |   4 +-
 .../items/spells/MagicalInfusion.java         |   4 +-
 .../items/spells/PhaseShift.java              |   4 +-
 .../items/spells/ReclaimTrap.java             |   4 +-
 .../items/spells/Recycle.java                 |   4 +-
 .../items/spells/TelekineticGrab.java         |   4 +-
 .../items/spells/WildEnergy.java              |   4 +-
 .../items/wands/CursedWand.java               |  37 +++--
 .../items/wands/Wand.java                     |   4 +-
 .../items/wands/WandOfBlastWave.java          |   4 +-
 .../items/wands/WandOfRegrowth.java           |   4 +-
 .../items/weapon/SpiritBow.java               |   2 +-
 .../items/weapon/Weapon.java                  |   4 +-
 .../items/weapon/melee/BattleAxe.java         |   2 +-
 .../items/weapon/melee/Dagger.java            |   2 +-
 .../items/weapon/melee/Dirk.java              |   2 +-
 .../items/weapon/melee/Flail.java             |  31 +++--
 .../items/weapon/melee/Gauntlet.java          |   2 +-
 .../items/weapon/melee/Glaive.java            |   2 +-
 .../items/weapon/melee/Gloves.java            |   2 +-
 .../items/weapon/melee/HandAxe.java           |   2 +-
 .../items/weapon/melee/Mace.java              |   2 +-
 .../items/weapon/melee/MeleeWeapon.java       |  52 +++++--
 .../items/weapon/melee/Rapier.java            |   2 +-
 .../items/weapon/melee/Sai.java               |   2 +-
 .../items/weapon/melee/Spear.java             |   2 +-
 .../items/weapon/melee/WarHammer.java         |   2 +-
 .../levels/CavesBossLevel.java                |   2 +-
 .../shatteredpixeldungeon/levels/Level.java   |   4 +-
 .../levels/rooms/special/SentryRoom.java      |   4 +-
 .../levels/rooms/special/ShopRoom.java        |   1 -
 .../messages/Languages.java                   |  26 ++--
 .../scenes/AboutScene.java                    |   4 +-
 .../scenes/CellSelector.java                  |   3 +-
 .../scenes/ChangesScene.java                  |  68 ++++++---
 .../scenes/GameScene.java                     |  27 +---
 .../scenes/PixelScene.java                    |   4 +-
 .../scenes/RankingsScene.java                 |   6 +-
 .../scenes/WelcomeScene.java                  |  17 +--
 .../sprites/NecromancerSprite.java            |   6 +-
 .../sprites/SpectralNecromancerSprite.java    |  40 +++---
 .../ui/ActionIndicator.java                   | 116 +++++++++++-----
 .../ui/AttackIndicator.java                   |   2 +-
 .../ui/BuffIndicator.java                     |   2 +
 .../shatteredpixeldungeon/ui/Button.java      |  52 +++----
 .../ui/DangerIndicator.java                   |   4 +-
 .../shatteredpixeldungeon/ui/HeroIcon.java    |  19 ++-
 .../ui/LootIndicator.java                     |   2 +-
 .../shatteredpixeldungeon/ui/QuickRecipe.java |   1 -
 .../ui/RenderedTextBlock.java                 |   2 +-
 .../ui/ResumeIndicator.java                   |   2 +-
 .../shatteredpixeldungeon/ui/Tag.java         |   7 +
 .../ui/changelist/ChangeButton.java           |   8 +-
 .../ui/changelist/ChangeInfo.java             |   3 +
 .../ui/changelist/WndChanges.java             |  46 +++++++
 .../ui/changelist/WndChangesTabbed.java       | 123 +++++++++++++++++
 .../ui/changelist/v0_3_X_Changes.java         |   2 +-
 .../ui/changelist/v0_7_X_Changes.java         |  41 +++---
 .../ui/changelist/v0_8_X_Changes.java         |  37 +++--
 .../ui/changelist/v0_9_X_Changes.java         |  33 ++---
 .../ui/changelist/v1_X_Changes.java           | 111 +++++++--------
 .../ui/changelist/v2_X_Changes.java           | 130 ++++++++++++++----
 .../windows/WndCombo.java                     |   3 -
 .../desktop/DesktopLauncher.java              |  10 --
 130 files changed, 1271 insertions(+), 817 deletions(-)
 create mode 100644 core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/WndChanges.java
 create mode 100644 core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/WndChangesTabbed.java

diff --git a/SPD-classes/src/main/java/com/watabou/input/ControllerHandler.java b/SPD-classes/src/main/java/com/watabou/input/ControllerHandler.java
index fa41b5d..b2856fb 100644
--- a/SPD-classes/src/main/java/com/watabou/input/ControllerHandler.java
+++ b/SPD-classes/src/main/java/com/watabou/input/ControllerHandler.java
@@ -45,6 +45,9 @@ public class ControllerHandler implements ControllerListener {
 	public static ControllerType lastUsedType = ControllerType.OTHER;
 	public static boolean controllerActive = false;
 
+	//sufficiently large number so that it'll never collide with touch pointers (which start at 0)
+	public static final int CONTROLLER_POINTER_ID = 1000;
+
 	private static void setControllerType(Controller controller){
 		if (controller.getName().contains("Xbox")){
 			lastUsedType = ControllerType.XBOX;
@@ -179,6 +182,9 @@ public class ControllerHandler implements ControllerListener {
 		}
 	}
 
+	//we add 1000 to make the DPAD keys distinct from Keys.UP, Keys.DOWN, etc..
+	public static int DPAD_KEY_OFFSET = 1000;
+
 	//converts controller button codes to keyEvent codes
 	public static int buttonToKey(Controller controller, int btnCode){
 		ControllerMapping mapping = controller.getMapping();
@@ -195,11 +201,10 @@ public class ControllerHandler implements ControllerListener {
 		if (btnCode == mapping.buttonR1)        return Input.Keys.BUTTON_R1;
 		if (btnCode == mapping.buttonR2)        return Input.Keys.BUTTON_R2;
 
-		//we add 1000 here to make these keys distinct from Keys.UP, Keys.DOWN, etc..
-		if (btnCode == mapping.buttonDpadUp)    return Input.Keys.DPAD_UP       + 1000;
-		if (btnCode == mapping.buttonDpadDown)  return Input.Keys.DPAD_DOWN     + 1000;
-		if (btnCode == mapping.buttonDpadLeft)  return Input.Keys.DPAD_LEFT     + 1000;
-		if (btnCode == mapping.buttonDpadRight) return Input.Keys.DPAD_RIGHT    + 1000;
+		if (btnCode == mapping.buttonDpadUp)    return Input.Keys.DPAD_UP       + DPAD_KEY_OFFSET;
+		if (btnCode == mapping.buttonDpadDown)  return Input.Keys.DPAD_DOWN     + DPAD_KEY_OFFSET;
+		if (btnCode == mapping.buttonDpadLeft)  return Input.Keys.DPAD_LEFT     + DPAD_KEY_OFFSET;
+		if (btnCode == mapping.buttonDpadRight) return Input.Keys.DPAD_RIGHT    + DPAD_KEY_OFFSET;
 
 		if (btnCode == mapping.buttonLeftStick) return Input.Keys.BUTTON_THUMBL;
 		if (btnCode == mapping.buttonRightStick)return Input.Keys.BUTTON_THUMBR;
@@ -208,11 +213,13 @@ public class ControllerHandler implements ControllerListener {
 	}
 
 	public static boolean icControllerKey(int keyCode){
-		if (keyCode >= Input.Keys.BUTTON_A && keyCode <= Input.Keys.BUTTON_MODE){
+		if (keyCode >= Input.Keys.BUTTON_A
+				&& keyCode <= Input.Keys.BUTTON_MODE){
 			return true;
 		}
 
-		if (keyCode >= Input.Keys.DPAD_UP+1000 && keyCode <= Input.Keys.DPAD_RIGHT+1000){
+		if (keyCode >= Input.Keys.DPAD_UP+DPAD_KEY_OFFSET
+				&& keyCode <= Input.Keys.DPAD_RIGHT+DPAD_KEY_OFFSET){
 			return true;
 		}
 
@@ -242,13 +249,13 @@ public class ControllerHandler implements ControllerListener {
 			}
 		}
 
-		if (keyCode == Input.Keys.DPAD_UP + 1000){
+		if (keyCode == Input.Keys.DPAD_UP + DPAD_KEY_OFFSET){
 			return Input.Keys.toString(Input.Keys.DPAD_UP);
-		} else if (keyCode == Input.Keys.DPAD_DOWN + 1000){
+		} else if (keyCode == Input.Keys.DPAD_DOWN + DPAD_KEY_OFFSET){
 			return Input.Keys.toString(Input.Keys.DPAD_DOWN);
-		} else if (keyCode == Input.Keys.DPAD_LEFT + 1000){
+		} else if (keyCode == Input.Keys.DPAD_LEFT + DPAD_KEY_OFFSET){
 			return Input.Keys.toString(Input.Keys.DPAD_LEFT);
-		} else if (keyCode == Input.Keys.DPAD_RIGHT + 1000){
+		} else if (keyCode == Input.Keys.DPAD_RIGHT + DPAD_KEY_OFFSET){
 			return Input.Keys.toString(Input.Keys.DPAD_RIGHT);
 		}
 
diff --git a/SPD-classes/src/main/java/com/watabou/input/InputHandler.java b/SPD-classes/src/main/java/com/watabou/input/InputHandler.java
index e20bd4e..4d74b19 100644
--- a/SPD-classes/src/main/java/com/watabou/input/InputHandler.java
+++ b/SPD-classes/src/main/java/com/watabou/input/InputHandler.java
@@ -79,18 +79,18 @@ public class InputHandler extends InputAdapter {
 		multiplexer.removeProcessor(processor);
 	}
 
-	public void emulateTouch(int button, boolean down){
+	public void emulateTouch(int id, int button, boolean down){
 		PointF hoverPos = PointerEvent.currentHoverPos();
 		if (down){
-			multiplexer.touchDown((int)hoverPos.x, (int)hoverPos.y, 10+button, button);
+			multiplexer.touchDown((int)hoverPos.x, (int)hoverPos.y, id, button);
 		} else {
-			multiplexer.touchUp((int)hoverPos.x, (int)hoverPos.y, 10+button, button);
+			multiplexer.touchUp((int)hoverPos.x, (int)hoverPos.y, id, button);
 		}
 	}
 
-	public void emulateDrag(int button){
+	public void emulateDrag(int id){
 		PointF hoverPos = PointerEvent.currentHoverPos();
-		multiplexer.touchDragged((int)hoverPos.x, (int)hoverPos.y, 10+button);
+		multiplexer.touchDragged((int)hoverPos.x, (int)hoverPos.y, id);
 	}
 	
 	public void processAllEvents(){
@@ -105,7 +105,7 @@ public class InputHandler extends InputAdapter {
 	
 	@Override
 	public synchronized boolean touchDown(int screenX, int screenY, int pointer, int button) {
-		if (pointer < 10) {
+		if (pointer != ControllerHandler.CONTROLLER_POINTER_ID) {
 			ControllerHandler.setControllerPointer(false);
 			ControllerHandler.controllerActive = false;
 		}
diff --git a/SPD-classes/src/main/java/com/watabou/input/KeyEvent.java b/SPD-classes/src/main/java/com/watabou/input/KeyEvent.java
index 3af2407..2ffc1cc 100644
--- a/SPD-classes/src/main/java/com/watabou/input/KeyEvent.java
+++ b/SPD-classes/src/main/java/com/watabou/input/KeyEvent.java
@@ -64,13 +64,13 @@ public class KeyEvent {
 	public static synchronized void processKeyEvents(){
 		for (KeyEvent k : keyEvents){
 			if (KeyBindings.getActionForKey(k) == GameAction.LEFT_CLICK){
-				Game.inputHandler.emulateTouch(PointerEvent.LEFT, k.pressed);
+				Game.inputHandler.emulateTouch(ControllerHandler.CONTROLLER_POINTER_ID, PointerEvent.LEFT, k.pressed);
 				if (KeyBindings.bindingKey) keySignal.dispatch(k);
 			} else if (KeyBindings.getActionForKey(k) == GameAction.RIGHT_CLICK){
-				Game.inputHandler.emulateTouch(PointerEvent.RIGHT, k.pressed);
+				Game.inputHandler.emulateTouch(ControllerHandler.CONTROLLER_POINTER_ID, PointerEvent.RIGHT, k.pressed);
 				if (KeyBindings.bindingKey) keySignal.dispatch(k);
 			} else if (KeyBindings.getActionForKey(k) == GameAction.MIDDLE_CLICK){
-				Game.inputHandler.emulateTouch(PointerEvent.MIDDLE, k.pressed);
+				Game.inputHandler.emulateTouch(ControllerHandler.CONTROLLER_POINTER_ID, PointerEvent.MIDDLE, k.pressed);
 				if (KeyBindings.bindingKey) keySignal.dispatch(k);
 			} else {
 				keySignal.dispatch(k);
diff --git a/SPD-classes/src/main/java/com/watabou/input/PointerEvent.java b/SPD-classes/src/main/java/com/watabou/input/PointerEvent.java
index 85ff184..bc438d4 100644
--- a/SPD-classes/src/main/java/com/watabou/input/PointerEvent.java
+++ b/SPD-classes/src/main/java/com/watabou/input/PointerEvent.java
@@ -145,15 +145,6 @@ public class PointerEvent {
 			}
 		}
 
-		//add drag events for any emulated presses
-		if (hovered){
-			for (int i = 10+LEFT; i <= 10+FORWARD; i++){
-				if (activePointers.containsKey(i)){
-					Game.inputHandler.emulateDrag(i-10);
-				}
-			}
-		}
-
 		for (PointerEvent p : pointerEvents){
 			if (p.type == Type.HOVER){
 				continue;
@@ -182,6 +173,11 @@ public class PointerEvent {
 			}
 		}
 		pointerEvents.clear();
+
+		//add drag events for any emulated presses
+		if (hovered && activePointers.containsKey(ControllerHandler.CONTROLLER_POINTER_ID)){
+			Game.inputHandler.emulateDrag(ControllerHandler.CONTROLLER_POINTER_ID);
+		}
 	}
 
 	public static synchronized void clearPointerEvents(){
diff --git a/SPD-classes/src/main/java/com/watabou/noosa/Camera.java b/SPD-classes/src/main/java/com/watabou/noosa/Camera.java
index d95e485..8b49a81 100644
--- a/SPD-classes/src/main/java/com/watabou/noosa/Camera.java
+++ b/SPD-classes/src/main/java/com/watabou/noosa/Camera.java
@@ -51,7 +51,7 @@ public class Camera extends Gizmo {
 	
 	public float[] matrix;
 
-	public boolean scrollable = false;
+	public PointF edgeScroll;
 	public PointF scroll;
 	public PointF centerOffset;
 	
@@ -122,7 +122,8 @@ public class Camera extends Gizmo {
 		
 		screenWidth = (int)(width * zoom);
 		screenHeight = (int)(height * zoom);
-		
+
+		edgeScroll = new PointF();
 		scroll = new PointF();
 		centerOffset = new PointF();
 		
diff --git a/core/src/main/assets/interfaces/chrome.png b/core/src/main/assets/interfaces/chrome.png
index 4fde7ebea3299930b88d1b0f7b3e0403826acad6..53d4169a5c3a38cb06677b1b0f9a48261753b131 100644
GIT binary patch
delta 891
zcmV->1BCpC34sZaBmv=(C3zmq%*=p=cVcE-L`Og_FDj6ghHi6bPEtuTH87c(nUTLv
z1OcNE<dYErHGe5dL_t(|0o>Nja>5`Gz;RhL32JHr!9@F|#oG6O!!DpJV>eFXA&36P
z1AAcjj|a%i6F}l9Be*T*2srG1SOgh~GrvF2MLr{8l!fw^D_YFgW%;rJ2Dcvrs;a6N
z2|xD*2>g*SN~N^crf6_st;NN>L|b5R`+Y!Lw^a(~o__%0t4SCop5JNh1FYRy`!Imn
z?*nQ)GT~=FK;%f1Fk(Qr?_$92b%z1#x3b)@0o;BJsN43vP2k)U;1hI5G>-81AAl_a
z4!0iz@GodT5;!g%1?(@b0Y>BbKEPN!9|I%;4!0j53jv=b1Z0B)4#&b%4J~A0%yKn4
z;Ok;+0Dm;mZ6OV6rVEe}kck86{(-B*(HJ#hfKtvmQzR!g2qp}0?&KT=kO>1$-=|3f
z$dms786V&YO~NRZad`glfW+vFh<i@y{uve^W~q1;!{Do!eNLMQh6UUS0sj535@(!;
zKgZx@Dd;EidvN(4s1rCpdX9n6n4MEFQurQ7^?!d401MCmNsSH&?|%a4Q2})RvjO}^
z>2v|Se;bhF_4C_)UEnql#83cjEd9AjnY$EbzW;%0j}-O<z2RRB{<rL$5>OC8;dFop
z0q`$6J>cc_?fsp9oec2t`StzHzbpXc_5e)&GXaqMna_3rxh@v00O5;K5I~cQ;qCx8
ziGSLPV2Bo%+h57{0Jz^jP82UBiQS|=4MYgaa_<U|{&+b8@B$!1F%V?HWV!bTNWTIo
zF+c>!%HcIouHf)%f%I3G%1a5S<OQfyDrrqmy<!0H{ZDggG+TUE6vb_cV?e!@D?nEN
z)1R^zP5^aux_VHrn*n^e3P2rQJw4Q627ib{00Pht1k#^7fSAx#BlQM=Xd{3^05So@
z0*KZFYHBP2@reO<z#Y&yHK2KFKuehijtMCJo*M9{O=N@P0TLB3oB)848o&$?X(Qoq
zAb<^1u>nBJB4s3uheIYfnTp4OAhQ@qd|5EgdMeg;!uC=Iy!4YbkoQzfB3K3p!9?!^
zj@C@YBO3rY4bWzQ^fRE2Zk|&yi9i7i;(_#2?o%;|psghK{bWBCTYo%1F#l&=3(M;z
R0Zae@002ovPDHLkV1m62iiH3G

delta 877
zcmV-z1CsoK35N-gBmv}+C3yzFy|$T|nUSFw19^FXk-Sa>m4JIAlMVqje=JEvK~#7F
z+}6z!+8_|XaalA8YH9+(MEj-1e!Tw^b{BM|?Z!zw<j~)EU=Ixc@c>y71uTs^f#+h4
zKqBskO;oTn%lpexl`9rUT^X|7@nXHN>kkJINc%CMX_|JEp?NGo;g7{p8)L0?Rfh}j
zJucQYI)XsjPXT?~HyN5oe*zR$vp8xzf3TJUygzyWGC<f*0WBVxp;-=4C9;f03K-5q
z3OIc{VZi=VT_3~%VLt`5egC=7;5-sQ33gx>NBH+2fFlBtupa~PFX+EyaNN8KINv=2
zoW=7gz<KX+0UCiw*bh*|fUhhD6q5rk*NT{q7rJt8yPF;G?QU)We{{)np&ja$3(yI$
zg#-Bhfrrc0IkRAZF(Cw3b-+3V3kHO63xNaJf&sVhw?zZkoBsftA3&64an!~IJb!vX
zX68jCKgWFkObbw}T)K*3@>MK8r(FUQ1O7w-@%?WyKX9J@90MtGFiw?!gZuYDo1yu|
za}12f;%5$Kir)h{f12e0kkI+Ra<c>C`=6nCP5__(Zh-Vrx@3UtzYQp@{oQ_DASn>U
zPymHg{l3Y%?{*LF4)?#$hE(BcG=u+DG;jQqIVB)F24qhMkW(@LIz511Uf<r|`Paz+
zAD>^}-~7u0KyDAf<UbPtxu5xL3CL#n#|99;7{viJxft#ae{hqiQxOf(;&RKCY!86@
z{p0wskR-Ut_*^6al;z$PAoIg&k{|*gk3uBK1C!<68zA!)Krsm-K)w`T1En(Pz+_~8
zWodXZ;S@!Ha=DzV>Zz3t05bn^F7-x}@A5vh#&Ha&RZ|6wSO4RmvKLMOHMBc=P^*~%
zWVi}I4IMpQf7D<G2r&Qw=tTm6(gzR$9W?-v0l;qrPz*pOfWUe5>j70YmVj_#z#VW0
z)K3j)oEp$n`oJ*(#oto{{<KEcKOP`a0fPwu7^(rx0A8zvgT4SZv|<ZDG4V<z41)m^
z9FWH-667rki42RzrQV8VCu}XH&r3g918KKna&pdDM<vKU;0W<nJhTCj(*P|7$T5I&
z4V^SwG5<IX&<}k%22*dv#BnVpLFSWvE4Kc4eqjCq8$1%S7wPP|00000NkvXXu0mjf
D!p4E>

diff --git a/core/src/main/assets/interfaces/hero_icons.png b/core/src/main/assets/interfaces/hero_icons.png
index 5cc5cc3ac579affab0fe85e2565c037a5d15eb68..4a7c0525f8a35ff79cccca426d8cd5deb9270ec1 100644
GIT binary patch
delta 1695
zcmbW2`&UzU7RA3exgjJ}hDbut5R#%6QGqBTI4TJO;;RBh3Mz0x5QO@`R*_e8FO@+S
zOeK_pu(X6oDL80Bg$^`gE@BL8e1xeCq@zF(3L?RT5+RU~JNPfm{^9KXIX|DX_Jp0v
zUc$D=Y{>usqqb~e+3u9ByNOm;1A-uyX?b3zt4fyBj`N=#iu}O;k5C`14}0hafDL_L
zaNyxA=uy?>?_O?mwwZbP-Q-Yi$51Xxgg&93snrV}oqNMXbJheN9Ne{aaBY3#-pPoN
z{iPcV2}`RG+4L`|_eP7FZCHKZfssQ5z@p8<BP1wJ9RsWlf%v_eEUaPo&C&*&^XlmH
z&w!aG(ib>gz)RRA$`UqQ+utL3ogLzXTU{{D9<tHP>LLn^7`A&;1qWP%=B8%XrDvs$
zG!5)Rn<#vM%D4{I6M18p-`TOa6>Z30ek<HCHXf0#tB!__cpcvj(mxFheO%|qIQwoz
z1p<Foy6Q<j$V3X)#Uy83%?B^+TM$^73(tldv%Vr95Uk`k57Xbo<URiR4m{_Gzdlei
z`F>49LOZ<j$t#6zf+IfLzxkHsQe=2aO(~kg_%GA}+Nu6FyOVryF)7bJ{z`1n*48Vs
zm<5{PTVVcJlY8G4M$K+++S}wCvmqMWMhk2xpZzy!z9(vvg1q4<l&C10JV>u1rZkZ0
zg}nItq39n8j#-#zk_ZjsE4D@EFY%(GKmM+E!lb|=eeFo`p=jMjR^51&8f9UK1OCxd
z7Jr90GjJ{_IfZ75u|$cUvJ(_!w-h_v!a!+7tH{Zf4+1E%U8bA!>Xq7si&$X?DLK_?
zKc1_`Pq7*IM1XSqc~iS)g4nWn4^bIzxz(##9v4_1U*Ft2nWQvO7mseXP?Tp{I6517
z*Sns)R*tT)k$jwm8g5_4=JiYOe$~&fhlIggKB1NhxdvGSY*|?cJ%se3<lg4nX^rIm
zAa6BB{_%2@Xu#7cZUXRYO<YNv;i9NNb&(W?7skT?nv28`pV~Xy$tQQUlGdVg2QQJw
zhMAkMLuL=$+jL&^i=!lwbQC&>`*bmxM1TM1J*a}-Gv|V#=Ba_x^t=8f+ZH70_kx<g
zB?2+sR)VIchUO$H_H=eG?)2QkxF2$t*E=d*?QlmfFCprd1Rg-hk6+kMQ4Ys{Q`FhH
z%K~eJCull%V6c0n9M%-X0#nGe^cUK+J1!S7eS=1w-x`~nN7a2+nyObUx*`QA-QeeS
zL!;5G7e|=g<AN)Ouk}LAofByptWea_1g07gWfHQ7xzl)p`OrFS-Lg1~sL~W}^_PlA
zh+*L^XB*cj=E%%BM$KU+krpPt%Sk87>j!)F^+V6P%V;tgj15Y34d8UJKk#iOIWbJ^
zDA5C+tF8Zz7YDlc;%K%<3o@$wGCM0fO>Qml;dUzMS}|Yy_N~eEc7sdC*O_acKPK%D
zobjIVzV|&`BM24zmEX?0V)(*lYYuHp@u1@qfU+E9*jH4Ilzisw9~H-54Q;?kmL{yo
zI&jH?RfkcH*V|J0Qz5n_T{NIvy|@@8ri5b(7*_CH7$_#Cnx}x2WC?ayzBuCp7QGfI
z5@u)3frqv~*XnuP+PJL2SW@5N^~=xkWuVL@C`Dw1<QB1HX&QI~sE3O?;bA~biq$6d
zxE4{M+}xZIo>x}^V4Q-seJrLX_m+%!Xf15Clg7>X>7S(|0=_>CYxKZ!;}*JrKAk}P
zF!E}Z#8ZpqI98IVOa-~u5r1{HA{=|J7_x8lx{)c;X99{nuE&ZuIq8%Ed?}i*ILAT|
zWP)5f@+&vI+ttOcC)2hPEFh1nq4aKn13aIh%?RjgC(xKD@%Lj-dsfJl<VG)1io|V|
z8^=)o5>cVb(fnhpP--w-eBnQ%lC@Q1qnv~zr!Y&=Z;sa_VP#bf)V{V?za!B5DY>WQ
zhgiETKOMW=U0AVXO>~y{(%!Qx2llsukJc-k7i4BCJA5>fICYF;qP3Q@i%*1QK!ag#
zcuwIzTn7PX8OJz#uWqb0s-_m|cz?dc9{XcHVV_S!91)s38<fMAw3&RzvuP*i<q0it
z{&?uT+`CH~q4ObVvXBhu&vG#V<SVueej-qX`x;N5w6O3l%2okwX`Ej??`Hc9Zw^h2
zpXuf*^ZnafDb_OA-cQTD>o|xCneNJ8E))PH#20HC|M5X2{l2D3Ue&XX59@s)Hiv?L
J-ktEx{{UxHH!uJI

delta 1340
zcmV-C1;hHs4(AJy7Y;xO0{{R3<p_^W0001`ktL~rGWg0k00001bW%=J06^y0W&i*L
z@JU2LRCoc!n1zxfHy8%>-`O|E%uLIS@Be7|q>k!a)yPwGf!U5NPq2GM-bzZ*kkXxo
zl<qc+{`r}IzFO5kUpLghZ|nxV5D|L+IRrp8-&+F#Lt!ca|NS7~K_ND9UnuqN+<@Vs
zfT0_IU_SxqozSBVc=Twsdi00@)QlQZJZ$I&*q;M%!(@Qo)t>_>sOlR51CzjKH^6><
zK1L0XEqwB{5Oo0vz+dSHMCKtMIpEo|J2!^buLo&E6>{?^b+&^ZGcuDfBLMZF2_WOn
zvxsLmhQ==fsmF}vKmfZh!xEH7+;t$p^aJdF7s1aS!8}ww-rT?vOa#d5w*m$hpK<6c
zf&B!q_>cK4`iWC8UIK|_E-wPu1n{tT3>*LG6x5mLqg{jz0a63^0LMUR>;~9RfX~6>
ziED_4-Z2#RmjKfVupiiaykaBx`xg-b&mG{aaEMMo<0s&81RqoWn7E4NcR))gAnX@^
zF`roh%YPj^0DpSXkkZSB^nYXjt5>h`2j0BF7Amm+H36cY@x=o06M+9syrE#B0Q>~V
zpWRW0r2_B^0+@lN0%XU}F35g}%pw7=tG@||<pS(?K*VAJm|x?s0kL3!%+j}~AhZYH
z6#pUto__~uSSmnvW}ybW^b9O^5itvY1W+KByo#%R`7fi}{W^vR4Jo~CNNH$D>0Lug
zuN%fc(EEn*FDQ0{-C#G^4R%N7wcTJhgaat3;tvG^UcU5u7(U*h27D52fc&37e|EsD
zLJjyLHV1$MUQPy}|N2!!8}Kdk@(egYdLTdy!)i4Q4gdnG-vL<*e+NikC<UH>fbV({
z00iK70e;PZ#_kND_0S8D{J{ea4v_zci17^IcL9FErvtK`0O45}1uy{*1XED`KY#uV
z`Mn2Z&jI*<y?_6Uf-DXQ2jJIOH=$=?9Dtt!1>pbv`?vJMevNv2^?6!lB6y2rKcL4y
zHy~nbYYYEt`(ai9en4FP1jvhjzrO?#+uPgt39x_864*}w;1`Iizq1Ls0OW_(KW`J_
zcYt?+sA`7JF^u^3?Hm3~>z{E9@f+m$37`Of=OT*l-@oH8wEkHaQRDX}bN~epc^X~C
zQI3BTVEz27c<RfDf=ypWA?*M2FQZ%kI!-$cDeX3l|Ns78!#Hrip$ZRw4yy35q56*s
z`3bLS{rA>*P1#Gx%fr42Q3e74uSxb(fHoo=fEs!Ms|ft7CLrGr8v>4x_0ljAa8e8G
z*Lb>K@1335u0P>SNAWiS+z$ktpC25YpN9i3jxWXWR6s4L{x$w}mXg2|<_Jay1oy)}
ze$9YJFM<3Qmlp)!ZvrBJ6ma4I`*Xn6mAq$#t1AUifWHLbFTWn-2h4mrpm5xu0qHX#
z2(VuP6r5e_5BU{90sb1m?+39@0Dd0qZv%V^@Dou2?010NdJ#YY{u~g3-w$%iK?Z+$
zbbxl@MRy5MQ;`GgCqM<2dJLHXQ3AI3{XqT=0bT$CkUM}afS&+=`~<kb$B;b`D+0E+
z^};`1f*AoKvR-}y>?eQ%9>%AD^I!e#CUn5D-adxofZz}iV7~+8hr0gtGoOFm01oIJ
zL$-he+D%vs9AJM9Ku<uOdsadLI{$h*z!%ZRfZ}!l1rD&E07F0s_F@Up`Oo0*T*Vg`
y7x@5axY!(E*n?9e0oe}05+L6g&~ocv$A19|ZItG3F*d0H0000<MNUMnLSTZ90A;KI

diff --git a/core/src/main/assets/messages/actors/actors.properties b/core/src/main/assets/messages/actors/actors.properties
index 425a1ea..4261630 100644
--- a/core/src/main/assets/messages/actors/actors.properties
+++ b/core/src/main/assets/messages/actors/actors.properties
@@ -854,7 +854,7 @@ actors.hero.talent.swift_spirit.desc=_+1:_ The spirit hawk's movement speed is i
 
 #duelist
 actors.hero.talent.strengthening_meal.title=strengthening meal
-actors.hero.talent.strengthening_meal.desc=_+1:_ Eating food grants the Duelist 2 bonus damage on her next _2 physical attacks_.\n\n_+2:_ Eating food grants the Duelist 2 bonus damage on her next _3 physical attacks_.
+actors.hero.talent.strengthening_meal.desc=_+1:_ Eating food grants the Duelist 3 bonus damage on her next _2 physical attacks_.\n\n_+2:_ Eating food grants the Duelist 3 bonus damage on her next _3 physical attacks_.
 actors.hero.talent.adventurers_intuition.title=adventurer's intuition
 actors.hero.talent.adventurers_intuition.desc=_+1:_ The Duelist identifies weapons _2.5x faster_ and armor _1.75x faster_.\n\n_+2:_ The Duelist identifies weapons _when she equips them_ and armor _2.5x faster_.
 actors.hero.talent.patient_strike.title=patient strike
@@ -875,7 +875,7 @@ actors.hero.talent.lethal_haste.title=lethal haste
 actors.hero.talent.lethal_haste.desc=_+1:_ When the Duelist lands a killing blow with a weapon ability, she gains _2 turns_ of haste.\n\n_+2:_ When the Duelist lands a killing blow with a weapon ability, she gains _3 turns_ of haste.
 actors.hero.talent.lethal_haste.meta_desc=_If this talent is gained by a different hero_ it will instead trigger with regular weapon attacks, with a 100 turn cooldown.
 actors.hero.talent.swift_equip.title=swift equip
-actors.hero.talent.swift_equip.desc=_+1:_ The Duelist can switch her equipped weapon instantly _one time_, with a 30 turn cooldown.\n\n_+2:_ The Duelist can switch her equipped weapon instantly _twice within 5 turns_, with a 30 turn cooldown.\n\nIf the Duelist has this talent and it is not on cooldown, quick-using an unequipped weapon will equip it.
+actors.hero.talent.swift_equip.desc=_+1:_ The Duelist can switch her equipped weapon instantly _one time_, with a 20 turn cooldown.\n\n_+2:_ The Duelist can switch her equipped weapon instantly _twice within 5 turns_, with a 20 turn cooldown.\n\nIf the Duelist has this talent and it is not on cooldown, quick-using an unequipped weapon will equip it.
 
 actors.hero.talent.lightweight_charge.title=lightweight charge
 actors.hero.talent.lightweight_charge.desc=_+1:_ When the Duelist uses the ability of a tier 1/2/3 melee weapon, it consumes _8/7/5% less charge_.\n\n_+2:_ When the Duelist uses the ability of a tier 1/2/3 melee weapon, it consumes _17/13/10% less charge_.\n\n_+3:_ When the Duelist uses the ability of a tier 1/2/3 melee weapon, it consumes _25/20/15% less charge_.
@@ -891,9 +891,9 @@ actors.hero.talent.combined_lethality.title=combined lethality
 actors.hero.talent.combined_lethality.desc=_+1:_ If the Champion uses two different weapon abilities successively, the second ability will execute any non-boss enemy left at _below 10% HP_.\n\n_+2:_ If the Champion uses two different weapon abilities successively, the second ability will execute any non-boss enemy left at _below 20% HP_.\n\n_+3:_ If the Champion uses two different weapon abilities successively, the second ability will execute any non-boss enemy left at _below 30% HP_.\n\nIf the second ability does not contain an attack, this talent will instead trigger on the Champion's next attack within 5 turns.
 
 actors.hero.talent.unencumbered_spirit.title=unencumbered spirit
-actors.hero.talent.unencumbered_spirit.desc=_+1:_ The Monk gains _25% more energy_ for each piece of _tier 3 or lower_ equipment she is using.\n\n_+2:_ The Monk gains _50% more energy_ for each piece of _tier 2 or lower_ equipment she is using.\n\n_+3:_ The Monk gains _100% more energy_ for each piece of _tier 1_ equipment she is using. She also gains _150% more energy_ if she has no weapon (or ring of force), and gains a free cloth armor and studded gloves.
+actors.hero.talent.unencumbered_spirit.desc=_+1:_ The Monk gains _33% more energy_ for each piece of _tier 3 or lower_ equipment she is using.\n\n_+2:_ The Monk gains _67% more energy_ for each piece of _tier 2 or lower_ equipment she is using.\n\n_+3:_ The Monk gains _100% more energy_ for each piece of _tier 1_ equipment she is using. She also gains _150% more energy_ if she has no weapon (or ring of force), and gains a free cloth armor and studded gloves.
 actors.hero.talent.monastic_vigor.title=monastic vigor
-actors.hero.talent.monastic_vigor.desc=_+1:_ If the Monk has _100% energy_, her abilities are empowered.\n\n_+2:_ If the Monk has _85% or more energy_, her abilities are empowered.\n\n_+3:_ If the Monk has _70% or more energy_, her abilities are empowered.\n\nWhen empowered:\n- Flurry applies enchantments at 75% power\n- Focus is instantaneous\n- Dash gains +2 range\n- Dragon Kick deals +33% damage and applies its knock back and stun effect to all adjacent enemies\n- Meditate slowly heals 20% of missing HP and grants 80% damage resistance.
+actors.hero.talent.monastic_vigor.desc=_+1:_ If the Monk has _100% energy_, her abilities are empowered.\n\n_+2:_ If the Monk has _80% or more energy_, her abilities are empowered.\n\n_+3:_ If the Monk has _60% or more energy_, her abilities are empowered.\n\nWhen empowered:\n- Flurry applies enchantments at 75% power\n- Focus is instantaneous\n- Dash gains +2 range\n- Dragon Kick deals +33% damage and applies its knock back and stun effect to all adjacent enemies\n- Meditate slowly heals 20% of missing HP and grants 80% damage resistance.
 actors.hero.talent.combined_energy.title=combined energy
 actors.hero.talent.combined_energy.desc=_+1:_ If the Monk uses a weapon ability and a _4+ energy_ ability successively, she regains 33% of her spent energy and resets her ability cooldown.\n\n_+2:_ If the Monk uses a weapon ability and a _3+ energy_ ability successively, she regains 33% of her spent energy and resets her ability cooldown.\n\n_+3:_ If the Monk uses a weapon ability and a _2+ energy_ ability successively, she regains 33% of her spent energy and resets her ability cooldown.
 
@@ -1170,18 +1170,6 @@ actors.mobs.guard.scorpion=Get over here!
 actors.mobs.guard.def_verb=blocked
 actors.mobs.guard.desc=Once keepers of the prison, these guards have long since become no different than the inmates. They shamble like zombies, brainlessly roaming through the halls in search of anything out of place, like you!\n\nThey carry chains around their hip, possibly used to pull in enemies to close range.
 
-actors.mobs.king.name=King of Dwarves
-actors.mobs.king.notice=How dare you!
-actors.mobs.king.defeated=You cannot kill me, %s... I am... immortal...
-actors.mobs.king.def_verb=blocked
-actors.mobs.king.arise=Arise, slaves!
-actors.mobs.king.rankings_desc=Fell Before the King of Dwarves
-actors.mobs.king.desc=The last king of dwarves was known for his deep understanding of processes of life and death. He has persuaded members of his court to participate in a ritual, that should have granted them eternal youthfulness. In the end he was the only one, who got it - and an army of undead as a bonus.
-actors.mobs.king$undead.name=undead dwarf
-actors.mobs.king$undead.def_verb=blocked
-actors.mobs.king$undead.rankings_desc=Fell Before the King of Dwarves
-actors.mobs.king$undead.desc=These undead dwarves, risen by the will of the King of Dwarves, were members of his court. They appear as skeletons with a stunning amount of facial hair.
-
 actors.mobs.mimic.name=mimic
 actors.mobs.mimic.reveal=That chest is a mimic!
 actors.mobs.mimic.hidden_hint=Something about this chest feels off... Walking up and trying to open it might be a bad idea.
@@ -1303,21 +1291,6 @@ actors.mobs.warlock.desc=As the dwarves' interests shifted from engineering to a
 actors.mobs.wraith.name=wraith
 actors.mobs.wraith.desc=A wraith is a vengeful spirit of a sinner, whose grave or tomb was disturbed. Being an ethereal entity, it is very hard to hit with a regular weapon.
 
-actors.mobs.yog.name=Yog-Dzewa
-actors.mobs.yog.notice=Hope is an illusion...
-actors.mobs.yog.defeated=...
-actors.mobs.yog.rankings_desc=Devoured by Yog-Dzewa
-actors.mobs.yog.desc=Yog-Dzewa is an Old God, a powerful entity from the realms of chaos. A century ago, the ancient dwarves barely won the war against its army of demons, but were unable to kill the god itself. Instead, they then imprisoned it in the halls below their city, believing it to be too weak to rise ever again.
-actors.mobs.yog$rottingfist.name=rotting fist
-actors.mobs.yog$rottingfist.rankings_desc=Devoured by Yog-Dzewa
-actors.mobs.yog$rottingfist.desc=Yog-Dzewa is an Old God, a powerful entity from the realms of chaos. A century ago, the ancient dwarves barely won the war against its army of demons, but were unable to kill the god itself. Instead, they then imprisoned it in the halls below their city, believing it to be too weak to rise ever again.
-actors.mobs.yog$burningfist.name=burning fist
-actors.mobs.yog$burningfist.rankings_desc=Devoured by Yog-Dzewa
-actors.mobs.yog$burningfist.desc=Yog-Dzewa is an Old God, a powerful entity from the realms of chaos. A century ago, the ancient dwarves barely won the war against its army of demons, but were unable to kill the god itself. Instead, they then imprisoned it in the halls below their city, believing it to be too weak to rise ever again.
-actors.mobs.yog$larva.name=god's larva
-actors.mobs.yog$larva.rankings_desc=Devoured by Yog-Dzewa
-actors.mobs.yog$larva.desc=Yog-Dzewa is an Old God, a powerful entity from the realms of chaos. A century ago, the ancient dwarves barely won the war against its army of demons, but were unable to kill the god itself. Instead, they then imprisoned it in the halls below their city, believing it to be too weak to rise ever again.
-
 actors.mobs.yogdzewa.name=Yog-Dzewa
 actors.mobs.yogdzewa.notice=I. SEE. YOU.
 actors.mobs.yogdzewa.darkness=The darkness pulls in closer...
diff --git a/core/src/main/assets/messages/items/items.properties b/core/src/main/assets/messages/items/items.properties
index ed382b7..3a26947 100644
--- a/core/src/main/assets/messages/items/items.properties
+++ b/core/src/main/assets/messages/items/items.properties
@@ -1079,7 +1079,7 @@ items.scrolls.exotic.scrollofmetamorphosis.name=scroll of metamorphosis
 items.scrolls.exotic.scrollofmetamorphosis.choose_desc=Choose a talent to metamorphose.
 items.scrolls.exotic.scrollofmetamorphosis.replace_desc=Choose a new talent to replace your metamorphosed talent with.
 items.scrolls.exotic.scrollofmetamorphosis.metamorphose_talent=metamorphose talent
-items.scrolls.exotic.scrollofmetamorphosis.desc=This scroll contains powerful transmutation magic, which will apply to the caster instead of to an item. The magic of this scroll will let you select one talent, and replace it with one of three talents of the same tier from different hero classes!\n\nThis effect can only apply to class talents, not talents gained from subclasses or armor abilities. Talents that you cannot use will not be given as options.
+items.scrolls.exotic.scrollofmetamorphosis.desc=This scroll contains powerful transmutation magic, which will apply to the caster instead of to an item. The magic of this scroll will let you select one talent, and replace it with one of four talents of the same tier from different hero classes!\n\nThis effect can only apply to class talents, not talents gained from subclasses or armor abilities. Talents that you cannot use will not be given as options.
 
 items.scrolls.exotic.scrollofmysticalenergy.name=scroll of mystical energy
 items.scrolls.exotic.scrollofmysticalenergy.desc=The raw magical power bound up in this parchment will, when released, charge a user's equipped artifacts over time.
@@ -1511,7 +1511,7 @@ items.weapon.melee.assassinsblade.desc=A small wavy blade made of obsidian, diff
 items.weapon.melee.battleaxe.name=battle axe
 items.weapon.melee.battleaxe.stats_desc=This is a rather accurate weapon.
 items.weapon.melee.battleaxe.ability_name=heavy blow
-items.weapon.melee.battleaxe.ability_desc=The Duelist can perform a _heavy blow_ with a battle axe. This strong but predictable attack has -75% accuracy, but deals +40% damage and applies vulnerable and weaken for 5 turns if it hits. Heavy blow can surprise attack.
+items.weapon.melee.battleaxe.ability_desc=The Duelist can perform a _heavy blow_ with a battle axe. This strong but predictable attack has -75% accuracy, but deals +55% damage and applies vulnerable and weaken for 5 turns if it hits. Heavy blow can surprise attack.
 items.weapon.melee.battleaxe.desc=The enormous steel head of this battle axe puts considerable heft behind each wide stroke.
 
 items.weapon.melee.crossbow.name=crossbow
@@ -1525,40 +1525,40 @@ items.weapon.melee.crossbow$chargedshot.desc=The Duelist is focusing power into
 items.weapon.melee.dagger.name=dagger
 items.weapon.melee.dagger.stats_desc=This weapon is stronger against unaware enemies.
 items.weapon.melee.dagger.ability_name=sneak
-items.weapon.melee.dagger.ability_desc=The Duelist can _sneak_ while wielding a dagger. This ability grants the Duelist 6 turns of invisibility, but costs 2 charges.
+items.weapon.melee.dagger.ability_desc=The Duelist can _sneak_ while wielding a dagger. This ability grants the Duelist 8 turns of invisibility, but costs 2 charges.
 items.weapon.melee.dagger.desc=A simple iron dagger with a worn wooden handle.
 
 items.weapon.melee.dirk.name=dirk
 items.weapon.melee.dirk.stats_desc=This weapon is stronger against unaware enemies.
 items.weapon.melee.dirk.ability_name=sneak
-items.weapon.melee.dirk.ability_desc=The Duelist can _sneak_ while wielding a dirk. This ability grants the Duelist 5 turns of invisibility, but costs 2 charges.
+items.weapon.melee.dirk.ability_desc=The Duelist can _sneak_ while wielding a dirk. This ability grants the Duelist 6 turns of invisibility, but costs 2 charges.
 items.weapon.melee.dirk.desc=A longer thrusting dagger, gives a bit more steel to plunge into foes.
 
 items.weapon.melee.flail.name=flail
 items.weapon.melee.flail.stats_desc=This is a rather inaccurate weapon.\nThis weapon cannot surprise attack.
 items.weapon.melee.flail.ability_name=spin
 items.weapon.melee.flail.spin_warn=You can't spin the flail any more.
-items.weapon.melee.flail.ability_desc=The Duelist can _spin_ a flail to build up power for a short time. Each turn the flail is spun it will deal +20% damage, to a max of 3 times. At 3 spins the flail is also guaranteed to hit. Starting to spin the flail costs 2 charges.
+items.weapon.melee.flail.ability_desc=The Duelist can _spin_ a flail to build up power for a short time. Each turn the flail is spun it will deal +33% damage, to a max of 3 times. At 3 spins the flail is also guaranteed to hit. Starting to spin the flail costs 2 charges.
 items.weapon.melee.flail.desc=A spiked ball attached to a handle by a length of chain. Very unwieldy, but devastating if it lands a solid hit.
 items.weapon.melee.flail$spinabilitytracker.name=spinning
-items.weapon.melee.flail$spinabilitytracker.desc=The Duelist is spinning her flail, building damage for her next attack with it. Each spin takes one turn but increases damage by 20%%. At 60%% bonus damage, the flail is also guaranteed to hit.\n\nCurrent bonus damage: %1$d%%.\nTurns remaining: %2$s.
+items.weapon.melee.flail$spinabilitytracker.desc=The Duelist is spinning her flail, building damage for her next attack with it. Each spin takes one turn but increases damage by 33%%. At 100%% bonus damage, the flail is also guaranteed to hit.\n\nCurrent bonus damage: %1$d%%.\nTurns remaining: %2$s.
 
 items.weapon.melee.gauntlet.name=stone gauntlet
 items.weapon.melee.gauntlet.stats_desc=This is a very fast weapon.
 items.weapon.melee.gauntlet.ability_name=combo strike
-items.weapon.melee.gauntlet.ability_desc=The Duelist can perform a _combo strike_ with a stone gauntlet. This attack is guaranteed to hit and deals +20% damage for each time the Duelist has already successfully attacked with melee or thrown weapons in the last 5 turns.
+items.weapon.melee.gauntlet.ability_desc=The Duelist can perform a _combo strike_ with a stone gauntlet. This attack is guaranteed to hit and deals +30% damage for each time the Duelist has already successfully attacked with melee or thrown weapons in the last 5 turns.
 items.weapon.melee.gauntlet.desc=This massive gauntlet is made of crimson fabric with heavy magical stone layered on top. The fabric tightens around you, making the thick stone plates almost like a second skin. Swinging such a heavy weapon requires strength, but adds tremendous force to your blows.
 
 items.weapon.melee.glaive.name=glaive
 items.weapon.melee.glaive.stats_desc=This is a rather slow weapon.\nThis weapon has extra reach.
 items.weapon.melee.glaive.ability_name=spike
-items.weapon.melee.glaive.ability_desc=The Duelist can use the tip of a glaive to _spike_ an enemy that is in range but not adjacent. This deals +10% damage, knocks the enemy back, and is guaranteed to hit.
+items.weapon.melee.glaive.ability_desc=The Duelist can use the tip of a glaive to _spike_ an enemy that is in range but not adjacent. This deals +30% damage, knocks the enemy back, and is guaranteed to hit.
 items.weapon.melee.glaive.desc=A massive polearm consisting of a sword blade on the end of a pole.
 
 items.weapon.melee.gloves.name=studded gloves
 items.weapon.melee.gloves.stats_desc=This is a very fast weapon.
 items.weapon.melee.gloves.ability_name=combo strike
-items.weapon.melee.gloves.ability_desc=The Duelist can perform a _combo strike_ with studded gloves. This attack is guaranteed to hit and deals +30% damage for each time the Duelist has already successfully attacked with melee or thrown weapons in the last 5 turns.
+items.weapon.melee.gloves.ability_desc=The Duelist can perform a _combo strike_ with studded gloves. This attack is guaranteed to hit and deals +40% damage for each time the Duelist has already successfully attacked with melee or thrown weapons in the last 5 turns.
 items.weapon.melee.gloves.desc=These studded gloves don't provide any real protection, but they act as a serviceable weapon while keeping the hands free.
 
 items.weapon.melee.greataxe.name=greataxe
@@ -1582,7 +1582,7 @@ items.weapon.melee.greatsword.desc=This towering blade inflicts heavy damage by
 items.weapon.melee.handaxe.name=hand axe
 items.weapon.melee.handaxe.stats_desc=This is a rather accurate weapon.
 items.weapon.melee.handaxe.ability_name=heavy blow
-items.weapon.melee.handaxe.ability_desc=The Duelist can perform a _heavy blow_ with a hand axe. This strong but predictable attack has -75% accuracy, but deals +50% damage and applies vulnerable and weaken for 5 turns if it hits. Heavy blow can surprise attack.
+items.weapon.melee.handaxe.ability_desc=The Duelist can perform a _heavy blow_ with a hand axe. This strong but predictable attack has -75% accuracy, but deals +65% damage and applies vulnerable and weaken for 5 turns if it hits. Heavy blow can surprise attack.
 items.weapon.melee.handaxe.desc=A light axe, most commonly used for felling trees. The wide blade works well against foes as well.
 
 items.weapon.melee.knuckles.name=knuckleduster
@@ -1597,7 +1597,7 @@ items.weapon.melee.longsword.desc=This sword's long razor-sharp steel blade shin
 items.weapon.melee.mace.name=mace
 items.weapon.melee.mace.stats_desc=This is a rather accurate weapon.
 items.weapon.melee.mace.ability_name=heavy blow
-items.weapon.melee.mace.ability_desc=The Duelist can perform a _heavy blow_ with a mace. This strong but predictable attack has -75% accuracy, but deals +45% damage and applies vulnerable and weaken for 5 turns if it hits. Heavy blow can surprise attack.
+items.weapon.melee.mace.ability_desc=The Duelist can perform a _heavy blow_ with a mace. This strong but predictable attack has -75% accuracy, but deals +60% damage and applies vulnerable and weaken for 5 turns if it hits. Heavy blow can surprise attack.
 items.weapon.melee.mace.desc=The large iron head of this weapon inflicts substantial damage.
 
 items.weapon.melee.magesstaff.name=mage's staff
@@ -1673,7 +1673,7 @@ items.weapon.melee.runicblade.desc=A mysterious weapon from a distant land, with
 items.weapon.melee.sai.name=sai
 items.weapon.melee.sai.stats_desc=This is a very fast weapon.
 items.weapon.melee.sai.ability_name=combo strike
-items.weapon.melee.sai.ability_desc=The Duelist can perform a _combo strike_ with sai. This attack is guaranteed to hit and deals +25% damage for each time the Duelist has already successfully attacked with melee or thrown weapons in the last 5 turns.
+items.weapon.melee.sai.ability_desc=The Duelist can perform a _combo strike_ with sai. This attack is guaranteed to hit and deals +35% damage for each time the Duelist has already successfully attacked with melee or thrown weapons in the last 5 turns.
 items.weapon.melee.sai.desc=Two thin blades meant to be wielded in one hand each. Excellent for tearing down enemies with a flurry of cuts.
 
 items.weapon.melee.scimitar.name=scimitar
@@ -1687,7 +1687,7 @@ items.weapon.melee.scimitar$sworddance.desc=The Duelist is making quick momentum
 items.weapon.melee.spear.name=spear
 items.weapon.melee.spear.stats_desc=This is a rather slow weapon.\nThis weapon has extra reach.
 items.weapon.melee.spear.ability_name=spike
-items.weapon.melee.spear.ability_desc=The Duelist can use the tip of a spear to _spike_ an enemy that is in range but not adjacent. This deals +15% damage, knocks the enemy back, and is guaranteed to hit.
+items.weapon.melee.spear.ability_desc=The Duelist can use the tip of a spear to _spike_ an enemy that is in range but not adjacent. This deals +40% damage, knocks the enemy back, and is guaranteed to hit.
 items.weapon.melee.spear.desc=A slender wooden rod tipped with sharpened iron.
 
 items.weapon.melee.sword.name=sword
@@ -1700,7 +1700,7 @@ items.weapon.melee.sword$cleavetracker.desc=The Duelist is ready to follow up on
 items.weapon.melee.warhammer.name=war hammer
 items.weapon.melee.warhammer.stats_desc=This is a rather accurate weapon.
 items.weapon.melee.warhammer.ability_name=heavy blow
-items.weapon.melee.warhammer.ability_desc=The Duelist can perform a _heavy blow_ with a war hammer. This strong but predictable attack has -75% accuracy, but deals +35% damage and applies vulnerable and weaken for 5 turns if it hits. Heavy blow can surprise attack.
+items.weapon.melee.warhammer.ability_desc=The Duelist can perform a _heavy blow_ with a war hammer. This strong but predictable attack has -75% accuracy, but deals +50% damage and applies vulnerable and weaken for 5 turns if it hits. Heavy blow can surprise attack.
 items.weapon.melee.warhammer.desc=Few creatures can withstand the crushing blow of this towering mass of lead and steel, but it takes great strength to use effectively.
 
 items.weapon.melee.whip.name=whip
@@ -1826,7 +1826,7 @@ items.weapon.missiles.throwingspike.name=throwing spike
 items.weapon.missiles.throwingspike.desc=These pointed shafts of metal are meant to be thrown into distant enemies. While they aren't very strong, their simple all-metal construction makes them reasonably durable.
 
 items.weapon.missiles.throwingstone.name=throwing stone
-items.weapon.missiles.throwingstone.desc=These stones are sanded down to make them able to be thrown with more power than a regular stone. Despite the craftsmanship, they still aren't a very reliable weapon.
+items.weapon.missiles.throwingstone.desc=These stones are sanded down to make them able to be thrown with more power than a regular stone. Despite the craftsmanship they still aren't a very reliable weapon, but at least they won't stick to enemies.
 
 items.weapon.missiles.tomahawk.name=tomahawk
 items.weapon.missiles.tomahawk.desc=These throwing axes have a serrated edge that makes them a bit tricky to use. However, a solid blow with this weapon will cause an enemy to bleed.
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
index 7d900c0..b5ba2a7 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Badges.java
@@ -229,14 +229,7 @@ public class Badges {
 
 	private static final HashMap<String, String> renamedBadges = new HashMap<>();
 	static{
-		//v1.1.0 (some names were from before 1.1.0, but conversion was added then)
-		renamedBadges.put("BAG_BOUGHT_SEED_POUCH",      "BAG_BOUGHT_VELVET_POUCH");
-		renamedBadges.put("BAG_BOUGHT_WAND_HOLSTER",    "BAG_BOUGHT_MAGICAL_HOLSTER");
-
-		renamedBadges.put("POTIONS_COOKED_1", "ITEMS_CRAFTED_1");
-		renamedBadges.put("POTIONS_COOKED_2", "ITEMS_CRAFTED_2");
-		renamedBadges.put("POTIONS_COOKED_3", "ITEMS_CRAFTED_3");
-		renamedBadges.put("POTIONS_COOKED_4", "ITEMS_CRAFTED_4");
+		//no renamed badges currently
 	}
 
 	public static HashSet<Badge> restore( Bundle bundle ) {
@@ -525,6 +518,10 @@ public class Badges {
 		if (!item.levelKnown || item instanceof Artifact) {
 			return;
 		}
+
+		if (item instanceof MeleeWeapon){
+			validateDuelistUnlock();
+		}
 		
 		Badge badge = null;
 		if (!local.contains( Badge.ITEM_LEVEL_1 ) && item.level() >= 3) {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
index c84bd57..ba7b4db 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Dungeon.java
@@ -188,7 +188,6 @@ public class Dungeon {
 	public static HashSet<Integer> chapters;
 
 	public static SparseArray<ArrayList<Item>> droppedItems;
-	public static SparseArray<ArrayList<Item>> portedItems;
 
 	//first variable is only assigned when game is started, second is updated every time game is saved
 	public static int initialVersion;
@@ -250,7 +249,6 @@ public class Dungeon {
 		energy = 0;
 
 		droppedItems = new SparseArray<>();
-		portedItems = new SparseArray<>();
 
 		LimitedDrops.reset();
 		
@@ -558,10 +556,6 @@ public class Dungeon {
 			for (int d : droppedItems.keyArray()) {
 				bundle.put(Messages.format(DROPPED, d), droppedItems.get(d));
 			}
-			
-			for (int p : portedItems.keyArray()){
-				bundle.put(Messages.format(PORTED, p), portedItems.get(p));
-			}
 
 			quickslot.storePlaceholders( bundle );
 
@@ -720,7 +714,6 @@ public class Dungeon {
 		Generator.restoreFromBundle( bundle );
 
 		droppedItems = new SparseArray<>();
-		portedItems = new SparseArray<>();
 		for (int i=1; i <= 26; i++) {
 			
 			//dropped items
@@ -732,16 +725,7 @@ public class Dungeon {
 			if (!items.isEmpty()) {
 				droppedItems.put( i, items );
 			}
-			
-			//ported items
-			items = new ArrayList<>();
-			if (bundle.contains(Messages.format( PORTED, i )))
-				for (Bundlable b : bundle.getCollection( Messages.format( PORTED, i ) ) ) {
-					items.add( (Item)b );
-				}
-			if (!items.isEmpty()) {
-				portedItems.put( i, items );
-			}
+
 		}
 	}
 	
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/GamesInProgress.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/GamesInProgress.java
index f92fe96..6745bf9 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/GamesInProgress.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/GamesInProgress.java
@@ -108,8 +108,8 @@ public class GamesInProgress {
 				info.slot = slot;
 				Dungeon.preview(info, bundle);
 				
-				//saves from before v1.0.3 are not supported
-				if (info.version < ShatteredPixelDungeon.v1_0_3) {
+				//saves from before v1.2.3 are not supported
+				if (info.version < ShatteredPixelDungeon.v1_2_3) {
 					info = null;
 				}
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
index 917431b..7248278 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/Rankings.java
@@ -242,6 +242,11 @@ public enum Rankings {
 	public static final String DAILY_REPLAY	= "daily_replay";
 
 	public void saveGameData(Record rec){
+		if (Dungeon.hero == null){
+			rec.gameData = null;
+			return;
+		}
+
 		rec.gameData = new Bundle();
 
 		Belongings belongings = Dungeon.hero.belongings;
@@ -316,6 +321,8 @@ public enum Rankings {
 		QuickSlotButton.reset();
 		Toolbar.swappedQuickslots = false;
 
+		if (data == null) return;
+
 		Bundle handler = data.getBundle(HANDLERS);
 		Scroll.restore(handler);
 		Potion.restore(handler);
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java
index ac2c8fc..3a2e870 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/SPDSettings.java
@@ -359,9 +359,6 @@ public class SPDSettings extends GameSettings {
 	}
 	
 	public static boolean systemFont(){
-		//TODO add pixel font support for vietnamese
-		if (language() == Languages.VIETNAMESE) return true;
-
 		return getBoolean(KEY_SYSTEMFONT,
 				(language() == Languages.KOREAN || language() == Languages.CHINESE || language() == Languages.JAPANESE));
 	}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
index 7fd879a..9fd9698 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ShatteredPixelDungeon.java
@@ -35,9 +35,7 @@ import com.watabou.utils.PlatformSupport;
 public class ShatteredPixelDungeon extends Game {
 
 	//variable constants for specific older versions of shattered, used for data conversion
-	//versions older than v1.0.3 are no longer supported, and data from them is ignored
-	public static final int v1_0_3  = 574;
-	public static final int v1_1_2  = 588;
+	//versions older than v1.2.3 are no longer supported, and data from them is ignored
 	public static final int v1_2_3  = 628;
 	public static final int v1_3_2  = 648;
 	public static final int v1_4_3  = 668;
@@ -64,36 +62,6 @@ public class ShatteredPixelDungeon extends Game {
 		com.watabou.utils.Bundle.addAlias(
 				com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Explosive.class,
 				"com.shatteredpixel.shatteredpixeldungeon.items.weapon.curses.Fragile" );
-
-		//pre-v1.2.0
-		com.watabou.utils.Bundle.addAlias(
-				com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.CleansingDart.class,
-				"com.shatteredpixel.shatteredpixeldungeon.items.weapon.missiles.darts.SleepDart" );
-
-		com.watabou.utils.Bundle.addAlias(
-				com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.CrystalVaultRoom.class,
-				"com.shatteredpixel.shatteredpixeldungeon.levels.rooms.special.VaultRoom" );
-
-		//pre-v1.1.0
-		com.watabou.utils.Bundle.addAlias(
-				com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfDread.class,
-				"com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPetrification" );
-		com.watabou.utils.Bundle.addAlias(
-				com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfSirensSong.class,
-				"com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfAffection" );
-		com.watabou.utils.Bundle.addAlias(
-				com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfChallenge.class,
-				"com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfConfusion" );
-		com.watabou.utils.Bundle.addAlias(
-				com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfDivineInspiration.class,
-				"com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfHolyFuror" );
-		com.watabou.utils.Bundle.addAlias(
-				com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfMastery.class,
-				"com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic.PotionOfAdrenalineSurge" );
-		com.watabou.utils.Bundle.addAlias(
-				ScrollOfMetamorphosis.class,
-				"com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPolymorph" );
-		
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
index 62e1530..7572d7d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/Char.java
@@ -846,43 +846,48 @@ public abstract class Char extends Actor {
 		return false;
 	}
 
-	public synchronized void add( Buff buff ) {
+	public synchronized boolean add( Buff buff ) {
 
 		if (buff(PotionOfCleansing.Cleanse.class) != null) { //cleansing buff
 			if (buff.type == Buff.buffType.NEGATIVE
 					&& !(buff instanceof AllyBuff)
 					&& !(buff instanceof LostInventory)){
-				return;
+				return false;
 			}
 		}
 
 		if (sprite != null && buff(Challenge.SpectatorFreeze.class) != null){
-			return; //can't add buffs while frozen and game is loaded
+			return false; //can't add buffs while frozen and game is loaded
 		}
 
 		buffs.add( buff );
 		if (Actor.chars().contains(this)) Actor.add( buff );
 
-		if (sprite != null && buff.announced)
-			switch(buff.type){
+		if (sprite != null && buff.announced) {
+			switch (buff.type) {
 				case POSITIVE:
 					sprite.showStatus(CharSprite.POSITIVE, Messages.titleCase(buff.name()));
 					break;
 				case NEGATIVE:
 					sprite.showStatus(CharSprite.NEGATIVE, Messages.titleCase(buff.name()));
 					break;
-				case NEUTRAL: default:
+				case NEUTRAL:
+				default:
 					sprite.showStatus(CharSprite.NEUTRAL, Messages.titleCase(buff.name()));
 					break;
 			}
+		}
+
+		return true;
 
 	}
 	
-	public synchronized void remove( Buff buff ) {
+	public synchronized boolean remove( Buff buff ) {
 		
 		buffs.remove( buff );
 		Actor.remove( buff );
 
+		return true;
 	}
 	
 	public synchronized void remove( Class<? extends Buff> buffClass ) {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Alchemy.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Alchemy.java
index ff02412..8a84522 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Alchemy.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/blobs/Alchemy.java
@@ -42,16 +42,6 @@ public class Alchemy extends Blob {
 				if (Dungeon.level.insideMap(cell)) {
 					off[cell] = cur[cell];
 
-					//for pre-v1.1.0 saves, drops 1/4 the pot's old energy contents in crystals
-					if (off[cell] >= 4){
-						int n;
-						do {
-							n = cell + PathFinder.NEIGHBOURS8[Random.Int( 8 )];
-						} while (!Dungeon.level.passable[n] && !Dungeon.level.avoid[n]);
-						Dungeon.level.drop( new EnergyCrystal((int)Math.ceil(off[cell]/4f)), n ).sprite.drop( cell );
-						off[cell] = 1;
-					}
-
 					volume += off[cell];
 					if (off[cell] > 0 && Dungeon.level.visited[cell]){
 						Notes.add( Notes.Landmark.ALCHEMY );
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
index f43d8dc..a8be6ee 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Berserk.java
@@ -29,11 +29,17 @@ import com.shatteredpixel.shatteredpixeldungeon.effects.SpellSprite;
 import com.shatteredpixel.shatteredpixeldungeon.items.BrokenSeal.WarriorShield;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
+import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIcon;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.ui.DangerIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
+import com.watabou.noosa.BitmapText;
 import com.watabou.noosa.Image;
+import com.watabou.noosa.Visual;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.GameMath;
@@ -135,6 +141,8 @@ public class Berserk extends Buff implements ActionIndicator.Action {
 
 				if (power < 1f){
 					ActionIndicator.clearAction(this);
+				} else {
+					ActionIndicator.refresh();
 				}
 
 				if (power <= 0) {
@@ -240,9 +248,22 @@ public class Berserk extends Buff implements ActionIndicator.Action {
 	}
 
 	@Override
-	public Image actionIcon() {
-		//TODO, should look into these in general honestly
-		return new BuffIcon(BuffIndicator.FURY, true);
+	public int actionIcon() {
+		return HeroIcon.BERSERK;
+	}
+
+	@Override
+	public Visual secondaryVisual() {
+		BitmapText txt = new BitmapText(PixelScene.pixelFont);
+		txt.text((int) (power * 100) + "%");
+		txt.hardlight(CharSprite.POSITIVE);
+		txt.measure();
+		return txt;
+	}
+
+	@Override
+	public int indicatorColor() {
+		return 0x660000;
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java
index 08959cb..877b855 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Buff.java
@@ -67,9 +67,8 @@ public class Buff extends Actor {
 		}
 		
 		this.target = target;
-		target.add( this );
 
-		if (target.buffs().contains(this)){
+		if (target.add( this )){
 			if (target.sprite != null) fx( true );
 			return true;
 		} else {
@@ -79,8 +78,7 @@ public class Buff extends Actor {
 	}
 	
 	public void detach() {
-		if (target.sprite != null) fx( false );
-		target.remove( this );
+		if (target.remove( this ) && target.sprite != null) fx( false );
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
index acff34d..8037311 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Combo.java
@@ -36,16 +36,20 @@ import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.AttackIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon;
 import com.shatteredpixel.shatteredpixeldungeon.utils.BArray;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndCombo;
+import com.watabou.noosa.BitmapText;
 import com.watabou.noosa.Image;
+import com.watabou.noosa.Visual;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.Callback;
@@ -71,7 +75,7 @@ public class Combo extends Buff implements ActionIndicator.Action {
 	public void tintIcon(Image icon) {
 		ComboMove move = getHighestMove();
 		if (move != null){
-			icon.hardlight(move.tintColor & 0x00FFFFFF);
+			icon.hardlight(move.tintColor);
 		} else {
 			icon.resetColor();
 		}
@@ -174,16 +178,31 @@ public class Combo extends Buff implements ActionIndicator.Action {
 	}
 
 	@Override
-	public Image actionIcon() {
-		Image icon;
-		if (((Hero)target).belongings.weapon() != null){
-			icon = new ItemSprite(((Hero)target).belongings.weapon().image, null);
+	public int actionIcon() {
+		return HeroIcon.COMBO;
+	}
+
+	@Override
+	public Visual secondaryVisual() {
+		BitmapText txt = new BitmapText(PixelScene.pixelFont);
+		txt.text( Integer.toString(count) );
+		txt.hardlight(CharSprite.POSITIVE);
+		txt.measure();
+		return txt;
+	}
+
+	@Override
+	public int indicatorColor() {
+		ComboMove best = getHighestMove();
+		if (best == null) {
+			return 0xDFDFDF;
 		} else {
-			icon = new ItemSprite(new Item(){ {image = ItemSpriteSheet.WEAPON_HOLDER; }});
+			//take the tint color and darken slightly to match buff icon
+			int r = (int) ((best.tintColor >> 16) * 0.875f);
+			int g = (int) (((best.tintColor >> 8) & 0xFF) * 0.875f);
+			int b = (int) ((best.tintColor & 0xFF) * 0.875f);
+			return (r << 16) + (g << 8) + b;
 		}
-
-		icon.tint(getHighestMove().tintColor);
-		return icon;
 	}
 
 	@Override
@@ -192,11 +211,11 @@ public class Combo extends Buff implements ActionIndicator.Action {
 	}
 
 	public enum ComboMove {
-		CLOBBER(2, 0xFF00FF00),
-		SLAM   (4, 0xFFCCFF00),
-		PARRY  (6, 0xFFFFFF00),
-		CRUSH  (8, 0xFFFFCC00),
-		FURY   (10, 0xFFFF0000);
+		CLOBBER(2, 0x00FF00),
+		SLAM   (4, 0xCCFF00),
+		PARRY  (6, 0xFFFF00),
+		CRUSH  (8, 0xFFCC00),
+		FURY   (10, 0xFF0000);
 
 		public int comboReq, tintColor;
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/LifeLink.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/LifeLink.java
index c8cea61..7a14fa9 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/LifeLink.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/LifeLink.java
@@ -43,7 +43,7 @@ public class LifeLink extends FlavourBuff {
 	public void detach() {
 		super.detach();
 		Char ch = (Char)Actor.findById(object);
-		if (!target.isAlive() && ch != null){
+		if (!target.isActive() && ch != null){
 			for (LifeLink l : ch.buffs(LifeLink.class)){
 				if (l.object == target.id()){
 					l.detach();
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Momentum.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Momentum.java
index 2c67bbe..62065c5 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Momentum.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Momentum.java
@@ -27,10 +27,15 @@ import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.effects.SpellSprite;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
+import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIcon;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon;
+import com.watabou.noosa.BitmapText;
 import com.watabou.noosa.Image;
+import com.watabou.noosa.Visual;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.GameMath;
@@ -76,6 +81,8 @@ public class Momentum extends Buff implements ActionIndicator.Action {
 			if (momentumStacks <= 0) {
 				ActionIndicator.clearAction(this);
 				if (freerunCooldown <= 0) detach();
+			} else {
+				ActionIndicator.refresh();
 			}
 		}
 		movedLastTurn = false;
@@ -122,12 +129,10 @@ public class Momentum extends Buff implements ActionIndicator.Action {
 	
 	@Override
 	public void tintIcon(Image icon) {
-		if (freerunTurns > 0){
+		if (freerunCooldown == 0){
 			icon.hardlight(1,1,0);
-		} else if (freerunCooldown > 0){
-			icon.hardlight(0.5f,0.5f,1);
 		} else {
-			icon.hardlight(1f - (momentumStacks /10f),1,1f - (momentumStacks /10f));
+			icon.hardlight(0.5f,0.5f,1);
 		}
 	}
 
@@ -138,7 +143,7 @@ public class Momentum extends Buff implements ActionIndicator.Action {
 		} else if (freerunCooldown > 0){
 			return (freerunCooldown) / 30f;
 		} else {
-			return (10 - momentumStacks) / 10f;
+			return 0;
 		}
 	}
 
@@ -149,7 +154,7 @@ public class Momentum extends Buff implements ActionIndicator.Action {
 		} else if (freerunCooldown > 0){
 			return Integer.toString(freerunCooldown);
 		} else {
-			return Integer.toString(momentumStacks);
+			return "";
 		}
 	}
 
@@ -205,10 +210,22 @@ public class Momentum extends Buff implements ActionIndicator.Action {
 	}
 
 	@Override
-	public Image actionIcon() {
-		Image im = new BuffIcon(BuffIndicator.HASTE, true);
-		im.hardlight(0x99992E);
-		return im;
+	public int actionIcon() {
+		return HeroIcon.MOMENTUM;
+	}
+
+	@Override
+	public Visual secondaryVisual() {
+		BitmapText txt = new BitmapText(PixelScene.pixelFont);
+		txt.text(Integer.toString((int)momentumStacks) );
+		txt.hardlight(CharSprite.POSITIVE);
+		txt.measure();
+		return txt;
+	}
+
+	@Override
+	public int indicatorColor() {
+		return 0x444444;
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
index 37a3a88..8e7fbaf 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/MonkEnergy.java
@@ -42,13 +42,19 @@ import com.shatteredpixel.shatteredpixeldungeon.levels.features.Door;
 import com.shatteredpixel.shatteredpixeldungeon.mechanics.Ballistica;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
+import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
+import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.AttackIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
+import com.shatteredpixel.shatteredpixeldungeon.windows.WndInfoItem;
 import com.shatteredpixel.shatteredpixeldungeon.windows.WndMonkAbilities;
+import com.watabou.noosa.BitmapText;
 import com.watabou.noosa.Image;
+import com.watabou.noosa.Visual;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.Callback;
@@ -63,6 +69,8 @@ public class MonkEnergy extends Buff implements ActionIndicator.Action {
 	public float energy;
 	public int cooldown;
 
+	private static final float MAX_COOLDOWN = 5;
+
 	@Override
 	public int icon() {
 		return BuffIndicator.MONK_ENERGY;
@@ -72,8 +80,6 @@ public class MonkEnergy extends Buff implements ActionIndicator.Action {
 	public void tintIcon(Image icon) {
 		if (cooldown > 0){
 			icon.hardlight(0.33f, 0.33f, 1f);
-		} else if (abilitiesEmpowered(Dungeon.hero)) {
-			icon.tint(0.6f, 1f, 0.2f, 0.33f);
 		} else {
 			icon.resetColor();
 		}
@@ -81,12 +87,16 @@ public class MonkEnergy extends Buff implements ActionIndicator.Action {
 
 	@Override
 	public float iconFadePercent() {
-		return Math.max(0, (energyCap() - energy)/ energyCap());
+		return Math.max(0, cooldown/MAX_COOLDOWN);
 	}
 
 	@Override
 	public String iconTextDisplay() {
-		return Integer.toString((int)energy);
+		if (cooldown > 0){
+			return Integer.toString(cooldown);
+		} else {
+			return "";
+		}
 	}
 
 	@Override
@@ -161,9 +171,9 @@ public class MonkEnergy extends Buff implements ActionIndicator.Action {
 					if (hero.belongings.armor().tier <= 1 && points >= 3){
 						enGainMulti += 1.00f;
 					} else if (hero.belongings.armor().tier <= 2 && points >= 2){
-						enGainMulti += 0.50f;
+						enGainMulti += 0.667f;
 					} else if (hero.belongings.armor().tier <= 3 && points >= 1){
-						enGainMulti += 0.25f;
+						enGainMulti += 0.333f;
 					}
 				}
 
@@ -172,9 +182,9 @@ public class MonkEnergy extends Buff implements ActionIndicator.Action {
 					if (((MeleeWeapon) hero.belongings.weapon()).tier <= 1 && points >= 3){
 						enGainMulti += 1.00f;
 					} else if (((MeleeWeapon) hero.belongings.weapon()).tier <= 2 && points >= 2){
-						enGainMulti += 0.50f;
+						enGainMulti += 0.667f;
 					} else if (((MeleeWeapon) hero.belongings.weapon()).tier <= 3 && points >= 1){
-						enGainMulti += 0.25f;
+						enGainMulti += 0.333f;
 					}
 				} else if (hero.belongings.weapon == null) {
 					if (hero.buff(RingOfForce.Force.class) == null && points >= 3){
@@ -216,17 +226,19 @@ public class MonkEnergy extends Buff implements ActionIndicator.Action {
 
 		if (cooldown > 0 || energy < 1){
 			ActionIndicator.clearAction(this);
+		} else {
+			ActionIndicator.refresh();
 		}
 		BuffIndicator.refreshHero();
 	}
 
 	public boolean abilitiesEmpowered( Hero hero ){
-		//100%/85%/70% energy at +1/+2/+3
-		return energy/energyCap() >= 1.15f - 0.15f*hero.pointsInTalent(Talent.MONASTIC_VIGOR);
+		//100%/80%/60% energy at +1/+2/+3
+		return energy/energyCap() >= 1.2f - 0.2f*hero.pointsInTalent(Talent.MONASTIC_VIGOR);
 	}
 
 	public void processCombinedEnergy(Talent.CombinedEnergyAbilityTracker tracker){
-		energy += tracker.energySpent/3f;
+		energy = Math.min(energy+tracker.energySpent/3f, energyCap());
 		cooldown = 0;
 		tracker.detach();
 		if (energy >= 1){
@@ -241,8 +253,26 @@ public class MonkEnergy extends Buff implements ActionIndicator.Action {
 	}
 
 	@Override
-	public Image actionIcon() {
-		return new HeroIcon(HeroSubClass.MONK);
+	public int actionIcon() {
+		return HeroIcon.MONK_ABILITIES;
+	}
+
+	@Override
+	public Visual secondaryVisual() {
+		BitmapText txt = new BitmapText(PixelScene.pixelFont);
+		txt.text( Integer.toString((int)energy) );
+		txt.hardlight(CharSprite.POSITIVE);
+		txt.measure();
+		return txt;
+	}
+
+	@Override
+	public int indicatorColor() {
+		if (abilitiesEmpowered(Dungeon.hero)){
+			return 0x99CC33;
+		} else {
+			return 0xA08840;
+		}
 	}
 
 	@Override
@@ -602,22 +632,27 @@ public class MonkEnergy extends Buff implements ActionIndicator.Action {
 					}
 				}
 
+				//we process this as 5x wait actions instead of one 5 tick action to prevent
+				// effects like time freeze from eating the whole action duration
+				for (int i = 0; i < 5; i++) hero.spendConstant(Actor.TICK);
+
 				if (Buff.affect(hero, MonkEnergy.class).abilitiesEmpowered(hero)){
 					int toHeal = Math.round((hero.HT - hero.HP)/5f);
 					if (toHeal > 0) {
 						Buff.affect(hero, Healing.class).setHeal(toHeal, 0, 1);
 					}
-					Buff.affect(hero, MeditateResistance.class, 5f);
+					Buff.affect(hero, MeditateResistance.class, hero.cooldown());
 				}
 
-				//we process this as 5x wait actions instead of one 5 tick action to prevent
-				// effects like time freeze from eating the whole action duration
-				for (int i = 0; i < 5; i++) hero.spendConstant(Actor.TICK);
 				hero.next();
 				Buff.affect(hero, MonkEnergy.class).abilityUsed(this);
 			}
 
-			public static class MeditateResistance extends FlavourBuff{};
+			public static class MeditateResistance extends FlavourBuff{
+				{
+					actPriority = HERO_PRIO+1; //ends just before the hero acts
+				}
+			};
 		}
 
 	}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
index 9ac3ff2..f33e862 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/Preparation.java
@@ -34,11 +34,16 @@ import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
+import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon;
 import com.shatteredpixel.shatteredpixeldungeon.utils.BArray;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
+import com.watabou.noosa.BitmapText;
 import com.watabou.noosa.Image;
+import com.watabou.noosa.Visual;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.PathFinder;
@@ -182,25 +187,6 @@ public class Preparation extends Buff implements ActionIndicator.Action {
 		}
 	}
 
-	@Override
-	public float iconFadePercent() {
-		AttackLevel level = AttackLevel.getLvl(turnsInvis);
-		if (level == AttackLevel.LVL_4){
-			return 0;
-		} else {
-			float turnsForCur = level.turnsReq;
-			float turnsForNext = AttackLevel.values()[level.ordinal()+1].turnsReq;
-			turnsForNext -= turnsForCur;
-			float turnsToNext = turnsInvis - turnsForCur;
-			return Math.min(1, (turnsForNext - turnsToNext)/(turnsForNext));
-		}
-	}
-
-	@Override
-	public String iconTextDisplay() {
-		return Integer.toString(turnsInvis);
-	}
-
 	@Override
 	public String desc() {
 		String desc = Messages.get(this, "desc");
@@ -251,11 +237,30 @@ public class Preparation extends Buff implements ActionIndicator.Action {
 	}
 	
 	@Override
-	public Image actionIcon() {
-		Image actionIco = Effects.get(Effects.Type.WOUND);
+	public int actionIcon() {
+		return HeroIcon.PREPARATION;
+	}
+
+	@Override
+	public Visual primaryVisual() {
+		Image actionIco = new HeroIcon(this);
 		tintIcon(actionIco);
 		return actionIco;
 	}
+
+	@Override
+	public Visual secondaryVisual() {
+		BitmapText txt = new BitmapText(PixelScene.pixelFont);
+		txt.text(Integer.toString(Math.min(9, turnsInvis)));
+		txt.hardlight(CharSprite.POSITIVE);
+		txt.measure();
+		return txt;
+	}
+
+	@Override
+	public int indicatorColor() {
+		return 0x444444;
+	}
 	
 	@Override
 	public void doAction() {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/SnipersMark.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/SnipersMark.java
index 90b295c..59de08c 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/SnipersMark.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/buffs/SnipersMark.java
@@ -32,6 +32,7 @@ import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.BuffIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon;
 import com.shatteredpixel.shatteredpixeldungeon.ui.QuickSlotButton;
 import com.watabou.noosa.Image;
 import com.watabou.utils.Bundle;
@@ -113,10 +114,15 @@ public class SnipersMark extends FlavourBuff implements ActionIndicator.Action {
 	}
 
 	@Override
-	public Image actionIcon() {
-		return new ItemSprite(ItemSpriteSheet.SPIRIT_BOW, null);
+	public int actionIcon() {
+		return HeroIcon.SNIPERS_MARK;
 	}
-	
+
+	@Override
+	public int indicatorColor() {
+		return 0x444444;
+	}
+
 	@Override
 	public void doAction() {
 		
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
index 606ffee..7dffb55 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Hero.java
@@ -570,7 +570,7 @@ public class Hero extends Char {
 			}
 			if (armDr > 0) dr += armDr;
 		}
-		if (belongings.weapon() != null)  {
+		if (belongings.weapon() != null && !RingOfForce.fightingUnarmed(this))  {
 			int wepDr = Random.NormalIntRange( 0 , belongings.weapon().defenseFactor( this ) );
 			if (STR() < ((Weapon)belongings.weapon()).STRReq()){
 				wepDr -= 2*(((Weapon)belongings.weapon()).STRReq() - STR());
@@ -1151,7 +1151,7 @@ public class Hero extends Char {
 			Camera.main.shake(1, 1f);
 			ready();
 			return false;
-		} else if (transition != null && transition.inside(pos)) {
+		} else if (!Dungeon.level.locked && transition != null && transition.inside(pos)) {
 
 			if (transition.type == LevelTransition.Type.SURFACE){
 				if (belongings.getItem( Amulet.class ) == null) {
@@ -1567,6 +1567,8 @@ public class Hero extends Char {
 					Chasm.heroJump(this);
 					interrupt();
 				} else {
+					flying = false;
+					remove(buff(Levitation.class)); //directly remove to prevent cell pressing
 					Chasm.heroFall(target);
 				}
 				canSelfTrample = false;
@@ -1767,14 +1769,15 @@ public class Hero extends Char {
 	}
 	
 	@Override
-	public void add( Buff buff ) {
+	public boolean add( Buff buff ) {
 
-		if (buff(TimekeepersHourglass.timeStasis.class) != null)
-			return;
+		if (buff(TimekeepersHourglass.timeStasis.class) != null) {
+			return false;
+		}
 
-		super.add( buff );
+		boolean added = super.add( buff );
 
-		if (sprite != null && buffs().contains(buff)) {
+		if (sprite != null && added) {
 			String msg = buff.heroMessage();
 			if (msg != null){
 				GLog.w(msg);
@@ -1787,13 +1790,17 @@ public class Hero extends Char {
 		}
 		
 		BuffIndicator.refreshHero();
+
+		return added;
 	}
 	
 	@Override
-	public void remove( Buff buff ) {
-		super.remove( buff );
-
-		BuffIndicator.refreshHero();
+	public boolean remove( Buff buff ) {
+		if (super.remove( buff )) {
+			BuffIndicator.refreshHero();
+			return true;
+		}
+		return false;
 	}
 	
 	@Override
@@ -1992,6 +1999,12 @@ public class Hero extends Char {
 	
 	@Override
 	public void onAttackComplete() {
+
+		if (enemy == null){
+			curAction = null;
+			super.onAttackComplete();
+			return;
+		}
 		
 		AttackIndicator.target(enemy);
 		boolean wasEnemy = enemy.alignment == Alignment.ENEMY
@@ -2088,7 +2101,9 @@ public class Hero extends Char {
 		}
 		curAction = null;
 
-		super.onOperateComplete();
+		if (!ready) {
+			super.onOperateComplete();
+		}
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
index ea26474..fad51d3 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/Talent.java
@@ -246,7 +246,7 @@ public enum Talent {
 	public static class SwiftEquipCooldown extends FlavourBuff{
 		public boolean secondUse;
 		public boolean hasSecondUse(){
-			return secondUse && cooldown() > 24f;
+			return secondUse && cooldown() > 14f;
 		}
 
 		public int icon() { return BuffIndicator.TIME; }
@@ -254,7 +254,7 @@ public enum Talent {
 			if (hasSecondUse()) icon.hardlight(0.85f, 0f, 1.0f);
 			else                icon.hardlight(0.35f, 0f, 0.7f);
 		}
-		public float iconFadePercent() { return GameMath.gate(0, visualcooldown() / 30f, 1); }
+		public float iconFadePercent() { return GameMath.gate(0, visualcooldown() / 20f, 1); }
 
 		private static final String SECOND_USE = "second_use";
 		@Override
@@ -448,8 +448,8 @@ public enum Talent {
 			Buff.prolong( hero, Haste.class, 0.67f+hero.pointsInTalent(INVIGORATING_MEAL));
 		}
 		if (hero.hasTalent(STRENGTHENING_MEAL)){
-			//2 bonus physical damage for next 2/3 attacks
-			Buff.affect( hero, PhysicalEmpower.class).set(2, 1 + hero.pointsInTalent(STRENGTHENING_MEAL));
+			//3 bonus physical damage for next 2/3 attacks
+			Buff.affect( hero, PhysicalEmpower.class).set(3, 1 + hero.pointsInTalent(STRENGTHENING_MEAL));
 		}
 		if (hero.hasTalent(FOCUSED_MEAL)){
 			if (hero.heroClass == HeroClass.DUELIST){
@@ -658,7 +658,9 @@ public enum Talent {
 
 		if (hero.hasTalent(DEADLY_FOLLOWUP)) {
 			if (hero.belongings.attackingWeapon() instanceof MissileWeapon) {
-				Buff.prolong(enemy, DeadlyFollowupTracker.class, 5f);
+				if (!(hero.belongings.attackingWeapon() instanceof SpiritBow.SpiritArrow)) {
+					Buff.prolong(enemy, DeadlyFollowupTracker.class, 5f);
+				}
 			} else if (enemy.buff(DeadlyFollowupTracker.class) != null){
 				dmg = Math.round(dmg * (1.0f + .08f*hero.pointsInTalent(DEADLY_FOLLOWUP)));
 				if (!(enemy instanceof Mob) || !((Mob) enemy).surprisedBy(hero)){
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
index 5568228..03fba06 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/Ratmogrify.java
@@ -143,8 +143,9 @@ public class Ratmogrify extends ArmorAbility {
 			//preserve champion enemy buffs
 			HashSet<ChampionEnemy> champBuffs = ch.buffs(ChampionEnemy.class);
 			for (ChampionEnemy champ : champBuffs){
-				ch.remove(champ);
-				ch.sprite.clearAura();
+				if (ch.remove(champ)) {
+					ch.sprite.clearAura();
+				}
 			}
 
 			Actor.remove( ch );
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/ElementalStrike.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/ElementalStrike.java
index cf20bc4..85211c0 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/ElementalStrike.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/ElementalStrike.java
@@ -335,7 +335,9 @@ public class ElementalStrike extends ArmorAbility {
 				int terr = Dungeon.level.map[cell];
 				if (terr == Terrain.EMPTY || terr == Terrain.EMBERS || terr == Terrain.EMPTY_DECO ||
 						terr == Terrain.GRASS) {
-					if (grassToPlace > 0){
+					if (grassToPlace > 0
+							&& !Char.hasProp(Actor.findChar(cell), Char.Property.IMMOVABLE)
+							&& Dungeon.level.plants.get(cell) == null){
 						Level.set(cell, highGrassType);
 						grassToPlace--;
 					} else {
@@ -405,8 +407,9 @@ public class ElementalStrike extends ArmorAbility {
 		//*** Lucky ***
 		} else if (ench instanceof Lucky){
 			for (Char ch : affected){
-				if (Random.Float() < 0.1f*powerMulti &&
-						ch.buff(ElementalStrikeLuckyTracker.class) == null) {
+				if (ch.alignment == Char.Alignment.ENEMY
+						&& Random.Float() < 0.1f*powerMulti
+						&& ch.buff(ElementalStrikeLuckyTracker.class) == null) {
 					Dungeon.level.drop(Lucky.genLoot(), ch.pos).sprite.drop();
 					Lucky.showFlare(ch.sprite);
 					Buff.affect(ch, ElementalStrikeLuckyTracker.class);
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Feint.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Feint.java
index 42a847c..8d22e7a 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Feint.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/hero/abilities/duelist/Feint.java
@@ -195,8 +195,8 @@ public class Feint extends ArmorAbility {
 		}
 
 		@Override
-		public void add( Buff buff ) {
-
+		public boolean add( Buff buff ) {
+			return false;
 		}
 
 		{
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java
index 1d59e67..40eb14d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Bee.java
@@ -124,13 +124,16 @@ public class Bee extends Mob {
 	}
 
 	@Override
-	public void add(Buff buff) {
-		super.add(buff);
-		//TODO maybe handle honeyed bees with their own ally buff?
-		if (buff instanceof AllyBuff){
-			intelligentAlly = false;
-			setPotInfo(-1, null);
+	public boolean add(Buff buff) {
+		if (super.add(buff)) {
+			//TODO maybe handle honeyed bees with their own ally buff?
+			if (buff instanceof AllyBuff) {
+				intelligentAlly = false;
+				setPotInfo(-1, null);
+			}
+			return true;
 		}
+		return false;
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM100.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM100.java
index ebe1ece..0f3da71 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM100.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/DM100.java
@@ -71,10 +71,11 @@ public class DM100 extends Mob implements Callback {
 	public int drRoll() {
 		return super.drRoll() + Random.NormalIntRange(0, 4);
 	}
-	
+
 	@Override
 	protected boolean canAttack( Char enemy ) {
-		return new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos == enemy.pos;
+		return super.canAttack(enemy)
+				|| new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos == enemy.pos;
 	}
 	
 	//used so resistances can differentiate between melee and magical attacks
@@ -83,7 +84,8 @@ public class DM100 extends Mob implements Callback {
 	@Override
 	protected boolean doAttack( Char enemy ) {
 
-		if (Dungeon.level.distance( pos, enemy.pos ) <= 1) {
+		if (Dungeon.level.adjacent( pos, enemy.pos )
+				|| new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos != enemy.pos) {
 			
 			return super.doAttack( enemy );
 			
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Elemental.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Elemental.java
index 0cab80d..c70e57d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Elemental.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Elemental.java
@@ -112,16 +112,18 @@ public abstract class Elemental extends Mob {
 	
 	@Override
 	protected boolean canAttack( Char enemy ) {
-		if (rangedCooldown <= 0) {
-			return new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT ).collisionPos == enemy.pos;
+		if (super.canAttack(enemy)){
+			return true;
 		} else {
-			return super.canAttack( enemy );
+			return rangedCooldown < 0 && new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT ).collisionPos == enemy.pos;
 		}
 	}
 	
 	protected boolean doAttack( Char enemy ) {
 		
-		if (Dungeon.level.adjacent( pos, enemy.pos ) || rangedCooldown > 0) {
+		if (Dungeon.level.adjacent( pos, enemy.pos )
+				|| rangedCooldown > 0
+				|| new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT ).collisionPos != enemy.pos) {
 			
 			return super.doAttack( enemy );
 			
@@ -167,11 +169,12 @@ public abstract class Elemental extends Mob {
 	}
 	
 	@Override
-	public void add( Buff buff ) {
+	public boolean add( Buff buff ) {
 		if (harmfulBuffs.contains( buff.getClass() )) {
 			damage( Random.NormalIntRange( HT/2, HT * 3/5 ), buff );
+			return false;
 		} else {
-			super.add( buff );
+			return super.add( buff );
 		}
 	}
 	
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
index c0a8d97..b1c303b 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Eye.java
@@ -93,15 +93,18 @@ public class Eye extends Mob {
 		if (beamCooldown == 0) {
 			Ballistica aim = new Ballistica(pos, enemy.pos, Ballistica.STOP_SOLID);
 
-			if (enemy.invisible == 0 && !isCharmedBy(enemy) && fieldOfView[enemy.pos] && aim.subPath(1, aim.dist).contains(enemy.pos)){
+			if (enemy.invisible == 0 && !isCharmedBy(enemy) && fieldOfView[enemy.pos]
+					&& (super.canAttack(enemy) || aim.subPath(1, aim.dist).contains(enemy.pos))){
 				beam = aim;
 				beamTarget = aim.collisionPos;
 				return true;
-			} else
+			} else {
 				//if the beam is charged, it has to attack, will aim at previous location of target.
 				return beamCharged;
-		} else
+			}
+		} else {
 			return super.canAttack(enemy);
+		}
 	}
 
 	@Override
@@ -122,7 +125,8 @@ public class Eye extends Mob {
 	@Override
 	protected boolean doAttack( Char enemy ) {
 
-		if (beamCooldown > 0) {
+		beam = new Ballistica(pos, beamTarget, Ballistica.STOP_SOLID);
+		if (beamCooldown > 0 || (!beamCharged && !beam.subPath(1, beam.dist).contains(enemy.pos))) {
 			return super.doAttack(enemy);
 		} else if (!beamCharged){
 			((EyeSprite)sprite).charge( enemy.pos );
@@ -133,7 +137,6 @@ public class Eye extends Mob {
 
 			spend( attackDelay() );
 			
-			beam = new Ballistica(pos, beamTarget, Ballistica.STOP_SOLID);
 			if (Dungeon.level.heroFOV[pos] || Dungeon.level.heroFOV[beam.collisionPos] ) {
 				sprite.zap( beam.collisionPos );
 				return false;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
index ad8b46f..4785e8f 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Ghoul.java
@@ -238,8 +238,6 @@ public class Ghoul extends Mob {
 
 		@Override
 		public boolean act() {
-			ghoul.sprite.visible = Dungeon.level.heroFOV[ghoul.pos];
-
 			if (target.alignment != ghoul.alignment){
 				detach();
 				return true;
@@ -302,6 +300,12 @@ public class Ghoul extends Mob {
 			return true;
 		}
 
+		public void updateVisibility(){
+			if (ghoul != null && ghoul.sprite != null){
+				ghoul.sprite.visible = Dungeon.level.heroFOV[ghoul.pos];
+			}
+		}
+
 		public void set(int turns, Ghoul ghoul){
 			this.ghoul = ghoul;
 			turnsToRevive = turns;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollTrickster.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollTrickster.java
index f3697d4..a3f1f7f 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollTrickster.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/GnollTrickster.java
@@ -66,8 +66,8 @@ public class GnollTrickster extends Gnoll {
 
 	@Override
 	protected boolean canAttack( Char enemy ) {
-		Ballistica attack = new Ballistica( pos, enemy.pos, Ballistica.PROJECTILE);
-		return !Dungeon.level.adjacent(pos, enemy.pos) && attack.collisionPos == enemy.pos;
+		return !Dungeon.level.adjacent( pos, enemy.pos )
+				&& (super.canAttack(enemy) || new Ballistica( pos, enemy.pos, Ballistica.PROJECTILE).collisionPos == enemy.pos);
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
index 84234c7..03920a9 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mimic.java
@@ -91,13 +91,16 @@ public class Mimic extends Mob {
 	}
 
 	@Override
-	public void add(Buff buff) {
-		super.add(buff);
-		if (buff.type == Buff.buffType.NEGATIVE && alignment == Alignment.NEUTRAL){
-			alignment = Alignment.ENEMY;
-			stopHiding();
-			if (sprite != null) sprite.idle();
+	public boolean add(Buff buff) {
+		if (super.add(buff)) {
+			if (buff.type == Buff.buffType.NEGATIVE && alignment == Alignment.NEUTRAL) {
+				alignment = Alignment.ENEMY;
+				stopHiding();
+				if (sprite != null) sprite.idle();
+			}
+			return true;
 		}
+		return false;
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
index 09275c7..d71f750 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Mob.java
@@ -395,30 +395,36 @@ public abstract class Mob extends Char {
 	}
 	
 	@Override
-	public void add( Buff buff ) {
-		super.add( buff );
-		if (buff instanceof Amok || buff instanceof AllyBuff) {
-			state = HUNTING;
-		} else if (buff instanceof Terror || buff instanceof Dread) {
-			state = FLEEING;
-		} else if (buff instanceof Sleep) {
-			state = SLEEPING;
-			postpone( Sleep.SWS );
+	public boolean add( Buff buff ) {
+		if (super.add( buff )) {
+			if (buff instanceof Amok || buff instanceof AllyBuff) {
+				state = HUNTING;
+			} else if (buff instanceof Terror || buff instanceof Dread) {
+				state = FLEEING;
+			} else if (buff instanceof Sleep) {
+				state = SLEEPING;
+				postpone(Sleep.SWS);
+			}
+			return true;
 		}
+		return false;
 	}
 	
 	@Override
-	public void remove( Buff buff ) {
-		super.remove( buff );
-		if ((buff instanceof Terror && buff(Dread.class) == null)
-				|| (buff instanceof Dread && buff(Terror.class) == null)) {
-			if (enemySeen) {
-				sprite.showStatus(CharSprite.NEGATIVE, Messages.get(this, "rage"));
-				state = HUNTING;
-			} else {
-				state = WANDERING;
+	public boolean remove( Buff buff ) {
+		if (super.remove( buff )) {
+			if ((buff instanceof Terror && buff(Dread.class) == null)
+					|| (buff instanceof Dread && buff(Terror.class) == null)) {
+				if (enemySeen) {
+					sprite.showStatus(CharSprite.NEGATIVE, Messages.get(this, "rage"));
+					state = HUNTING;
+				} else {
+					state = WANDERING;
+				}
 			}
+			return true;
 		}
+		return false;
 	}
 	
 	protected boolean canAttack( Char enemy ) {
@@ -698,7 +704,7 @@ public abstract class Mob extends Char {
 
 	public boolean surprisedBy( Char enemy, boolean attacking ){
 		return enemy == Dungeon.hero
-				&& (enemy.invisible > 0 || !enemySeen || (fieldOfView != null && !fieldOfView[enemy.pos]))
+				&& (enemy.invisible > 0 || !enemySeen || (fieldOfView != null && fieldOfView.length == Dungeon.level.length() && !fieldOfView[enemy.pos]))
 				&& (!attacking || enemy.canSurpriseAttack());
 	}
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Pylon.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Pylon.java
index 3a68cb0..f92b1c5 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Pylon.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Pylon.java
@@ -169,11 +169,12 @@ public class Pylon extends Mob {
 	}
 
 	@Override
-	public void add(Buff buff) {
+	public boolean add(Buff buff) {
 		//immune to all buffs/debuffs when inactive
 		if (alignment != Alignment.NEUTRAL) {
-			super.add(buff);
+			return super.add(buff);
 		}
+		return false;
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Scorpio.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Scorpio.java
index f15e559..d7f5505 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Scorpio.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Scorpio.java
@@ -71,8 +71,8 @@ public class Scorpio extends Mob {
 	
 	@Override
 	protected boolean canAttack( Char enemy ) {
-		Ballistica attack = new Ballistica( pos, enemy.pos, Ballistica.PROJECTILE);
-		return !Dungeon.level.adjacent( pos, enemy.pos ) && attack.collisionPos == enemy.pos;
+		return !Dungeon.level.adjacent( pos, enemy.pos )
+				&& (super.canAttack(enemy) || new Ballistica( pos, enemy.pos, Ballistica.PROJECTILE).collisionPos == enemy.pos);
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Shaman.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Shaman.java
index d63dbb6..0bcb327 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Shaman.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Shaman.java
@@ -68,10 +68,11 @@ public abstract class Shaman extends Mob {
 	public int drRoll() {
 		return super.drRoll() + Random.NormalIntRange(0, 6);
 	}
-	
+
 	@Override
 	protected boolean canAttack( Char enemy ) {
-		return new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos == enemy.pos;
+		return super.canAttack(enemy)
+				|| new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos == enemy.pos;
 	}
 
 	@Override
@@ -88,8 +89,9 @@ public abstract class Shaman extends Mob {
 	}
 
 	protected boolean doAttack(Char enemy ) {
-		
-		if (Dungeon.level.adjacent( pos, enemy.pos )) {
+
+		if (Dungeon.level.adjacent( pos, enemy.pos )
+				|| new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos != enemy.pos) {
 			
 			return super.doAttack( enemy );
 			
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
index f89662b..f76bab8 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Statue.java
@@ -112,11 +112,14 @@ public class Statue extends Mob {
 	}
 	
 	@Override
-	public void add(Buff buff) {
-		super.add(buff);
-		if (state == PASSIVE && buff.type == Buff.buffType.NEGATIVE){
-			state = HUNTING;
+	public boolean add(Buff buff) {
+		if (super.add(buff)) {
+			if (state == PASSIVE && buff.type == Buff.buffType.NEGATIVE) {
+				state = HUNTING;
+			}
+			return true;
 		}
+		return false;
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
index ebdd6e0..f1d375b 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Tengu.java
@@ -121,10 +121,11 @@ public class Tengu extends Mob {
 
 	//Tengu is immune to debuffs and damage when removed from the level
 	@Override
-	public void add(Buff buff) {
+	public boolean add(Buff buff) {
 		if (Actor.chars().contains(this) || buff instanceof Doom || loading){
-			super.add(buff);
+			return super.add(buff);
 		}
+		return false;
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
index b4dd15e..a13b89b 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/Warlock.java
@@ -77,12 +77,14 @@ public class Warlock extends Mob implements Callback {
 	
 	@Override
 	protected boolean canAttack( Char enemy ) {
-		return new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos == enemy.pos;
+		return super.canAttack(enemy)
+				|| new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos == enemy.pos;
 	}
 	
 	protected boolean doAttack( Char enemy ) {
 
-		if (Dungeon.level.adjacent( pos, enemy.pos )) {
+		if (Dungeon.level.adjacent( pos, enemy.pos )
+				|| new Ballistica( pos, enemy.pos, Ballistica.MAGIC_BOLT).collisionPos != enemy.pos) {
 			
 			return super.doAttack( enemy );
 			
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
index 27c09f7..6b3d66c 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Blacksmith.java
@@ -264,10 +264,12 @@ public class Blacksmith extends NPC {
 	
 	@Override
 	public void damage( int dmg, Object src ) {
+		//do nothing
 	}
-	
+
 	@Override
-	public void add( Buff buff ) {
+	public boolean add( Buff buff ) {
+		return false;
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
index fb2dd64..a5495be 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Ghost.java
@@ -95,13 +95,15 @@ public class Ghost extends NPC {
 	protected Char chooseEnemy() {
 		return null;
 	}
-	
+
 	@Override
 	public void damage( int dmg, Object src ) {
+		//do nothing
 	}
-	
+
 	@Override
-	public void add( Buff buff ) {
+	public boolean add( Buff buff ) {
+		return false;
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
index b36152b..c58bacd 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Imp.java
@@ -78,13 +78,15 @@ public class Imp extends NPC {
 	public int defenseSkill( Char enemy ) {
 		return INFINITE_EVASION;
 	}
-	
+
 	@Override
 	public void damage( int dmg, Object src ) {
+		//do nothing
 	}
-	
+
 	@Override
-	public void add( Buff buff ) {
+	public boolean add( Buff buff ) {
+		return false;
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/RatKing.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/RatKing.java
index 6a0555c..b6c17c9 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/RatKing.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/RatKing.java
@@ -57,13 +57,15 @@ public class RatKing extends NPC {
 	protected Char chooseEnemy() {
 		return null;
 	}
-	
+
 	@Override
 	public void damage( int dmg, Object src ) {
+		//do nothing
 	}
-	
+
 	@Override
-	public void add( Buff buff ) {
+	public boolean add( Buff buff ) {
+		return false;
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Sheep.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Sheep.java
index 1ee5ce8..5c2d540 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Sheep.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Sheep.java
@@ -63,13 +63,15 @@ public class Sheep extends NPC {
 	public int defenseSkill(Char enemy) {
 		return INFINITE_EVASION;
 	}
-	
+
 	@Override
 	public void damage( int dmg, Object src ) {
+		//do nothing
 	}
 
 	@Override
-	public void add( Buff buff ) {
+	public boolean add( Buff buff ) {
+		return false;
 	}
 
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
index d287c1a..0b5e2fd 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Shopkeeper.java
@@ -72,8 +72,12 @@ public class Shopkeeper extends NPC {
 	}
 	
 	@Override
-	public void add( Buff buff ) {
-		flee();
+	public boolean add( Buff buff ) {
+		if (super.add(buff)) {
+			flee();
+			return true;
+		}
+		return false;
 	}
 	
 	public void flee() {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
index cd8076d..f379982 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/actors/mobs/npcs/Wandmaker.java
@@ -76,13 +76,15 @@ public class Wandmaker extends NPC {
 	public int defenseSkill( Char enemy ) {
 		return INFINITE_EVASION;
 	}
-	
+
 	@Override
 	public void damage( int dmg, Object src ) {
+		//do nothing
 	}
-	
+
 	@Override
-	public void add( Buff buff ) {
+	public boolean add( Buff buff ) {
+		return false;
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/EquipableItem.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/EquipableItem.java
index 751b38e..2301a89 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/EquipableItem.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/EquipableItem.java
@@ -66,6 +66,8 @@ public abstract class EquipableItem extends Item {
 		}
 	}
 
+	protected static int slotOfUnequipped = -1;
+
 	@Override
 	public void execute( Hero hero, String action ) {
 
@@ -75,10 +77,16 @@ public abstract class EquipableItem extends Item {
 			//In addition to equipping itself, item reassigns itself to the quickslot
 			//This is a special case as the item is being removed from inventory, but is staying with the hero.
 			int slot = Dungeon.quickslot.getSlot( this );
+			slotOfUnequipped = -1;
 			doEquip(hero);
 			if (slot != -1) {
 				Dungeon.quickslot.setSlot( slot, this );
 				updateQuickslot();
+			//if this item wasn't quickslotted, but the item it is replacing as equipped was
+			//then also have the item occupy the unequipped item's quickslot
+			} else if (slotOfUnequipped != -1 && defaultAction() != null) {
+				Dungeon.quickslot.setSlot( slotOfUnequipped, this );
+				updateQuickslot();
 			}
 		} else if (action.equals( AC_UNEQUIP )) {
 			doUnequip( hero, true );
@@ -130,6 +138,8 @@ public abstract class EquipableItem extends Item {
 			hero.spend( time2equip( hero ) );
 		}
 
+		slotOfUnequipped = Dungeon.quickslot.getSlot(this);
+
 		//temporarily keep this item so it can be collected
 		boolean wasKept = keptThoughLostInvent;
 		keptThoughLostInvent = true;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
index 7a75788..64f3bad 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Item.java
@@ -172,7 +172,10 @@ public class Item implements Bundlable {
 	}
 	
 	public void execute( Hero hero ) {
-		execute( hero, defaultAction() );
+		String action = defaultAction();
+		if (action != null) {
+			execute(hero, defaultAction());
+		}
 	}
 	
 	protected void onThrow( int cell ) {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
index ecf3943..b9a173f 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindOfWeapon.java
@@ -66,20 +66,24 @@ abstract public class KindOfWeapon extends EquipableItem {
 				@Override
 				protected void onSelect(int index) {
 					super.onSelect(index);
-					if (index == 0){
+					if (index == 0 || index == 1){
+						//In addition to equipping itself, item reassigns itself to the quickslot
+						//This is a special case as the item is being removed from inventory, but is staying with the hero.
 						int slot = Dungeon.quickslot.getSlot( KindOfWeapon.this );
-						doEquip(hero);
-						if (slot != -1) {
-							Dungeon.quickslot.setSlot( slot, KindOfWeapon.this );
-							updateQuickslot();
+						slotOfUnequipped = -1;
+						if (index == 0) {
+							doEquip(hero);
+						} else {
+							equipSecondary(hero);
 						}
-					}
-					if (index == 1){
-						int slot = Dungeon.quickslot.getSlot( KindOfWeapon.this );
-						equipSecondary(hero);
 						if (slot != -1) {
 							Dungeon.quickslot.setSlot( slot, KindOfWeapon.this );
 							updateQuickslot();
+						//if this item wasn't quickslotted, but the item it is replacing as equipped was
+						//then also have the item occupy the unequipped item's quickslot
+						} else if (slotOfUnequipped != -1 && defaultAction() != null) {
+							Dungeon.quickslot.setSlot( slotOfUnequipped, KindOfWeapon.this );
+							updateQuickslot();
 						}
 					}
 				}
@@ -105,7 +109,7 @@ abstract public class KindOfWeapon extends EquipableItem {
 			activate( hero );
 			Talent.onItemEquipped(hero, this);
 			Badges.validateDuelistUnlock();
-			ActionIndicator.updateIcon();
+			ActionIndicator.refresh();
 			updateQuickslot();
 
 			cursedKnown = true;
@@ -117,7 +121,7 @@ abstract public class KindOfWeapon extends EquipableItem {
 			if (hero.hasTalent(Talent.SWIFT_EQUIP)) {
 				if (hero.buff(Talent.SwiftEquipCooldown.class) == null){
 					hero.spendAndNext(-hero.cooldown());
-					Buff.affect(hero, Talent.SwiftEquipCooldown.class, 29f)
+					Buff.affect(hero, Talent.SwiftEquipCooldown.class, 19f)
 							.secondUse = hero.pointsInTalent(Talent.SWIFT_EQUIP) == 2;
 					GLog.i(Messages.get(this, "swift_equip"));
 				} else if (hero.buff(Talent.SwiftEquipCooldown.class).hasSecondUse()) {
@@ -148,7 +152,7 @@ abstract public class KindOfWeapon extends EquipableItem {
 			activate( hero );
 			Talent.onItemEquipped(hero, this);
 			Badges.validateDuelistUnlock();
-			ActionIndicator.updateIcon();
+			ActionIndicator.refresh();
 			updateQuickslot();
 
 			cursedKnown = true;
@@ -160,7 +164,7 @@ abstract public class KindOfWeapon extends EquipableItem {
 			if (hero.hasTalent(Talent.SWIFT_EQUIP)) {
 				if (hero.buff(Talent.SwiftEquipCooldown.class) == null){
 					hero.spendAndNext(-hero.cooldown());
-					Buff.affect(hero, Talent.SwiftEquipCooldown.class, 29f)
+					Buff.affect(hero, Talent.SwiftEquipCooldown.class, 19f)
 							.secondUse = hero.pointsInTalent(Talent.SWIFT_EQUIP) == 2;
 					GLog.i(Messages.get(this, "swift_equip"));
 				} else if (hero.buff(Talent.SwiftEquipCooldown.class).hasSecondUse()) {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindofMisc.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindofMisc.java
index fcf1879..53ce712 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindofMisc.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/KindofMisc.java
@@ -100,6 +100,7 @@ public abstract class KindofMisc extends EquipableItem {
 							// to unequip the equipped one, but don't want to trigger any other
 							// item detaching logic
 							int slot = Dungeon.quickslot.getSlot(KindofMisc.this);
+							slotOfUnequipped = -1;
 							Dungeon.hero.belongings.backpack.items.remove(KindofMisc.this);
 							if (equipped.doUnequip(hero, true, false)) {
 								//swap out equip in misc slot if needed
@@ -115,7 +116,11 @@ public abstract class KindofMisc extends EquipableItem {
 							} else {
 								Dungeon.hero.belongings.backpack.items.add(KindofMisc.this);
 							}
-							if (slot != -1) Dungeon.quickslot.setSlot(slot, KindofMisc.this);
+							if (slot != -1) {
+								Dungeon.quickslot.setSlot(slot, KindofMisc.this);
+							} else if (slotOfUnequipped != -1 && defaultAction() != null){
+								Dungeon.quickslot.setSlot(slotOfUnequipped, KindofMisc.this);
+							}
 							updateQuickslot();
 						}
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LiquidMetal.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LiquidMetal.java
index 0dfb8b6..1b327df 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LiquidMetal.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/LiquidMetal.java
@@ -108,7 +108,7 @@ public class LiquidMetal extends Item {
 
 	@Override
 	public int value() {
-		return Math.max(1, quantity/2);
+		return quantity;
 	}
 
 	private final WndBag.ItemSelector itemSelector = new WndBag.ItemSelector() {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Recipe.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Recipe.java
index 12e20b6..dcbfe86 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Recipe.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/Recipe.java
@@ -22,7 +22,6 @@
 package com.shatteredpixel.shatteredpixeldungeon.items;
 
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
-import com.shatteredpixel.shatteredpixeldungeon.items.artifacts.AlchemistsToolkit;
 import com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.Blandfruit;
 import com.shatteredpixel.shatteredpixeldungeon.items.food.MeatPie;
@@ -50,7 +49,6 @@ import com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.CurseInfusion;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.FeatherFall;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalInfusion;
-import com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalPorter;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.PhaseShift;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle;
@@ -201,7 +199,6 @@ public abstract class Recipe {
 		new CurseInfusion.Recipe(),
 		new FeatherFall.Recipe(),
 		new MagicalInfusion.Recipe(),
-		new MagicalPorter.Recipe(),
 		new PhaseShift.Recipe(),
 		new ReclaimTrap.Recipe(),
 		new Recycle.Recipe(),
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java
index 4b6f8cc..6f45304 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/armor/glyphs/AntiMagic.java
@@ -39,6 +39,7 @@ import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.YogFist;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.Armor;
 import com.shatteredpixel.shatteredpixeldungeon.items.bombs.Bomb;
 import com.shatteredpixel.shatteredpixeldungeon.items.rings.RingOfArcana;
+import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfRetribution;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.ScrollOfTeleportation;
 import com.shatteredpixel.shatteredpixeldungeon.items.scrolls.exotic.ScrollOfPsionicBlast;
 import com.shatteredpixel.shatteredpixeldungeon.items.wands.CursedWand;
@@ -80,6 +81,7 @@ public class AntiMagic extends Armor.Glyph {
 		RESISTS.add( GrimTrap.class );
 
 		RESISTS.add( Bomb.MagicalBomb.class );
+		RESISTS.add( ScrollOfRetribution.class );
 		RESISTS.add( ScrollOfPsionicBlast.class );
 		RESISTS.add( ScrollOfTeleportation.class );
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
index b04a542..1f82c18 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/MasterThievesArmband.java
@@ -252,15 +252,6 @@ public class MasterThievesArmband extends Artifact {
 		return desc;
 	}
 
-	@Override
-	public void restoreFromBundle(Bundle bundle) {
-		super.restoreFromBundle(bundle);
-		//conversion for old armband on pre-1.2.0 saves
-		if (exp > Math.round(10 + level()*3.33f)){
-			exp = 0;
-		}
-	}
-
 	public class Thievery extends ArtifactBuff {
 
 		@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
index fd16f72..885fe52 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/artifacts/UnstableSpellbook.java
@@ -282,7 +282,9 @@ public class UnstableSpellbook extends Artifact {
 	public void restoreFromBundle( Bundle bundle ) {
 		super.restoreFromBundle(bundle);
 		scrolls.clear();
-		Collections.addAll(scrolls, bundle.getClassArray(SCROLLS));
+		if (bundle.contains(SCROLLS)) {
+			Collections.addAll(scrolls, bundle.getClassArray(SCROLLS));
+		}
 	}
 
 	public class bookRecharge extends ArtifactBuff{
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Noisemaker.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Noisemaker.java
index d35bf15..a2d5d48 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Noisemaker.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/bombs/Noisemaker.java
@@ -25,11 +25,13 @@ import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
+import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.effects.CellEmitter;
 import com.shatteredpixel.shatteredpixeldungeon.effects.Speck;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
+import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
@@ -43,6 +45,7 @@ public class Noisemaker extends Bomb {
 	public void setTrigger(int cell){
 
 		Buff.affect(Dungeon.hero, Trigger.class).set(cell);
+		fuse = null;
 
 		CellEmitter.center( cell ).start( Speck.factory( Speck.SCREAM ), 0.3f, 3 );
 		Sample.INSTANCE.play( Assets.Sounds.ALERT );
@@ -52,7 +55,30 @@ public class Noisemaker extends Bomb {
 		}
 
 	}
-	
+
+	@Override
+	public ItemSprite.Glowing glowing() {
+		if (fuse == null){
+			for (Trigger trigger : Dungeon.hero.buffs(Trigger.class)){
+				Heap heap = Dungeon.level.heaps.get(trigger.cell);
+				if (heap != null && heap.items.contains(this)) {
+					return new ItemSprite.Glowing( 0xFF0000, 0.6f);
+				}
+			}
+		}
+		return super.glowing();
+	}
+
+	@Override
+	public boolean doPickUp(Hero hero, int pos) {
+		if (fuse == null){
+			for (Trigger trigger : hero.buffs(Trigger.class)){
+				if (trigger.cell == pos) return false;
+			}
+		}
+		return super.doPickUp(hero, pos);
+	}
+
 	public static class Trigger extends Buff {
 
 		{
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfDragonsBreath.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfDragonsBreath.java
index 6ceb74b..ccdb833 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfDragonsBreath.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/potions/exotic/PotionOfDragonsBreath.java
@@ -23,6 +23,7 @@ package com.shatteredpixel.shatteredpixeldungeon.items.potions.exotic;
 
 import com.shatteredpixel.shatteredpixeldungeon.Assets;
 import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
+import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Actor;
 import com.shatteredpixel.shatteredpixeldungeon.actors.Char;
 import com.shatteredpixel.shatteredpixeldungeon.actors.blobs.Blob;
@@ -90,26 +91,31 @@ public class PotionOfDragonsBreath extends ExoticPotion {
 
 			if (cell == null && identifiedByUse){
 				showingWindow = true;
-				GameScene.show( new WndOptions(new ItemSprite(PotionOfDragonsBreath.this),
-						Messages.titleCase(name()),
-						Messages.get(ExoticPotion.class, "warning"),
-						Messages.get(ExoticPotion.class, "yes"),
-						Messages.get(ExoticPotion.class, "no") ) {
+				ShatteredPixelDungeon.runOnRenderThread(new Callback() {
 					@Override
-					protected void onSelect( int index ) {
-						showingWindow = false;
-						switch (index) {
-							case 0:
-								curUser.spendAndNext(1f);
-								identifiedByUse = false;
-								break;
-							case 1:
-								GameScene.selectCell( targeter );
-								break;
-						}
+					public void call() {
+						GameScene.show( new WndOptions(new ItemSprite(PotionOfDragonsBreath.this),
+								Messages.titleCase(name()),
+								Messages.get(ExoticPotion.class, "warning"),
+								Messages.get(ExoticPotion.class, "yes"),
+								Messages.get(ExoticPotion.class, "no") ) {
+							@Override
+							protected void onSelect( int index ) {
+								showingWindow = false;
+								switch (index) {
+									case 0:
+										curUser.spendAndNext(1f);
+										identifiedByUse = false;
+										break;
+									case 1:
+										GameScene.selectCell( targeter );
+										break;
+								}
+							}
+							public void onBackPressed() {}
+						} );
 					}
-					public void onBackPressed() {}
-				} );
+				});
 			} else if (cell == null && !anonymous){
 				curItem.collect( curUser.belongings.backpack );
 			} else if (cell != null) {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Alchemize.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Alchemize.java
index c761840..b04fff8 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Alchemize.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Alchemize.java
@@ -57,8 +57,8 @@ public class Alchemize extends Spell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * (40 / 8f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)(40 * (quantity/8f));
 	}
 
 	//TODO also allow alchemical catalyst? Or save that for an elixir/brew?
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/AquaBlast.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/AquaBlast.java
index 97e44e0..6c29921 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/AquaBlast.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/AquaBlast.java
@@ -49,8 +49,8 @@ public class AquaBlast extends TargetedSpell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((60 + 40) / 8f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)((60 + 40) * (quantity/8f));
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/BeaconOfReturning.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/BeaconOfReturning.java
index 6e6b784..c91dd88 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/BeaconOfReturning.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/BeaconOfReturning.java
@@ -200,8 +200,8 @@ public class BeaconOfReturning extends Spell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((50 + 40) / 5f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)((50 + 40) * (quantity/5f));
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/CurseInfusion.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/CurseInfusion.java
index 8228316..4b2da09 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/CurseInfusion.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/CurseInfusion.java
@@ -89,8 +89,8 @@ public class CurseInfusion extends InventorySpell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((30 + 50) / 3f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)((30 + 50) * (quantity/3f));
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/FeatherFall.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/FeatherFall.java
index 658fb44..0b072ea 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/FeatherFall.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/FeatherFall.java
@@ -80,8 +80,8 @@ public class FeatherFall extends Spell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((30 + 40) / 2f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)((30 + 40) * (quantity/2f));
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/MagicalInfusion.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/MagicalInfusion.java
index 856095c..0f33c53 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/MagicalInfusion.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/MagicalInfusion.java
@@ -77,8 +77,8 @@ public class MagicalInfusion extends InventorySpell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((50 + 40) / 1f));
+		//prices of ingredients
+		return (50 + 40) * quantity;
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/PhaseShift.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/PhaseShift.java
index f3c1f50..430079e 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/PhaseShift.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/PhaseShift.java
@@ -65,8 +65,8 @@ public class PhaseShift extends TargetedSpell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((30 + 40) / 8f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)((30 + 40) * (quantity/8f));
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/ReclaimTrap.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/ReclaimTrap.java
index 8a0a452..5a6382f 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/ReclaimTrap.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/ReclaimTrap.java
@@ -116,8 +116,8 @@ public class ReclaimTrap extends TargetedSpell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((40 + 50) / 4f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)((40 + 50) * (quantity/4f));
 	}
 	
 	private static final String STORED_TRAP = "stored_trap";
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Recycle.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Recycle.java
index 2c46a09..19d60f3 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Recycle.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/Recycle.java
@@ -93,8 +93,8 @@ public class Recycle extends InventorySpell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((50 + 40) / 12f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)((50 + 40) * (quantity/12f));
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/TelekineticGrab.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/TelekineticGrab.java
index 3831d9e..64c0554 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/TelekineticGrab.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/TelekineticGrab.java
@@ -116,8 +116,8 @@ public class TelekineticGrab extends TargetedSpell {
 
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity (rounded up slightly)
-		return Math.round(quantity * ((5 + 40) / 6f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)((10 + 40) * (quantity/6f));
 	}
 
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/WildEnergy.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/WildEnergy.java
index a517fed..6b56b87 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/WildEnergy.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/spells/WildEnergy.java
@@ -70,8 +70,8 @@ public class WildEnergy extends TargetedSpell {
 	
 	@Override
 	public int value() {
-		//prices of ingredients, divided by output quantity
-		return Math.round(quantity * ((50 + 50) / 5f));
+		//prices of ingredients, divided by output quantity, rounds down
+		return (int)((50 + 50) * (quantity/5f));
 	}
 	
 	public static class Recipe extends com.shatteredpixel.shatteredpixeldungeon.items.Recipe.SimpleRecipe {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
index bd1ec35..8b5dc2d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/CursedWand.java
@@ -382,22 +382,29 @@ public class CursedWand {
 						//Don't bother doing this joke to none-english speakers, I doubt it would translate.
 						return cursedEffect(origin, user, targetPos);
 					} else {
-						GameScene.show(
-								new WndOptions(Icons.get(Icons.WARNING),
-										"CURSED WAND ERROR",
-										"this application will now self-destruct",
-										"abort",
-										"retry",
-										"fail") {
-									
+						ShatteredPixelDungeon.runOnRenderThread(
+								new Callback() {
 									@Override
-									protected void onSelect(int index) {
-										Game.instance.finish();
-									}
-									
-									@Override
-									public void onBackPressed() {
-										//do nothing
+									public void call() {
+										GameScene.show(
+												new WndOptions(Icons.get(Icons.WARNING),
+														"CURSED WAND ERROR",
+														"this application will now self-destruct",
+														"abort",
+														"retry",
+														"fail") {
+
+													@Override
+													protected void onSelect(int index) {
+														Game.instance.finish();
+													}
+
+													@Override
+													public void onBackPressed() {
+														//do nothing
+													}
+												}
+										);
 									}
 								}
 						);
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
index 3f88234..bc0ac67 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/Wand.java
@@ -575,7 +575,7 @@ public abstract class Wand extends Item {
 					if (target == curUser.pos && curUser.hasTalent(Talent.SHIELD_BATTERY)){
 
 						if (curUser.buff(MagicImmune.class) != null){
-							GLog.w( Messages.get(this, "no_magic") );
+							GLog.w( Messages.get(Wand.class, "no_magic") );
 							return;
 						}
 
@@ -587,7 +587,7 @@ public abstract class Wand extends Item {
 						Sample.INSTANCE.play(Assets.Sounds.CHARGEUP);
 						ScrollOfRecharging.charge(curUser);
 						updateQuickslot();
-						curUser.spend(Actor.TICK);
+						curUser.spendAndNext(Actor.TICK);
 						return;
 					}
 					GLog.i( Messages.get(Wand.class, "self_target") );
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
index 49057da..d7ee6e1 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfBlastWave.java
@@ -160,9 +160,9 @@ public class WandOfBlastWave extends DamageWand {
 				}
 				int oldPos = ch.pos;
 				ch.pos = newPos;
-				if (finalCollided && ch.isAlive()) {
+				if (finalCollided && ch.isActive()) {
 					ch.damage(Random.NormalIntRange(finalDist, 2*finalDist), this);
-					if (ch.isAlive()) {
+					if (ch.isActive()) {
 						Paralysis.prolong(ch, Paralysis.class, 1 + finalDist/2f);
 					} else if (ch == Dungeon.hero){
 						if (cause == WandOfBlastWave.class || cause == AquaBlast.class){
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
index eb55c6c..cebfc5a 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/wands/WandOfRegrowth.java
@@ -446,10 +446,12 @@ public class WandOfRegrowth extends Wand {
 
 		@Override
 		public void damage( int dmg, Object src ) {
+			//do nothing
 		}
 
 		@Override
-		public void add( Buff buff ) {
+		public boolean add( Buff buff ) {
+			return false;
 		}
 
 		@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
index db5f141..d29b8c1 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/SpiritBow.java
@@ -338,7 +338,7 @@ public class SpiritBow extends Weapon {
 		
 		@Override
 		public int STRReq(int lvl) {
-			return SpiritBow.this.STRReq(lvl);
+			return SpiritBow.this.STRReq();
 		}
 
 		@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
index 445fa3f..054217c 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/Weapon.java
@@ -289,9 +289,7 @@ abstract public class Weapon extends KindOfWeapon {
 		
 		cursed = false;
 
-		Item result = super.upgrade();
-		Badges.validateDuelistUnlock();
-		return result;
+		return super.upgrade();
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/BattleAxe.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/BattleAxe.java
index 926db07..6f7854c 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/BattleAxe.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/BattleAxe.java
@@ -50,7 +50,7 @@ public class BattleAxe extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Mace.heavyBlowAbility(hero, target, 1.40f, this);
+		Mace.heavyBlowAbility(hero, target, 1.55f, this);
 	}
 
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
index 48759fb..34cb37d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dagger.java
@@ -86,7 +86,7 @@ public class Dagger extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		sneakAbility(hero, 6, this);
+		sneakAbility(hero, 8, this);
 	}
 
 	public static void sneakAbility(Hero hero, int invisTurns, MeleeWeapon wep){
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dirk.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dirk.java
index cefa307..eed42df 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dirk.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Dirk.java
@@ -73,7 +73,7 @@ public class Dirk extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Dagger.sneakAbility(hero, 5, this);
+		Dagger.sneakAbility(hero, 6, this);
 	}
 
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Flail.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Flail.java
index 6a031d2..f4c2f72 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Flail.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Flail.java
@@ -59,7 +59,7 @@ public class Flail extends MeleeWeapon {
 	@Override
 	public int damageRoll(Char owner) {
 		int dmg = Math.round(super.damageRoll(owner) * spinBonus);
-		if (spinBonus == 1.6f) Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
+		if (spinBonus == 2f) Sample.INSTANCE.play(Assets.Sounds.HIT_STRONG);
 		spinBonus = 1f;
 		return dmg;
 	}
@@ -82,8 +82,8 @@ public class Flail extends MeleeWeapon {
 			});
 			//we detach and calculate bonus here in case the attack misses
 			spin.detach();
-			spinBonus = 1f + 0.2f*spin.spins;
-			if (spinBonus == 1.6f){
+			spinBonus = 1f + (spin.spins/3f);
+			if (spinBonus == 2f){
 				return Float.POSITIVE_INFINITY;
 			} else {
 				return super.accuracyFactor(owner, target);
@@ -105,23 +105,24 @@ public class Flail extends MeleeWeapon {
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
 
-		beforeAbilityUsed(hero);
 		SpinAbilityTracker spin = hero.buff(SpinAbilityTracker.class);
+		if (spin != null && spin.spins >= 3){
+			GLog.w(Messages.get(this, "spin_warn"));
+			return;
+		}
 
+		beforeAbilityUsed(hero);
 		if (spin == null){
 			spin = Buff.affect(hero, SpinAbilityTracker.class, 3f);
 		}
 
-		if (spin.spins < 3){
-			spin.spins++;
-			Buff.prolong(hero, SpinAbilityTracker.class, 3f);
-			Sample.INSTANCE.play(Assets.Sounds.CHAINS, 1, 1, 0.9f + 0.1f*spin.spins);
-			hero.sprite.operate(hero.pos);
-			hero.spendAndNext(Actor.TICK);
-			BuffIndicator.refreshHero();
-		} else {
-			GLog.w(Messages.get(this, "spin_warn"));
-		}
+		spin.spins++;
+		Buff.prolong(hero, SpinAbilityTracker.class, 3f);
+		Sample.INSTANCE.play(Assets.Sounds.CHAINS, 1, 1, 0.9f + 0.1f*spin.spins);
+		hero.sprite.operate(hero.pos);
+		hero.spendAndNext(Actor.TICK);
+		BuffIndicator.refreshHero();
+
 		afterAbilityUsed(hero);
 	}
 
@@ -160,7 +161,7 @@ public class Flail extends MeleeWeapon {
 
 		@Override
 		public String desc() {
-			return Messages.get(this, "desc", 20*spins, dispTurns());
+			return Messages.get(this, "desc", (int)Math.round((spins/3f)*100f), dispTurns());
 		}
 
 		public static String SPINS = "spins";
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gauntlet.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gauntlet.java
index 0188f49..2f69976 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gauntlet.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gauntlet.java
@@ -50,7 +50,7 @@ public class Gauntlet extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Sai.comboStrikeAbility(hero, target, 0.20f, this);
+		Sai.comboStrikeAbility(hero, target, 0.30f, this);
 	}
 
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Glaive.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Glaive.java
index eae74bc..292e177 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Glaive.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Glaive.java
@@ -51,7 +51,7 @@ public class Glaive extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Spear.spikeAbility(hero, target, 1.10f, this);
+		Spear.spikeAbility(hero, target, 1.30f, this);
 	}
 
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gloves.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gloves.java
index db86090..3262b1e 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gloves.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Gloves.java
@@ -52,7 +52,7 @@ public class Gloves extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Sai.comboStrikeAbility(hero, target, 0.30f, this);
+		Sai.comboStrikeAbility(hero, target, 0.40f, this);
 	}
 
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/HandAxe.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/HandAxe.java
index 89d0c34..edb74d1 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/HandAxe.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/HandAxe.java
@@ -58,7 +58,7 @@ public class HandAxe extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Mace.heavyBlowAbility(hero, target, 1.50f, this);
+		Mace.heavyBlowAbility(hero, target, 1.65f, this);
 	}
 
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
index 606aece..8c4e906 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Mace.java
@@ -61,7 +61,7 @@ public class Mace extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Mace.heavyBlowAbility(hero, target, 1.45f, this);
+		Mace.heavyBlowAbility(hero, target, 1.60f, this);
 	}
 
 	public static void heavyBlowAbility(Hero hero, Integer target, float dmgMulti, MeleeWeapon wep){
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
index 51bfb49..834f01b 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/MeleeWeapon.java
@@ -29,26 +29,27 @@ import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Barrier;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Buff;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Haste;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LockedFloor;
-import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.LostInventory;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.MonkEnergy;
 import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.Recharging;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroClass;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.HeroSubClass;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
-import com.shatteredpixel.shatteredpixeldungeon.effects.Transmuting;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
 import com.shatteredpixel.shatteredpixeldungeon.items.KindOfWeapon;
 import com.shatteredpixel.shatteredpixeldungeon.items.weapon.Weapon;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.CellSelector;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.GameScene;
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSprite;
 import com.shatteredpixel.shatteredpixeldungeon.sprites.ItemSpriteSheet;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ActionIndicator;
+import com.shatteredpixel.shatteredpixeldungeon.ui.AttackIndicator;
 import com.shatteredpixel.shatteredpixeldungeon.ui.HeroIcon;
 import com.shatteredpixel.shatteredpixeldungeon.utils.GLog;
 import com.watabou.noosa.Image;
+import com.watabou.noosa.Visual;
 import com.watabou.noosa.audio.Sample;
 import com.watabou.utils.Bundle;
 import com.watabou.utils.Random;
@@ -152,7 +153,7 @@ public class MeleeWeapon extends Weapon {
 	@Override
 	public boolean doEquip(Hero hero) {
 		if (super.doEquip(hero)){
-			ActionIndicator.updateIcon();
+			ActionIndicator.refresh();
 			return true;
 		}
 		return false;
@@ -161,7 +162,7 @@ public class MeleeWeapon extends Weapon {
 	@Override
 	public boolean equipSecondary(Hero hero) {
 		if (super.equipSecondary(hero)){
-			ActionIndicator.updateIcon();
+			ActionIndicator.refresh();
 			return true;
 		}
 		return false;
@@ -170,7 +171,7 @@ public class MeleeWeapon extends Weapon {
 	@Override
 	public boolean doUnequip(Hero hero, boolean collect, boolean single) {
 		if (super.doUnequip(hero, collect, single)){
-			ActionIndicator.updateIcon();
+			ActionIndicator.refresh();
 			return true;
 		}
 		return false;
@@ -437,7 +438,7 @@ public class MeleeWeapon extends Weapon {
 			LockedFloor lock = target.buff(LockedFloor.class);
 			if (charges < chargeCap()){
 				if (lock == null || lock.regenOn()){
-					partialCharge += 1/(45f-1.5f*(chargeCap()-charges)); // 45 to 30 turns per charge
+					partialCharge += 1/(40f-(chargeCap()-charges)); // 40 to 30 turns per charge
 				}
 
 				int points = ((Hero)target).pointsInTalent(Talent.WEAPON_RECHARGING);
@@ -458,9 +459,9 @@ public class MeleeWeapon extends Weapon {
 			if (Dungeon.hero.subClass == HeroSubClass.CHAMPION
 					&& secondCharges < secondChargeCap()) {
 				if (lock == null || lock.regenOn()) {
-					// 90 to 60 turns per charge without talent
-					// up to 60 to 40 turns per charge at max talent level
-					secondPartialCharge += secondChargeMultiplier() / (45f-2.5f*(secondChargeCap()-secondCharges));
+					// 80 to 60 turns per charge without talent
+					// up to 53.333 to 40 turns per charge at max talent level
+					secondPartialCharge += secondChargeMultiplier() / (40f-(secondChargeCap()-secondCharges));
 				}
 
 				if (secondPartialCharge >= 1) {
@@ -549,12 +550,38 @@ public class MeleeWeapon extends Weapon {
 		}
 
 		@Override
-		public Image actionIcon() {
+		public int actionIcon() {
+			return HeroIcon.WEAPON_SWAP;
+		}
+
+		@Override
+		public Visual primaryVisual() {
+			Image ico;
 			if (Dungeon.hero.belongings.weapon == null){
-				return new ItemSprite(ItemSpriteSheet.WEAPON_HOLDER);
+				ico = new HeroIcon(this);
  			} else {
-				return new ItemSprite(Dungeon.hero.belongings.weapon);
+				ico = new ItemSprite(Dungeon.hero.belongings.weapon);
 			}
+			ico.width += 4; //shift slightly to the left to separate from smaller icon
+			return ico;
+		}
+
+		@Override
+		public Visual secondaryVisual() {
+			Image ico;
+			if (Dungeon.hero.belongings.secondWep == null){
+				ico = new HeroIcon(this);
+			} else {
+				ico = new ItemSprite(Dungeon.hero.belongings.secondWep);
+			}
+			ico.scale.set(PixelScene.align(0.51f));
+			ico.brightness(0.6f);
+			return ico;
+		}
+
+		@Override
+		public int indicatorColor() {
+			return 0x5500BB;
 		}
 
 		@Override
@@ -577,6 +604,7 @@ public class MeleeWeapon extends Weapon {
 
 			ActionIndicator.setAction(this);
 			Item.updateQuickslot();
+			AttackIndicator.updateState();
 		}
 	}
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
index f40250f..8056999 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Rapier.java
@@ -114,7 +114,7 @@ public class Rapier extends MeleeWeapon {
 				hero.pos = dest;
 				Dungeon.level.occupyCell(hero);
 
-				if (enemy != null) {
+				if (enemy != null && hero.canAttack(enemy)) {
 					hero.sprite.attack(enemy.pos, new Callback() {
 						@Override
 						public void call() {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
index 5c00f0f..19003cf 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Sai.java
@@ -62,7 +62,7 @@ public class Sai extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Sai.comboStrikeAbility(hero, target, 0.25f, this);
+		Sai.comboStrikeAbility(hero, target, 0.35f, this);
 	}
 
 	public static void comboStrikeAbility(Hero hero, Integer target, float boostPerHit, MeleeWeapon wep){
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
index b188887..a995e2f 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/Spear.java
@@ -61,7 +61,7 @@ public class Spear extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Spear.spikeAbility(hero, target, 1.15f, this);
+		Spear.spikeAbility(hero, target, 1.40f, this);
 	}
 
 	public static void spikeAbility(Hero hero, Integer target, float dmgMulti, MeleeWeapon wep){
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/WarHammer.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/WarHammer.java
index a42125a..2d0d92d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/WarHammer.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/items/weapon/melee/WarHammer.java
@@ -50,7 +50,7 @@ public class WarHammer extends MeleeWeapon {
 
 	@Override
 	protected void duelistAbility(Hero hero, Integer target) {
-		Mace.heavyBlowAbility(hero, target, 1.35f, this);
+		Mace.heavyBlowAbility(hero, target, 1.50f, this);
 	}
 
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
index 4900b92..9932374 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/CavesBossLevel.java
@@ -811,7 +811,7 @@ public class CavesBossLevel extends Level {
 					if (off[cell] > 0){
 
 						Char ch = Actor.findChar(cell);
-						if (ch != null && !(ch instanceof DM300)) {
+						if (ch != null && !(ch instanceof DM300) && !ch.flying) {
 							Sample.INSTANCE.play( Assets.Sounds.LIGHTNING );
 							ch.damage( Random.NormalIntRange(6, 12), Electricity.class);
 							ch.sprite.flash();
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
index e341c30..c874e32 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/Level.java
@@ -325,8 +325,8 @@ public abstract class Level implements Bundlable {
 
 		version = bundle.getInt( VERSION );
 		
-		//saves from before v1.0.3 are not supported
-		if (version < ShatteredPixelDungeon.v1_0_3){
+		//saves from before v1.2.3 are not supported
+		if (version < ShatteredPixelDungeon.v1_2_3){
 			throw new RuntimeException("old save");
 		}
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java
index ba68f28..9e9fd87 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/SentryRoom.java
@@ -301,10 +301,12 @@ public class SentryRoom extends SpecialRoom {
 
 		@Override
 		public void damage( int dmg, Object src ) {
+			//do nothing
 		}
 
 		@Override
-		public void add( Buff buff ) {
+		public boolean add( Buff buff ) {
+			return false;
 		}
 
 		@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/ShopRoom.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/ShopRoom.java
index 6fbefd3..d4f300d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/ShopRoom.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/levels/rooms/special/ShopRoom.java
@@ -30,7 +30,6 @@ import com.shatteredpixel.shatteredpixeldungeon.items.Generator;
 import com.shatteredpixel.shatteredpixeldungeon.items.Heap;
 import com.shatteredpixel.shatteredpixeldungeon.items.Honeypot;
 import com.shatteredpixel.shatteredpixeldungeon.items.Item;
-import com.shatteredpixel.shatteredpixeldungeon.items.MerchantsBeacon;
 import com.shatteredpixel.shatteredpixeldungeon.items.Stylus;
 import com.shatteredpixel.shatteredpixeldungeon.items.Torch;
 import com.shatteredpixel.shatteredpixeldungeon.items.armor.LeatherArmor;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java
index 09d0eea..53cea8f 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/messages/Languages.java
@@ -25,23 +25,23 @@ import java.util.Locale;
 
 public enum Languages {
 	ENGLISH("english",      "",   Status._COMPLETE_, null, null),
-	CHINESE("中文",          "zh", Status.UNREVIEWED, new String[]{"Jinkeloid(zdx00793)", "endlesssolitude"}, new String[]{"931451545", "Budding", "Chronie_Lynn_Iwa", "Fatir", "Fishbone", "Hcat", "HoofBumpBlurryface", "Lery", "Lyn_0401", "Ooooscar", "ShatteredFlameBlast", "SpaceAnchor", "hmdzl001", "leo", "tempest102", "户方狸奴"}),
+	CHINESE("中文",          "zh", Status.UNREVIEWED, new String[]{"Jinkeloid(zdx00793)", "endlesssolitude"}, new String[]{"931451545", "Budding", "Chronie_Lynn_Iwa", "Fatir", "Fishbone", "Hcat", "HoofBumpBlurryface", "Horr_lski", "Lery", "Lyn_0401", "Ooooscar", "ShatteredFlameBlast", "SpaceAnchor", "Teller", "hmdzl001", "leo", "tempest102", "户方狸奴"}),
 	KOREAN("한국어",         "ko", Status._COMPLETE_, new String[]{"Cocoa", "Flameblast12", "GameConqueror", "Korean2017"}, new String[]{"AFS", "N8fall", "WondarRabb1t", "chlrhwnstkd", "ddojin0115", "eeeei", "enjuxx", "hancyel", "linterpreteur", "lsiebnie", "sora0430"}),
-	RUSSIAN("русский",      "ru", Status._COMPLETE_, new String[]{"ConsideredHamster", "Inevielle", "apxwn", "yarikonline" }, new String[]{"AttHawk46", "BlueberryShortcake", "Dominowood371", "Enwviun", "HerrGotlieb", "HoloTheWise", "Ilbko", "JleHuBbluKoT", "KirStaLong", "MrXantar", "Nikets", "Originalej0name", "Raymundo", "Shamahan", "Thomasg63", "XAutumn", "Ya6lo4ko", "dasfan123", "ifritdiezel", "kirusyaga", "long_live_the_9", "perefrazz", "roman.yagodin", "un_logic", "vivatimperia", "Вoвa"}),
+	RUSSIAN("русский",      "ru", Status._COMPLETE_, new String[]{"ConsideredHamster", "Inevielle", "apxwn", "yarikonline" }, new String[]{"AprilRain", "AttHawk46", "BlueberryShortcake", "CatGirlSasha", "Dominowood371", "Enwviun", "HerrGotlieb", "HoloTheWise", "Ilbko", "JleHuBbluKoT", "KirStaLong", "MrXantar", "Nikets", "Originalej0name", "Raymundo", "Shamahan", "Thomasg63", "XAutumn", "Ya6lo4ko", "dasfan123", "ifritdiezel", "kirusyaga", "long_live_the_9", "pancreper1", "perefrazz", "roman.yagodin", "tibby", "un_logic", "vivatimperia", "Вoвa"}),
 	SPANISH("español",      "es", Status._COMPLETE_, new String[]{"KeyKai", "Kiroto", "Kohru", "airman12", "grayscales"}, new String[]{"2001sergiobr", "AdventurerKilly", "Alesxanderk", "Bryan092", "CorvosUtopy", "D0n.Kak0", "Dewstend", "Dyrran", "Enddox", "Fervoreking", "Illyatwo2", "JPCHZ", "LastCry", "Marquezo_577_284", "NAVI1237", "STKmonoqui", "Sh4rkill3r", "alfongad", "anauta", "benzarr410", "chepe567.jc", "ctrijueque", "damc0616", "desen90", "dhg121", "javifs", "jonismack1", "magmax", "rechebeltran", "tres.14159"}),
-	GERMAN("deutsch",       "de", Status._COMPLETE_, new String[]{"Dallukas", "KrystalCroft", "Wuzzy", "Zap0", "apxwn", "bernhardreiter", "davedude"}, new String[]{"2711chrissi", "Abracadabra", "Ceeee", "DarkPixel", "ErichME", "Faquarl", "LenzB", "MacMoff", "Micksha", "Niseko", "Ordoviz", "Sarius", "SirEddi", "Sorpl3x", "SurmanPP", "SwissQ", "ThunfischGott", "Timo_S", "Topicranger", "azrdev", "carrageen", "dome.scheidler", "galactictrans", "gekko303", "jeinzi", "johannes.schobel", "karoshi42", "koryphea", "luciocarreras", "mklr", "niemand", "oragothen", "spixi", "unbekannterTyp"}),
-	FRENCH("français",      "fr", Status.UNREVIEWED, new String[]{"Emether", "TheKappaDuWeb", "Xalofar", "canc42", "kultissim", "minikrob"}, new String[]{"3raven", "Alsydis", "Axce", "Az_zahr", "Bastien72", "Basttee", "Dekadisk", "Draal", "Eragem", "Karnot", "Le_Valla", "Louson", "Martin.Bellet", "Neopolitan", "NoGi", "Nyrnx", "Pandaman516", "Petit_Chat", "RomTheMareep", "RunningColours", "Soeiz", "SpeagleZNT", "Tronche2Cake", "VRad", "Weende_Bellet", "Ygdrazil", "_nim_", "adamch", "antoine9298", "clexanis", "eloiseflo", "go11um", "hydrasho", "jazzzz", "levilbatard", "linterpreteur", "maeltur70", "marmous", "mcbaba29000", "mluzarreta", "panopano", "solthaar", "speagle", "typhr80", "vavavoum", "whereisfelix", "willi3725", "zM_"}),
-	PORTUGUESE("português", "pt", Status.UNREVIEWED, new String[]{"NicholasPainek", "TDF2001", "matheus208"}, new String[]{"14NGiestas", "Aetheryll", "Andrew_px1", "Arthur_Mastriaga", "Bigode935", "Bionic64", "Chacal.Ex", "ChainedFreaK", "Derik", "DredgenVale", "ElefanteFome", "Helen0903", "JST", "MadHorus", "Maria_João", "MarkusCoisa", "Matie", "OtávioMoraes", "PingasOwner", "Piraldo", "Sr.BaconDelicioso", "Tete_Teli", "Tio_P_(Krampus)", "Zukkine", "ancientorange", "danypr23", "denis.gnl", "efverick", "gBiazon", "ismael.henriques12", "juniorsilve33", "mfcord", "nattlegal", "owenreilly", "rafazago", "renan408", "try31"}),
-	POLISH("polski",        "pl", Status.UNREVIEWED, new String[]{"Deksippos", "MrKukurykpl", "kuadziw", "szymex73"}, new String[]{"Akmetari", "AntiTime", "Boguc", "Chasseur", "Ciechu", "Darden", "DarkKnightComes", "GRan0000", "I256I", "KarixDaii", "KrnąbrnyOlaf", "Lufix", "MJedi", "Odiihinia", "Ostsee0912", "Peperos", "ProPolishGamer", "RolsoN", "Scharnvirk", "VasteelXolotl", "Voyteq", "Wiiiiiii", "bogumilg", "bvader95", "chronon", "dusakus", "elchudy", "jajkoswinka", "michaub", "ozziezombie", "szczoteczka22", "taki1", "transportowiec96"}),
-	ITALIAN("italiano",		"it", Status.UNFINISHED, new String[]{"MottledElm", "NeoAugustus", "bizzolino", "funnydwarf", "inkubo87"}, new String[]{"4est", "Danelix", "DaniMare", "Danzl", "Eriliken", "Esse78", "Guiller124", "IoannesMaria", "Mat323", "Mister64", "Noostale", "andreafaffo", "andrearubbino00", "cantarini", "carinellialessandro31", "dmytro.tokayev", "mattiuw", "max1234ita", "nessunluogo", "righi.a", "umby000", "valerio.bozzolan"}),
-	TURKISH("türkçe",       "tr", Status.UNREVIEWED, new String[]{"LokiofMillenium", "emrebnk", "gorkem_yılmaz"}, new String[]{"AGORAAA", "AchernarPrime", "AcuriousPotato", "MuratEfeYilmaz", "OzanAlkan", "T3kin5iZ", "TR_Muhittin", "ahmetbakicakir", "akkaya.mustafa", "alikeremozfidan", "alpekin98", "denizakalin", "eraysall402", "erdemozdemir98", "hasantahsin160", "immortalsamuraicn", "kayikyaki", "melezorus34", "mitux", "ryuga", "yasirckr85", "yukete"}),
-	JAPANESE("日本語",       "ja", Status.UNFINISHED, null, new String[]{"Gosamaru", "Otogiri", "Siraore_Rou", "amama", "daingewuvzeevisiddfddd", "grassedge", "kiyofumimanabe", "librada", "mocklike", "oz51199", "tomofumikitano"}),
-	UKRANIAN("українська",  "uk", Status.UNREVIEWED, new String[]{"Oster"}, new String[]{"AlexFenixUA", "Dotsent", "Lyttym", "Sadsaltan1", "TarasUA", "TheGuyBill", "Tomfire", "Volkov", "ZverWolf", "_bor_", "alexfenixva", "ddmaster3463", "filalex77", "ingvarfed", "iu0v1", "lezzen", "oliolioxinfree", "so1der", "qweez", "romanokurg", "vlisivka", "yukete", "zhawty"}),
+	GERMAN("deutsch",       "de", Status._COMPLETE_, new String[]{"Dallukas", "KrystalCroft", "Wuzzy", "Zap0", "apxwn", "bernhardreiter", "davedude"}, new String[]{"2711chrissi", "Abracadabra", "Ceeee", "DarkPixel", "ErichME", "Faquarl", "LenzB", "MacMoff", "Micksha", "Niseko", "Ordoviz", "Sarius", "Shtynow", "SirEddi", "Sorpl3x", "SurmanPP", "SwissQ", "ThunfischGott", "Timo_S", "Topicranger", "azrdev", "carrageen", "dome.scheidler", "galactictrans", "gekko303", "jeinzi", "johannes.schobel", "karoshi42", "koryphea", "luciocarreras", "mklr", "niemand", "oragothen", "spixi", "unbekannterTyp"}),
+	FRENCH("français",      "fr", Status.UNREVIEWED, new String[]{"Emether", "TheKappaDuWeb", "Weende_Bellet", "Xalofar", "canc42", "kultissim", "minikrob"}, new String[]{"3raven", "Alsydis", "Axce", "Az_zahr", "Bastien72", "Basttee", "Dekadisk", "Draal", "Eragem", "Karnot", "Lama", "Le_Valla", "Louson", "Lucasgstar", "Martin.Bellet", "Neopolitan", "NoGi", "Nyrnx", "Pandaman516", "Petit_Chat", "RomTheMareep", "RunningColours", "Soeiz", "SpeagleZNT", "Teddywestside", "Tronche2Cake", "VRad", "Ygdrazil", "_nim_", "adamch", "adeb", "antoine9298", "clexanis", "eloiseflo", "go11um", "hydrasho", "jan.", "jazzzz", "levilbatard", "linterpreteur", "luffah", "maeltur70", "marmous", "mcbaba29000", "mluzarreta", "panopano", "solthaar", "speagle", "typhr80", "vavavoum", "whereisfelix", "willi3725", "zM_"}),
+	PORTUGUESE("português", "pt", Status._COMPLETE_, new String[]{"NicholasPainek", "TDF2001", "matheus208"}, new String[]{"14NGiestas", "Aetheryll", "Andrew_px1", "Arthur_Mastriaga", "Bigode935", "Bionic64", "Chacal.Ex", "ChainedFreaK", "Derik", "DredgenVale", "ElefanteFome", "Helen0903", "JST", "Kotaroo05", "MadHorus", "Maria_João", "MarkusCoisa", "Matie", "OtávioMoraes", "PingasOwner", "Piraldo", "Sr.BaconDelicioso", "Tete_Teli", "Tio_P_(Krampus)", "Zukkine", "ancientorange", "danypr23", "denis.gnl", "efverick", "gBiazon", "ismael.henriques12", "juniorsilve33", "mfcord", "nattlegal", "owenreilly", "rafazago", "renan408", "try31"}),
+	POLISH("polski",        "pl", Status.UNREVIEWED, new String[]{"Deksippos", "MrKukurykpl", "ProPolishGamer", "chronon", "kuadziw", "szymex73"}, new String[]{"Akmetari", "AntiTime", "Boguc", "Chasseur", "Ciechu", "Darden", "DarkKnightComes", "GRan0000", "I256I", "KarixDaii", "KrnąbrnyOlaf", "Lufix", "MJedi", "MrCommander", "Odiihinia", "Ostsee0912", "Peperos", "RolsoN", "Scharnvirk", "VasteelXolotl", "Voyteq", "Wiiiiiii", "bogumilg", "bvader95", "dusakus", "elchudy", "jajkoswinka", "michaub", "ozziezombie", "szczoteczka22", "taki1", "transportowiec96"}),
+	ITALIAN("italiano",		"it", Status._COMPLETE_, new String[]{"MottledElm", "NeoAugustus", "bizzolino", "funnydwarf", "inkubo87"}, new String[]{"4est", "Danelix", "DaniMare", "Danzl", "Eriliken", "Esse78", "Guiller124", "IoannesMaria", "LN_90", "Mat323", "Mister64", "Noostale", "PicchiSeba", "Tugamer89", "andreafaffo", "andrearubbino00", "cantarini", "carinellialessandro31", "dmytro.tokayev", "mattiuw", "max1234ita", "nessunluogo", "righi.a", "umby000", "valerio.bozzolan"}),
+	TURKISH("türkçe",       "tr", Status.UNREVIEWED, new String[]{"LokiofMillenium", "T3kin5iZ", "emrebnk", "gorkem_yılmaz"}, new String[]{"AGORAAA", "AchernarPrime", "AcuriousPotato", "MuratEfeYilmaz", "Mustafa.10", "OzanAlkan", "TR_Muhittin", "ahmetbakicakir", "akkaya.mustafa", "alikeremozfidan", "alpekin98", "denizakalin", "eraysall402", "erdemozdemir98", "hasantahsin160", "immortalsamuraicn", "kayikyaki", "melezorus34", "mitux", "mustafadoslu", "ryuga", "yasirckr85", "yukete"}),
+	JAPANESE("日本語",       "ja", Status.UNFINISHED, new String[]{"daingewuvzeevisiddfddd", "oz51199"}, new String[]{"Gosamaru", "Otogiri", "Siraore_Rou", "amama", "grassedge", "kiyofumimanabe", "librada", "mocklike", "tomofumikitano"}),
+	UKRANIAN("українська",  "uk", Status.UNREVIEWED, new String[]{"Oster", "Snikewin"}, new String[]{"AlexFenixUA", "Dotsent", "Lyttym", "Mops", "Sadsaltan1", "TarasUA", "TheGuyBill", "Tomfire", "Volkov", "ZverWolf", "_bor_", "alexfenixva", "ddmaster3463", "filalex77", "holuydadko", "ingvarfed", "iu0v1", "lezzen", "oliolioxinfree", "qweez", "romanokurg", "so1der", "sterenkevicsasa", "vlisivka", "yukete", "zhawty", "Мальвочка"}),
 	CZECH("čeština",        "cs", Status.UNREVIEWED, new String[]{"ObisMike", "novotnyvaclav"}, new String[]{"16cnovotny", "AshenShugar", "Autony", "Block_Vader", "Buba237", "Nerdiniel", "JStrange", "RealBrofessor", "Thorn_123", "chuckjirka", "emteckos2", "kristanka"}),
-	INDONESIAN("indonésien","in", Status.UNFINISHED, new String[]{"rakapratama"}, new String[]{"INDRA_SYAHPUTRA", "Izulhaaq", "Taka31", "ZakyM313", "ZangieF347", "atmorojo", "di9526985", "esprogarap", "kirimaja", "nicoalvito", "oolek", "wisnugafur"}),
+	INDONESIAN("indonésien","in", Status.UNFINISHED, new String[]{"rakapratama"}, new String[]{"INDRA_SYAHPUTRA", "Izulhaaq", "PineFirebloom", "QiuQiuQi", "Taka31", "ZakyM313", "ZangieF347", "aachunemiku", "atmorojo", "di9526985", "esprogarap", "hatsunnimiku", "icebearwand", "kirimaja", "nicoalvito", "oolek", "wisnugafur"}),
 	DUTCH("nederlands",     "nl", Status.UNREVIEWED, new String[]{"AlbertBrand"}, new String[]{"AvanLieshout", "Blokheck011", "Frankwert", "Gehenna", "Mvharen", "Valco", "ZephyrZodiac", "link200023", "rmw", "th3f4llenh0rr0r"}),
-	HUNGARIAN("magyar",     "hu", Status.UNFINISHED, new String[]{"dorheim", "szalaik"}, new String[]{"Navetelen", "acszoltan111", "clarovani", "dhialub", "nanometer", "nardomaa", "savarall", "summoner001"}),
-	VIETNAMESE("tiếng việt","vi", Status.UNREVIEWED, new String[]{"Chuseko", "The_Hood", "nguyenanhkhoapythus"}, new String[]{"BlueSheepAlgodoo", "Phuc2401", "Teh_boi", "Toluu", "bruhwut", "buicongminh_t63", "deadlevel13", "h4ndy_c4ndy", "hniV", "khangxyz3g", "ngolamaz3", "nkhhu", "vdgiapp", "vtvinh24"}),
+	HUNGARIAN("magyar",     "hu", Status.UNREVIEWED, new String[]{"dorheim", "szalaik"}, new String[]{"Csanevox", "Navetelen", "acszoltan111", "clarovani", "dhialub", "nanometer", "nardomaa", "savarall", "summoner001", "szemetvodor"}),
+	VIETNAMESE("tiếng việt","vi", Status.UNREVIEWED, new String[]{"Chuseko", "The_Hood", "nguyenanhkhoapythus"}, new String[]{"BlueSheepAlgodoo", "Phuc2401", "Teh_boi", "Threyja", "Toluu", "bruhwut", "buicongminh_t63", "deadlevel13", "h4ndy_c4ndy", "hniV", "khangxyz3g", "ngolamaz3", "nkhhu", "vdgiapp", "vtvinh24"}),
 	//FINNISH("suomi", 		"fi", Status.UNFINISHED, new String[]{"TenguKnight"}, new String[]{"Allugaattori10", "Dakkus", "Jaskas123", "MailBoxGod", "Oftox", "Sautari", "Tikkari"} ),
 	GREEK("ελληνικά",       "el", Status._COMPLETE_, new String[]{"Aeonius", "Saxy"}, new String[]{"DU_Clouds", "VasKyr", "YiorgosH", "fr3sh", "stefboi", "toumbo", "val.exe"});
 	//CATALAN("català",     "ca", Status.UNFINISHED, new String[]{"Illyatwo2"}, new String[]{"Elosy", "n1ngu"})
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java
index 0d45f8f..04672ab 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/AboutScene.java
@@ -197,8 +197,8 @@ public class AboutScene extends PixelScene {
 				null,
 				null,
 				"ShatteredPD is community-translated via _Transifex_! Thank you so much to all of Shattered's volunteer translators!",
-				"www.transifex.com/shattered-pixel/",
-				"https://www.transifex.com/shattered-pixel/shattered-pixel-dungeon/");
+				"transifex.com/shattered-pixel/...",
+				"https://explore.transifex.com/shattered-pixel/shattered-pixel-dungeon/");
 		transifex.setRect((Camera.main.width - colWidth)/2f, purigro.bottom() + 12, colWidth, 0);
 		content.add(transifex);
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
index daab234..0434407 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/CellSelector.java
@@ -176,7 +176,7 @@ public class CellSelector extends ScrollArea {
 	
 	@Override
 	protected void onPointerDown( PointerEvent event ) {
-
+		camera.edgeScroll.set(-1);
 		if (event != curEvent && another == null) {
 					
 			if (curEvent.type == PointerEvent.Type.UP) {
@@ -199,6 +199,7 @@ public class CellSelector extends ScrollArea {
 	
 	@Override
 	protected void onPointerUp( PointerEvent event ) {
+		camera.edgeScroll.set(1);
 		if (pinching && (event == curEvent || event == another)) {
 			
 			pinching = false;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
index 81568b6..8e2eea8 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/ChangesScene.java
@@ -26,6 +26,7 @@ import com.shatteredpixel.shatteredpixeldungeon.Chrome;
 import com.shatteredpixel.shatteredpixeldungeon.ShatteredPixelDungeon;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Languages;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
+import com.shatteredpixel.shatteredpixeldungeon.sprites.CharSprite;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Archs;
 import com.shatteredpixel.shatteredpixeldungeon.ui.ExitButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Icons;
@@ -34,7 +35,8 @@ import com.shatteredpixel.shatteredpixeldungeon.ui.ScrollPane;
 import com.shatteredpixel.shatteredpixeldungeon.ui.StyledButton;
 import com.shatteredpixel.shatteredpixeldungeon.ui.Window;
 import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.ChangeInfo;
-import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.ChangesWindow;
+import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.WndChanges;
+import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.WndChangesTabbed;
 import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_1_X_Changes;
 import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_2_X_Changes;
 import com.shatteredpixel.shatteredpixeldungeon.ui.changelist.v0_3_X_Changes;
@@ -61,6 +63,7 @@ public class ChangesScene extends PixelScene {
 	public static int changesSelected = 0;
 
 	private NinePatch rightPanel;
+	private ScrollPane rightScroll;
 	private IconTitle changeTitle;
 	private RenderedTextBlock changeBody;
 	
@@ -105,19 +108,26 @@ public class ChangesScene extends PixelScene {
 			rightPanel.y = title.bottom() + 5;
 			add(rightPanel);
 
+			rightScroll = new ScrollPane(new Component());
+			add(rightScroll);
+			rightScroll.setRect(
+					rightPanel.x + rightPanel.marginLeft(),
+					rightPanel.y + rightPanel.marginTop()-1,
+					rightPanel.innerWidth() + 2,
+					rightPanel.innerHeight() + 2);
+			rightScroll.scrollTo(0, 0);
+
 			changeTitle = new IconTitle(Icons.get(Icons.CHANGES), Messages.get(this, "right_title"));
-			changeTitle.setPos(rightPanel.x + rightPanel.marginLeft(), rightPanel.y + rightPanel.marginTop());
+			changeTitle.setPos(0, 1);
 			changeTitle.setSize(pw, 20);
-			add(changeTitle);
+			rightScroll.content().add(changeTitle);
 
 			String body = Messages.get(this, "right_body");
-			if (Messages.lang() != Languages.ENGLISH){
-				body += "\n\n_" + Messages.get(this, "lang_warn") + "_";
-			}
+
 			changeBody = PixelScene.renderTextBlock(body, 6);
 			changeBody.maxWidth(pw - panel.marginHor());
-			changeBody.setPos(rightPanel.x + rightPanel.marginLeft(), changeTitle.bottom()+2);
-			add(changeBody);
+			changeBody.setPos(0, changeTitle.bottom()+2);
+			rightScroll.content().add(changeBody);
 
 		} else {
 			panel.size( pw, ph );
@@ -128,6 +138,12 @@ public class ChangesScene extends PixelScene {
 		add( panel );
 		
 		final ArrayList<ChangeInfo> changeInfos = new ArrayList<>();
+
+		if (Messages.lang() != Languages.ENGLISH){
+			ChangeInfo langWarn = new ChangeInfo("", true, Messages.get(this, "lang_warn"));
+			langWarn.hardlight(CharSprite.WARNING);
+			changeInfos.add(langWarn);
+		}
 		
 		switch (changesSelected){
 			case 0: default:
@@ -314,34 +330,44 @@ public class ChangesScene extends PixelScene {
 		fadeIn();
 	}
 
-	private void updateChangesText(Image icon, String title, String message){
+	private void updateChangesText(Image icon, String title, String... messages){
 		if (changeTitle != null){
 			changeTitle.icon(icon);
 			changeTitle.label(title);
 			changeTitle.setPos(changeTitle.left(), changeTitle.top());
 
-			int pw = 135 + rightPanel.marginHor() - 2;
-			changeBody.text(message, pw - rightPanel.marginHor());
-			int ph = Camera.main.height - 36;
-			while (changeBody.height() > ph-25
-					&& changeBody.right() + 5 < Camera.main.width){
-				changeBody.maxWidth(changeBody.maxWidth()+5);
+			String message = "";
+			for (int i = 0; i < messages.length; i++){
+				message += messages[i];
+				if (i != messages.length-1){
+					message += "\n\n";
+				}
 			}
-			rightPanel.size(changeBody.maxWidth() + rightPanel.marginHor(), Math.max(ph, changeBody.height()+18+rightPanel.marginVer()));
-			changeBody.setPos(changeBody.left(), changeTitle.bottom()+2);
+			changeBody.text(message);
+			rightScroll.content().setSize(rightScroll.width(), changeBody.bottom()+2);
+			rightScroll.setSize(rightScroll.width(), rightScroll.height());
+			rightScroll.scrollTo(0, 0);
 
 		} else {
-			addToFront(new ChangesWindow(icon, title, message));
+			if (messages.length == 1) {
+				addToFront(new WndChanges(icon, title, messages[0]));
+			} else {
+				addToFront(new WndChangesTabbed(icon, title, messages));
+			}
 		}
 	}
 
-	public static void showChangeInfo(Image icon, String title, String message){
+	public static void showChangeInfo(Image icon, String title, String... messages){
 		Scene s = ShatteredPixelDungeon.scene();
 		if (s instanceof ChangesScene){
-			((ChangesScene) s).updateChangesText(icon, title, message);
+			((ChangesScene) s).updateChangesText(icon, title, messages);
 			return;
 		}
-		s.addToFront(new ChangesWindow(icon, title, message));
+		if (messages.length == 1) {
+			s.addToFront(new WndChanges(icon, title, messages[0]));
+		} else {
+			s.addToFront(new WndChangesTabbed(icon, title, messages));
+		}
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
index ee2827e..c37e45b 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/GameScene.java
@@ -39,6 +39,7 @@ import com.shatteredpixel.shatteredpixeldungeon.actors.buffs.ChampionEnemy;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Hero;
 import com.shatteredpixel.shatteredpixeldungeon.actors.hero.Talent;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.DemonSpawner;
+import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Ghoul;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Mob;
 import com.shatteredpixel.shatteredpixeldungeon.actors.mobs.Snake;
 import com.shatteredpixel.shatteredpixeldungeon.effects.BannerSprites;
@@ -211,7 +212,7 @@ public class GameScene extends PixelScene {
 		
 		super.create();
 		Camera.main.zoom( GameMath.gate(minZoom, defaultZoom + SPDSettings.zoom(), maxZoom));
-		Camera.main.scrollable = true;
+		Camera.main.edgeScroll.set(1);
 
 		switch (SPDSettings.cameraFollow()) {
 			case 4: default:    Camera.main.setFollowDeadzone(0);      break;
@@ -451,25 +452,6 @@ public class GameScene extends PixelScene {
 			Dungeon.droppedItems.remove( Dungeon.depth );
 		}
 
-		//pre-1.1.0 saves, including all logic surrounding Dungeon.portedItems
-		ArrayList<Item> ported = Dungeon.portedItems.get( Dungeon.depth );
-		if (ported != null){
-			//might want to have a 'near entrance' function if items can be ported elsewhere
-			int pos;
-			//try to find a tile with no heap, otherwise just stick items onto a heap.
-			int tries = 100;
-			do {
-				pos = Dungeon.level.randomRespawnCell( null );
-				tries--;
-			} while (tries > 0 && Dungeon.level.heaps.get(pos) != null);
-			for (Item item : ported) {
-				Dungeon.level.drop( item, pos ).type = Heap.Type.CHEST;
-			}
-			Dungeon.level.heaps.get(pos).type = Heap.Type.CHEST;
-			Dungeon.level.heaps.get(pos).sprite.link(); //sprite reset to show chest
-			Dungeon.portedItems.remove( Dungeon.depth );
-		}
-
 		Dungeon.hero.next();
 
 		switch (InterlevelScene.mode){
@@ -1262,6 +1244,11 @@ public class GameScene extends PixelScene {
 		if (scene != null) {
 			for (Mob mob : Dungeon.level.mobs.toArray(new Mob[0])) {
 				if (mob.sprite != null) mob.sprite.visible = Dungeon.level.heroFOV[mob.pos];
+				if (mob instanceof Ghoul){
+					for (Ghoul.GhoulLifeLink link : mob.buffs(Ghoul.GhoulLifeLink.class)){
+						link.updateVisibility();
+					}
+				}
 			}
 		}
 	}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
index b2adc26..222a5c8 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/PixelScene.java
@@ -238,7 +238,9 @@ public class PixelScene extends Scene {
 				}
 
 				cameraShift.invScale(Camera.main.zoom);
-				if (cameraShift.length() > 0 && Camera.main.scrollable){
+				cameraShift.x *= Camera.main.edgeScroll.x;
+				cameraShift.y *= Camera.main.edgeScroll.y;
+				if (cameraShift.length() > 0){
 					Camera.main.shift(cameraShift);
 				}
 				ControllerHandler.updateControllerPointer(virtualCursorPos, true);
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/RankingsScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/RankingsScene.java
index 6ec9235..41a7290 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/RankingsScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/RankingsScene.java
@@ -336,11 +336,7 @@ public class RankingsScene extends PixelScene {
 		
 		@Override
 		protected void onClick() {
-			if (rec.gameData != null) {
-				parent.add( new WndRanking( rec ) );
-			} else {
-				parent.add( new WndError( Messages.get(RankingsScene.class, "no_info") ) );
-			}
+			parent.add( new WndRanking( rec ) );
 		}
 	}
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
index 2f4e04a..3c7df53 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/scenes/WelcomeScene.java
@@ -240,21 +240,14 @@ public class WelcomeScene extends PixelScene {
 		//update rankings, to update any data which may be outdated
 		if (previousVersion < LATEST_UPDATE){
 			try {
-				Badges.loadGlobal(); //fixing a bug with v1.3.2 saves
 				Rankings.INSTANCE.load();
 				for (Rankings.Record rec : Rankings.INSTANCE.records.toArray(new Rankings.Record[0])){
 					try {
 						Rankings.INSTANCE.loadGameData(rec);
-						if (Statistics.gameWon) {
-							Badges.unlock(Badges.Badge.VICTORY);
-							if (Challenges.activeChallenges() >= 1) Badges.unlock(Badges.Badge.CHAMPION_1);
-							if (Challenges.activeChallenges() >= 3) Badges.unlock(Badges.Badge.CHAMPION_2);
-							if (Challenges.activeChallenges() >= 6) Badges.unlock(Badges.Badge.CHAMPION_3);
-						}
 						Rankings.INSTANCE.saveGameData(rec);
 					} catch (Exception e) {
-						//if we encounter a fatal per-record error, then clear that record
-						Rankings.INSTANCE.records.remove(rec);
+						//if we encounter a fatal per-record error, then clear that record's data
+						rec.gameData = null;
 						ShatteredPixelDungeon.reportException(e);
 					}
 				}
@@ -263,14 +256,13 @@ public class WelcomeScene extends PixelScene {
 						Rankings.INSTANCE.loadGameData(Rankings.INSTANCE.latestDaily);
 						Rankings.INSTANCE.saveGameData(Rankings.INSTANCE.latestDaily);
 					} catch (Exception e) {
-						//if we encounter a fatal per-record error, then clear that record
-						Rankings.INSTANCE.latestDaily = null;
+						//if we encounter a fatal per-record error, then clear that record's data
+						Rankings.INSTANCE.latestDaily.gameData = null;
 						ShatteredPixelDungeon.reportException(e);
 					}
 				}
 				Collections.sort(Rankings.INSTANCE.records, Rankings.scoreComparator);
 				Rankings.INSTANCE.save();
-				Badges.saveGlobal();
 			} catch (Exception e) {
 				//if we encounter a fatal error, then just clear the rankings
 				FileUtils.deleteFile( Rankings.RANKINGS_FILE );
@@ -284,6 +276,7 @@ public class WelcomeScene extends PixelScene {
 		if (previousVersion <= ShatteredPixelDungeon.v2_0_0){
 			Badges.loadGlobal();
 			if (Badges.isUnlocked(Badges.Badge.VICTORY) && !Badges.isUnlocked(Badges.Badge.UNLOCK_DUELIST)){
+				Dungeon.customSeedText = ""; //clear in case rankings updating left this set
 				Badges.unlock(Badges.Badge.UNLOCK_DUELIST);
 				Badges.saveGlobal();
 			}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/NecromancerSprite.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/NecromancerSprite.java
index 52485bb..0a9b2a6 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/NecromancerSprite.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/NecromancerSprite.java
@@ -83,6 +83,7 @@ public class NecromancerSprite extends MobSprite {
 		super.die();
 		if (summoningBones != null){
 			summoningBones.on = false;
+			summoningBones = null;
 		}
 	}
 
@@ -90,13 +91,15 @@ public class NecromancerSprite extends MobSprite {
 	public void kill() {
 		super.kill();
 		if (summoningBones != null){
-			summoningBones.killAndErase();
+			summoningBones.on = false;
+			summoningBones = null;
 		}
 	}
 
 	public void cancelSummoning(){
 		if (summoningBones != null){
 			summoningBones.on = false;
+			summoningBones = null;
 		}
 	}
 
@@ -107,6 +110,7 @@ public class NecromancerSprite extends MobSprite {
 		} else {
 			summoningBones.on = false;
 		}
+		summoningBones = null;
 		idle();
 	}
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/SpectralNecromancerSprite.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/SpectralNecromancerSprite.java
index 8c4555f..2883cf3 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/SpectralNecromancerSprite.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/sprites/SpectralNecromancerSprite.java
@@ -34,7 +34,7 @@ import com.watabou.noosa.particles.Emitter;
 public class SpectralNecromancerSprite extends MobSprite {
 
 	private Animation charging;
-	private Emitter summoningBones;
+	private Emitter summoningParticles;
 
 	public SpectralNecromancerSprite(){
 		super();
@@ -75,40 +75,44 @@ public class SpectralNecromancerSprite extends MobSprite {
 	@Override
 	public void update() {
 		super.update();
-		if (summoningBones != null && ((Necromancer) ch).summoningPos != -1){
-			summoningBones.visible = Dungeon.level.heroFOV[((Necromancer) ch).summoningPos];
+		if (summoningParticles != null && ((Necromancer) ch).summoningPos != -1){
+			summoningParticles.visible = Dungeon.level.heroFOV[((Necromancer) ch).summoningPos];
 		}
 	}
 
 	@Override
 	public void die() {
 		super.die();
-		if (summoningBones != null){
-			summoningBones.on = false;
+		if (summoningParticles != null){
+			summoningParticles.on = false;
+			summoningParticles = null;
 		}
 	}
 
 	@Override
 	public void kill() {
 		super.kill();
-		if (summoningBones != null){
-			summoningBones.killAndErase();
+		if (summoningParticles != null){
+			summoningParticles.on = false;
+			summoningParticles = null;
 		}
 	}
 
 	public void cancelSummoning(){
-		if (summoningBones != null){
-			summoningBones.on = false;
+		if (summoningParticles != null){
+			summoningParticles.on = false;
+			summoningParticles = null;
 		}
 	}
 
 	public void finishSummoning(){
-		if (summoningBones.visible) {
+		if (summoningParticles.visible) {
 			Sample.INSTANCE.play(Assets.Sounds.CURSED);
-			summoningBones.burst(ShadowParticle.CURSE, 5);
+			summoningParticles.burst(ShadowParticle.CURSE, 5);
 		} else {
-			summoningBones.on = false;
+			summoningParticles.on = false;
 		}
+		summoningParticles = null;
 		idle();
 	}
 
@@ -120,13 +124,13 @@ public class SpectralNecromancerSprite extends MobSprite {
 	public void zap(int cell) {
 		super.zap(cell);
 		if (ch instanceof Necromancer && ((Necromancer) ch).summoning){
-			if (summoningBones != null){
-				summoningBones.on = false;
+			if (summoningParticles != null){
+				summoningParticles.on = false;
 			}
-			summoningBones = CellEmitter.get(((Necromancer) ch).summoningPos);
-			summoningBones.pour(ShadowParticle.MISSILE, 0.1f);
-			summoningBones.visible = Dungeon.level.heroFOV[((Necromancer) ch).summoningPos];
-			if (visible || summoningBones.visible ) Sample.INSTANCE.play( Assets.Sounds.CHARGEUP, 1f, 0.8f );
+			summoningParticles = CellEmitter.get(((Necromancer) ch).summoningPos);
+			summoningParticles.pour(ShadowParticle.MISSILE, 0.1f);
+			summoningParticles.visible = Dungeon.level.heroFOV[((Necromancer) ch).summoningPos];
+			if (visible || summoningParticles.visible ) Sample.INSTANCE.play( Assets.Sounds.CHARGEUP, 1f, 0.8f );
 		}
 	}
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ActionIndicator.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ActionIndicator.java
index f534589..fd605a0 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ActionIndicator.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ActionIndicator.java
@@ -25,19 +25,20 @@ import com.shatteredpixel.shatteredpixeldungeon.Dungeon;
 import com.shatteredpixel.shatteredpixeldungeon.SPDAction;
 import com.shatteredpixel.shatteredpixeldungeon.messages.Messages;
 import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
-import com.shatteredpixel.shatteredpixeldungeon.windows.WndKeyBindings;
 import com.watabou.input.GameAction;
-import com.watabou.noosa.Image;
+import com.watabou.noosa.BitmapText;
+import com.watabou.noosa.Visual;
 
 public class ActionIndicator extends Tag {
 
-	Image icon;
+	Visual primaryVis;
+	Visual secondVis;
 
 	public static Action action;
 	public static ActionIndicator instance;
 
 	public ActionIndicator() {
-		super( 0xFFFF4C );
+		super( 0 );
 
 		instance = this;
 
@@ -60,40 +61,74 @@ public class ActionIndicator extends Tag {
 	protected synchronized void layout() {
 		super.layout();
 		
-		if (icon != null){
-			if (!flipped)   icon.x = x + (SIZE - icon.width()) / 2f + 1;
-			else            icon.x = x + width - (SIZE + icon.width()) / 2f - 1;
-			icon.y = y + (height - icon.height()) / 2f;
-			PixelScene.align(icon);
-			if (!members.contains(icon))
-				add(icon);
+		if (primaryVis != null){
+			if (!flipped)   primaryVis.x = x + (SIZE - primaryVis.width()) / 2f + 1;
+			else            primaryVis.x = x + width - (SIZE + primaryVis.width()) / 2f - 1;
+			primaryVis.y = y + (height - primaryVis.height()) / 2f;
+			PixelScene.align(primaryVis);
+			if (secondVis != null){
+				if (secondVis.width() > 16) secondVis.x = primaryVis.center().x - secondVis.width()/2f;
+				else                        secondVis.x = primaryVis.center().x + 8 - secondVis.width();
+				if (secondVis instanceof BitmapText){
+					//need a special case here for text unfortunately
+					secondVis.y = primaryVis.center().y + 8 - ((BitmapText) secondVis).baseLine();
+				} else {
+					secondVis.y = primaryVis.center().y + 8 - secondVis.height();
+				}
+				PixelScene.align(secondVis);
+			}
 		}
 	}
 	
-	private boolean needsLayout = false;
+	private boolean needsRefresh = false;
 	
 	@Override
 	public synchronized void update() {
 		super.update();
 
-		if (!Dungeon.hero.ready){
-			if (icon != null) icon.alpha(0.5f);
-		} else {
-			if (icon != null) icon.alpha(1f);
-		}
-
 		if (!visible && action != null){
 			visible = true;
-			updateIcon();
+			needsRefresh = true;
 			flash();
 		} else {
 			visible = action != null;
 		}
-		
-		if (needsLayout){
+
+		if (needsRefresh){
+			if (primaryVis != null) {
+				primaryVis.destroy();
+				primaryVis.killAndErase();
+				primaryVis = null;
+			}
+			if (secondVis != null){
+				secondVis.destroy();
+				secondVis.killAndErase();
+				secondVis = null;
+			}
+			if (action != null) {
+				primaryVis = action.primaryVisual();
+				add(primaryVis);
+
+				secondVis = action.secondaryVisual();
+				if (secondVis != null){
+					add(secondVis);
+				}
+
+				setColor(action.indicatorColor());
+			}
+
 			layout();
-			needsLayout = false;
+			needsRefresh = false;
 		}
+
+		if (!Dungeon.hero.ready){
+			if (primaryVis != null) primaryVis.alpha(0.5f);
+			if (secondVis != null) secondVis.alpha(0.5f);
+		} else {
+			if (primaryVis != null) primaryVis.alpha(1f);
+			if (secondVis != null) secondVis.alpha(1f);
+		}
+
 	}
 
 	@Override
@@ -115,7 +150,7 @@ public class ActionIndicator extends Tag {
 
 	public static void setAction(Action action){
 		ActionIndicator.action = action;
-		updateIcon();
+		refresh();
 	}
 
 	public static void clearAction(Action action){
@@ -124,28 +159,33 @@ public class ActionIndicator extends Tag {
 		}
 	}
 
-	public static void updateIcon(){
+	public static void refresh(){
 		if (instance != null){
-			synchronized (instance) {
-				if (instance.icon != null) {
-					instance.icon.killAndErase();
-					instance.icon = null;
-				}
-				if (action != null) {
-					instance.icon = action.actionIcon();
-					instance.needsLayout = true;
-				}
-			}
+			instance.needsRefresh = true;
 		}
 	}
 
-	public interface Action{
+	public interface Action {
+
+		String actionName();
+
+		default int actionIcon(){
+			return HeroIcon.NONE;
+		}
 
-		public String actionName();
+		//usually just a static icon, unless overridden
+		default Visual primaryVisual(){
+			return new HeroIcon(this);
+		}
+
+		//a smaller visual on the bottom-right, usually a tiny icon or bitmap text
+		default Visual secondaryVisual(){
+			return null; //no second visual by default
+		}
 
-		public Image actionIcon();
+		int indicatorColor();
 
-		public void doAction();
+		void doAction();
 
 	}
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
index 26edb65..57d145d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/AttackIndicator.java
@@ -192,7 +192,7 @@ public class AttackIndicator extends Tag {
 			instance.lastTarget = (Mob) target;
 			instance.updateImage();
 
-			TargetHealthIndicator.instance.target(target);
+			QuickSlotButton.target(target);
 		}
 	}
 	
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java
index 057b668..aa9cc55 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/BuffIndicator.java
@@ -285,6 +285,7 @@ public class BuffIndicator extends Component {
 			//round up to the nearest pixel if <50% faded, otherwise round down
 			if (!large || buff.iconTextDisplay().isEmpty()) {
 				text.visible = false;
+				grey.visible = true;
 				float fadeHeight = buff.iconFadePercent() * icon.height();
 				float zoom = (camera() != null) ? camera().zoom : 1;
 				if (fadeHeight < icon.height() / 2f) {
@@ -293,6 +294,7 @@ public class BuffIndicator extends Component {
 					grey.scale.set(icon.width(), (float) Math.floor(zoom * fadeHeight) / zoom);
 				}
 			} else if (!buff.iconTextDisplay().isEmpty()) {
+				text.visible = true;
 				grey.visible = false;
 				if (buff.type == Buff.buffType.POSITIVE)        text.hardlight(CharSprite.POSITIVE);
 				else if (buff.type == Buff.buffType.NEGATIVE)   text.hardlight(CharSprite.NEGATIVE);
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Button.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Button.java
index 894abea..dadec75 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Button.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Button.java
@@ -40,29 +40,35 @@ public class Button extends Component {
 	
 	protected PointerArea hotArea;
 	protected Tooltip hoverTip;
-	
-	protected boolean pressed;
+
+	//only one button should be pressed at a time
+	protected static Button pressedButton;
 	protected float pressTime;
-	protected boolean processed;
+	protected boolean clickReady;
 
 	@Override
 	protected void createChildren() {
 		hotArea = new PointerArea( 0, 0, 0, 0 ) {
 			@Override
 			protected void onPointerDown( PointerEvent event ) {
-				pressed = true;
+				pressedButton = Button.this;
 				pressTime = 0;
-				processed = false;
+				clickReady = true;
 				Button.this.onPointerDown();
 			}
 			@Override
 			protected void onPointerUp( PointerEvent event ) {
-				pressed = false;
+				if (pressedButton == Button.this){
+					pressedButton = null;
+				} else {
+					//cancel any potential click, only one button can be activated at a time
+					clickReady = false;
+				}
 				Button.this.onPointerUp();
 			}
 			@Override
 			protected void onClick( PointerEvent event ) {
-				if (!processed) {
+				if (clickReady) {
 					killTooltip();
 					switch (event.button){
 						case PointerEvent.LEFT: default:
@@ -114,14 +120,16 @@ public class Button extends Component {
 			public boolean onSignal ( KeyEvent event ) {
 				if ( active && KeyBindings.getActionForKey( event ) == keyAction()){
 					if (event.pressed){
-						pressed = true;
+						pressedButton = Button.this;
 						pressTime = 0;
-						processed = false;
+						clickReady = true;
 						Button.this.onPointerDown();
 					} else {
 						Button.this.onPointerUp();
-						if (pressed && !processed) onClick();
-						pressed = false;
+						if (pressedButton == Button.this) {
+							pressedButton = null;
+							if (clickReady) onClick();
+						}
 					}
 					return true;
 				}
@@ -140,24 +148,22 @@ public class Button extends Component {
 	public GameAction secondaryTooltipAction(){
 		return null;
 	}
-	
+
 	@Override
 	public void update() {
 		super.update();
 		
 		hotArea.active = visible;
 		
-		if (pressed) {
-			if ((pressTime += Game.elapsed) >= longClick) {
-				pressed = false;
-				if (onLongClick()) {
-
-					hotArea.reset();
-					processed = true;
-					onPointerUp();
-					
-					Game.vibrate( 50 );
-				}
+		if (pressedButton == this && (pressTime += Game.elapsed) >= longClick) {
+			pressedButton = null;
+			if (onLongClick()) {
+
+				hotArea.reset();
+				clickReady = false; //did a long click, can't do a regular one
+				onPointerUp();
+
+				Game.vibrate( 50 );
 			}
 		}
 	}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/DangerIndicator.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/DangerIndicator.java
index 8bec066..076477d 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/DangerIndicator.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/DangerIndicator.java
@@ -34,7 +34,7 @@ import com.watabou.noosa.Image;
 
 public class DangerIndicator extends Tag {
 	
-	public static final int COLOR	= 0xFF4C4C;
+	public static final int COLOR	= 0xC03838;
 	
 	private BitmapText number;
 	private Image icon;
@@ -46,7 +46,7 @@ public class DangerIndicator extends Tag {
 	public static int HEIGHT = 16;
 	
 	public DangerIndicator() {
-		super( 0xFF4C4C );
+		super( COLOR );
 		
 		setSize( SIZE, HEIGHT );
 		
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/HeroIcon.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/HeroIcon.java
index cf2a7f9..83139ba 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/HeroIcon.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/HeroIcon.java
@@ -34,7 +34,7 @@ public class HeroIcon extends Image {
 	private static final int SIZE = 16;
 
 	//transparent icon
-	public static final int NONE    = 31;
+	public static final int NONE    = 63;
 
 	//subclasses
 	public static final int BERSERKER   = 0;
@@ -66,6 +66,15 @@ public class HeroIcon extends Image {
 	public static final int FEINT           = 30;
 	public static final int RATMOGRIFY      = 31;
 
+	//action indicator visuals
+	public static final int BERSERK         = 32;
+	public static final int COMBO           = 33;
+	public static final int PREPARATION     = 34;
+	public static final int MOMENTUM        = 35;
+	public static final int SNIPERS_MARK    = 36;
+	public static final int WEAPON_SWAP     = 37;
+	public static final int MONK_ABILITIES  = 38;
+
 	public HeroIcon(HeroSubClass subCls){
 		super( Assets.Interfaces.HERO_ICONS );
 		if (film == null){
@@ -82,4 +91,12 @@ public class HeroIcon extends Image {
 		frame(film.get(abil.icon()));
 	}
 
+	public HeroIcon(ActionIndicator.Action action){
+		super( Assets.Interfaces.HERO_ICONS );
+		if (film == null){
+			film = new TextureFilm(texture, SIZE, SIZE);
+		}
+		frame(film.get(action.actionIcon()));
+	}
+
 }
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/LootIndicator.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/LootIndicator.java
index f70b26c..d93595e 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/LootIndicator.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/LootIndicator.java
@@ -36,7 +36,7 @@ public class LootIndicator extends Tag {
 	private int lastQuantity = 0;
 	
 	public LootIndicator() {
-		super( 0x1F75CC );
+		super( 0x185898 );
 		
 		setSize( SIZE, SIZE );
 		
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickRecipe.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickRecipe.java
index 28cc958..f88e479 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickRecipe.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/QuickRecipe.java
@@ -58,7 +58,6 @@ import com.shatteredpixel.shatteredpixeldungeon.items.spells.BeaconOfReturning;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.CurseInfusion;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.FeatherFall;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalInfusion;
-import com.shatteredpixel.shatteredpixeldungeon.items.spells.MagicalPorter;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.PhaseShift;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.ReclaimTrap;
 import com.shatteredpixel.shatteredpixeldungeon.items.spells.Recycle;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/RenderedTextBlock.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/RenderedTextBlock.java
index 599c893..1a7ab18 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/RenderedTextBlock.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/RenderedTextBlock.java
@@ -237,7 +237,7 @@ public class RenderedTextBlock extends Component {
 					j++;
 				}
 
-				if ((x - this.x) + fullWidth > maxWidth && !curLine.isEmpty()){
+				if ((x - this.x) + fullWidth - 0.001f > maxWidth && !curLine.isEmpty()){
 					y += height+2f;
 					x = this.x;
 					nLines++;
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ResumeIndicator.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ResumeIndicator.java
index 4c262c9..54b9718 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ResumeIndicator.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/ResumeIndicator.java
@@ -34,7 +34,7 @@ public class ResumeIndicator extends Tag {
 	private Image icon;
 
 	public ResumeIndicator() {
-		super(0xCDD5C0);
+		super(0xA3A695);
 
 		setSize( SIZE, SIZE );
 
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Tag.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Tag.java
index ff86677..7a861e9 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Tag.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/Tag.java
@@ -75,6 +75,13 @@ public class Tag extends Button {
 		bg.flipHorizontal(value);
 		layout();
 	}
+
+	public void setColor( int color ){
+		this.r = (color >> 16) / 255f;
+		this.g = ((color >> 8) & 0xFF) / 255f;
+		this.b = (color & 0xFF) / 255f;
+		bg.hardlight( r, g, b );
+	}
 	
 	@Override
 	public void update() {
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangeButton.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangeButton.java
index d2df0c1..bcdf384 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangeButton.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangeButton.java
@@ -35,16 +35,16 @@ public class ChangeButton extends Component {
 	
 	protected Image icon;
 	protected String title;
-	protected String message;
+	protected String[] messages;
 	
-	public ChangeButton( Image icon, String title, String message){
+	public ChangeButton( Image icon, String title, String... messages){
 		super();
 		
 		this.icon = icon;
 		add(this.icon);
 		
 		this.title = Messages.titleCase(title);
-		this.message = message;
+		this.messages = messages;
 		
 		layout();
 	}
@@ -54,7 +54,7 @@ public class ChangeButton extends Component {
 	}
 	
 	protected void onClick() {
-		ChangesScene.showChangeInfo(new Image(icon), title, message);
+		ChangesScene.showChangeInfo(new Image(icon), title, messages);
 	}
 	
 	@Override
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangeInfo.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangeInfo.java
index 470cbb2..c75c635 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangeInfo.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/ChangeInfo.java
@@ -64,6 +64,9 @@ public class ChangeInfo extends Component {
 	
 	public void hardlight( int color ){
 		title.hardlight( color );
+		if (text != null){
+			text.hardlight(color);
+		}
 	}
 	
 	public void addButton( ChangeButton button ){
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/WndChanges.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/WndChanges.java
new file mode 100644
index 0000000..0cc7346
--- /dev/null
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/WndChanges.java
@@ -0,0 +1,46 @@
+/*
+ * Pixel Dungeon
+ * Copyright (C) 2012-2015 Oleg Dolya
+ *
+ * Shattered Pixel Dungeon
+ * Copyright (C) 2014-2023 Evan Debenham
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+package com.shatteredpixel.shatteredpixeldungeon.ui.changelist;
+
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
+import com.shatteredpixel.shatteredpixeldungeon.windows.WndTitledMessage;
+import com.watabou.input.PointerEvent;
+import com.watabou.noosa.Image;
+import com.watabou.noosa.PointerArea;
+
+public class WndChanges extends WndTitledMessage {
+	
+	public WndChanges( Image icon, String title, String message ) {
+		super( icon, title, message);
+		
+		PointerArea blocker = new PointerArea( 0, 0, PixelScene.uiCamera.width, PixelScene.uiCamera.height ) {
+			@Override
+			protected void onClick( PointerEvent event ) {
+				onBackPressed();
+			}
+		};
+		blocker.camera = PixelScene.uiCamera;
+		add(blocker);
+		
+	}
+	
+}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/WndChangesTabbed.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/WndChangesTabbed.java
new file mode 100644
index 0000000..2e2e1dc
--- /dev/null
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/WndChangesTabbed.java
@@ -0,0 +1,123 @@
+/*
+ * Pixel Dungeon
+ * Copyright (C) 2012-2015 Oleg Dolya
+ *
+ * Shattered Pixel Dungeon
+ * Copyright (C) 2014-2023 Evan Debenham
+ *
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License
+ * along with this program.  If not, see <http://www.gnu.org/licenses/>
+ */
+
+package com.shatteredpixel.shatteredpixeldungeon.ui.changelist;
+
+import com.shatteredpixel.shatteredpixeldungeon.scenes.PixelScene;
+import com.shatteredpixel.shatteredpixeldungeon.ui.RenderedTextBlock;
+import com.shatteredpixel.shatteredpixeldungeon.windows.IconTitle;
+import com.shatteredpixel.shatteredpixeldungeon.windows.WndTabbed;
+import com.watabou.input.PointerEvent;
+import com.watabou.noosa.Image;
+import com.watabou.noosa.PointerArea;
+
+import java.util.ArrayList;
+
+public class WndChangesTabbed extends WndTabbed {
+
+	protected static final int WIDTH_MIN    = 120;
+	protected static final int WIDTH_MAX    = 220;
+	protected static final int GAP	= 2;
+
+	private ArrayList<RenderedTextBlock> texts = new ArrayList<>();
+
+	public WndChangesTabbed(Image icon, String title, String... messages ) {
+
+		super();
+
+		int width = WIDTH_MIN;
+
+		PointerArea blocker = new PointerArea( 0, 0, PixelScene.uiCamera.width, PixelScene.uiCamera.height ) {
+			@Override
+			protected void onClick( PointerEvent event ) {
+				onBackPressed();
+			}
+		};
+		blocker.camera = PixelScene.uiCamera;
+		add(blocker);
+
+		IconTitle titlebar = new IconTitle( icon, title );
+		titlebar.setRect( 0, 0, width, 0 );
+		add(titlebar);
+
+		RenderedTextBlock largest = null;
+		for (int i = 0; i < messages.length; i++){
+			RenderedTextBlock text = PixelScene.renderTextBlock( 6 );
+			text.text( messages[i], width );
+			text.setPos( titlebar.left(), titlebar.bottom() + 2*GAP );
+			add( text );
+			texts.add(text);
+
+			if (largest == null || text.height() > largest.height()){
+				largest = text;
+			}
+
+			int finalI = i;
+			add(new LabeledTab(numToNumeral(finalI + 1)){
+				@Override
+				protected void select(boolean value) {
+					super.select( value );
+					texts.get(finalI).visible = value;
+				}
+			});
+		}
+
+		while (PixelScene.landscape()
+				&& largest.bottom() > (PixelScene.MIN_HEIGHT_L - 20)
+				&& width < WIDTH_MAX){
+			width += 20;
+			titlebar.setRect(0, 0, width, 0);
+
+			largest = null;
+			for (RenderedTextBlock text : texts){
+				text.setPos( titlebar.left(), titlebar.bottom() + 2*GAP );
+				text.maxWidth(width);
+				if (largest == null || text.height() > largest.height()){
+					largest = text;
+				}
+			}
+		}
+
+		bringToFront(titlebar);
+
+		resize( width, (int)largest.bottom() + 2 );
+
+		layoutTabs();
+		select(0);
+
+	}
+
+	private String numToNumeral(int num){
+		switch (num){
+			case 1: return "I";
+			case 2: return "II";
+			case 3: return "III";
+			case 4: return "IV";
+			case 5: return "V";
+			case 6: return "VI";
+			case 7: return "VII";
+			case 8: return "VIII";
+			case 9: return "IX";
+			case 10: return "X";
+			default: return Integer.toString(num);
+		}
+	}
+}
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_3_X_Changes.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_3_X_Changes.java
index c2e7b78..71681bd 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_3_X_Changes.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_3_X_Changes.java
@@ -146,7 +146,7 @@ public class v0_3_X_Changes {
 				"\n" +
 				"Google Play Games was the first online functionality ever added to Shattered. Some people were worried that this was the start of me turning Shattered into a game that would require internet. I tried to address this worry by making the functionality as optional as possible and heavily emphasizing that it was only for tiny extras like cloud sync and play games badges. Nowadays things are much more relaxed and Shattered has several internet-enabled features, but still none of them are needed to play the game itself."));
 		
-		changes.addButton( new ChangeButton(Icons.get(Icons.PREFS), "Google Play Games",
+		changes.addButton( new ChangeButton(Icons.get(Icons.CONTROLLER), "Google Play Games",
 				"Added support for Google Play Games in the Google Play version:\n\n" +
 				"- Badges can now sync across devices\n" +
 				"- Five Google Play Achievements added\n" +
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_7_X_Changes.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_7_X_Changes.java
index c31f77c..594c940 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_7_X_Changes.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_7_X_Changes.java
@@ -507,7 +507,15 @@ public class v0_7_X_Changes {
 				"_-_ Recipe changed to: strength + catalyst + 5 energy\n" +
 				"_-_ Health boost now scales up with level, but fades after the hero gains a few levels\n\n" +
 				"_-_ Meat Pie recipe cost reduced from 9 to 6, total healing reduced from 45 to 25\n\n" +
-				"_-_ Added a privacy policy link to the Google Play edition of Shattered."));
+				"_-_ Added a privacy policy link to the Google Play edition of Shattered.",
+
+				"Major internal improvements to service integrations for Google Play version of the game:\n" +
+				"_-_ 'Share Gameplay Data' now uses Google Firebase Analytics instead of older Google Analytics. Data collected is unchanged.\n" +
+				"_-_ Many internal improvements to Google Play Games sync and Google Payment integration.\n" +
+				"_-_ Item renaming donation perk now applies to wands.\n\n" +
+				"_-_ Added support for adaptive icons in Android 8.0+.\n" +
+				"_-_ Improved how the game handles orientation changes and window resizing.\n" +
+				"_-_ Shocking enchantment no longer visually arcs lightning to the hero."));
 		
 		changes.addButton( new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
 				"Fixed:\n" +
@@ -526,23 +534,8 @@ public class v0_7_X_Changes {
 				"_-_ Thieves rarely escaping when they are close\n" +
 				"_-_ Beacon of returning losing set location when scroll holder is picked up\n" +
 				"_-_ Recycle not giving an item if inventory is full\n" +
-				"_-_ Rare cases where the game wouldn't save during alchemy"));
-		
-		changes.addButton( new ChangeButton(Icons.get(Icons.LANGS), Messages.get(ChangesScene.class, "language"),
-				"Updated Translations\n\n" +
-				"Updated Translator Credits"));
-		
-		changes.addButton( new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
-				"Major internal improvements to service integrations for Google Play version of the game:\n" +
-				"_-_ 'Share Gameplay Data' now uses Google Firebase Analytics instead of older Google Analytics. Data collected is unchanged.\n" +
-				"_-_ Many internal improvements to Google Play Games sync and Google Payment integration.\n" +
-				"_-_ Item renaming donation perk now applies to wands.\n\n" +
-				"_-_ Added support for adaptive icons in Android 8.0+.\n" +
-				"_-_ Improved how the game handles orientation changes and window resizing.\n" +
-				"_-_ Shocking enchantment no longer visually arcs lightning to the hero."));
-		
-		changes.addButton( new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed (existed before 0.7.2):\n" +
+				"_-_ Rare cases where the game wouldn't save during alchemy",
+
 				"_-_ Cloak of Shadows very rarely consuming more charges than it should\n" +
 				"_-_ Assassin's blink not working on enemies standing on traps\n" +
 				"_-_ Glyph of stone blocking an incorrect amount of damage (too low) in some cases\n" +
@@ -557,6 +550,10 @@ public class v0_7_X_Changes {
 				"_-_ Tengu spawning on top of other characters\n" +
 				"_-_ Cloak of shadows only being usable from quickslots if it has 1 charge"));
 		
+		changes.addButton( new ChangeButton(Icons.get(Icons.LANGS), Messages.get(ChangesScene.class, "language"),
+				"Updated Translations\n\n" +
+				"Updated Translator Credits"));
+		
 		changes = new ChangeInfo(Messages.get(ChangesScene.class, "buffs"), false, null);
 		changes.hardlight( CharSprite.POSITIVE );
 		changeInfos.add(changes);
@@ -859,14 +856,12 @@ public class v0_7_X_Changes {
 				"_-_ Augmented weapons rarely having inconsistent speed\n" +
 				"_-_ Scroll of upgrade revealing curses on unidentified items\n" +
 				"_-_ Item curses rarely not being revealed when they should be\n" +
-				"_-_ Assassin buffs not being cleared when they should in some cases\n" +
+				"_-_ Assassin buffs not being cleared when they should in some cases",
+
 				"_-_ Rooting not working correctly on retreating enemies\n" +
 				"_-_ Searching spending hunger in a locked level\n" +
 				"_-_ 'Faith is my armor' deleting class armors\n" +
-				"_-_ Various cases where the player can be ontop of enemies"));
-		
-		changes.addButton( new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed:\n" +
+				"_-_ Various cases where the player can be ontop of enemies\n" +
 				"_-_ Various screen layout issues in power saver mode\n" +
 				"_-_ Crashes when tengu is healed above 1/2 health\n" +
 				"_-_ Bolas incorrectly requiring 15 strength\n" +
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java
index bb312f8..c32cbd0 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_8_X_Changes.java
@@ -125,11 +125,6 @@ public class v0_8_X_Changes {
 				"_-_ Journal sync is now supported by Google Play Games functionality"));
 
 		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
-				"_New Player Experience:_\n" +
-				"_-_ Snakes now give hints about surprise attacks after 3 misses, down from 5\n" +
-				"_-_ Accelerated the rate that guidebook pages drop on early floors\n" +
-				"_-_ The regular main menu is now only accessible after starting your first game\n" +
-				"_-_ Entrance doors on floor 2 are now only hidden the first time\n\n" +
 				"_Balance:_\n" +
 				"_-_ Bleed from gripping/flashing traps reduced, but they are also affected less by armor.\n" +
 				"_-_ All effects which cancel invisibility and time freeze now fully resolve before they cancel invis/freeze.\n" +
@@ -138,13 +133,21 @@ public class v0_8_X_Changes {
 				"_-_ Thrown potions no longer cleanse ooze/fire from enemies\n" +
 				"_-_ Strength Potions, Upgrade Scrolls, and items which use them are now considered unique and are immune to burn/freeze\n" +
 				"_-_ Enemies now cannot spawn near to the player, even if they are out of the player's view\n" +
-				"_-_ Ranged traps will now prefer to shoot visible targets over invisible ones"));
+				"_-_ Ranged traps will now prefer to shoot visible targets over invisible ones",
 
-			changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
+				"_New Player Experience:_\n" +
+				"_-_ Snakes now give hints about surprise attacks after 3 misses, down from 5\n" +
+				"_-_ Accelerated the rate that guidebook pages drop on early floors\n" +
+				"_-_ The regular main menu is now only accessible after starting your first game\n" +
+				"_-_ Entrance doors on floor 2 are now only hidden the first time\n\n" +
 				"_Audio:_\n" +
 				"_-_ New sound effects have been added for sheep and the talisman of foresight\n" +
 				"_-_ The SFX for discovering secrets has been remastered\n" +
 				"_-_ Torches now play a burning sound\n\n" +
+				"_Translations:_\n" +
+				"_-_ Added a new language: Ukranian!\n" +
+				"_-_ Updated translations and translator credits",
+
 				"_Quality of Life:_\n" +
 				"_-_ The dried rose can no longer be sold if it contains a weapon or armor\n" +
 				"_-_ Tweaked item visibility in furrowed grass\n" +
@@ -155,10 +158,7 @@ public class v0_8_X_Changes {
 				"_-_ Items for sale now show their price when being examined\n" +
 				"_-_ Stackable unique items can now be sold\n" +
 				"_-_ Shortened text from well of awareness\n" +
-				"_-_ Tweaked the sprites of tipped vs. untipped darts\n\n" +
-				"_Translations:_\n" +
-				"_-_ Added a new language: Ukranian!\n" +
-				"_-_ Updated translations and translator credits"));
+				"_-_ Tweaked the sprites of tipped vs. untipped darts"));
 
 		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
 				"Fixed:\n" +
@@ -176,12 +176,10 @@ public class v0_8_X_Changes {
 				"_-_ Large enemies rarely appearing in enclosed spaces\n" +
 				"_-_ Player being able to drop corpse dust\n" +
 				"_-_ Remains in pit rooms rarely not being haunted when they contain cursed items\n" +
-				"_-_ Wandmaker rarely spawning ontop of traps\n" +
-				"_-_ Tengu placing traps over plants\n" +
-				"_-_ Items not being IDed in rankings in rare cases"));
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed:\n" +
+				"_-_ Wandmaker rarely spawning ontop of traps",
+				"_-_ Tengu placing traps over plants\n" +
+				"_-_ Items not being IDed in rankings in rare cases\n" +
 				"_-_ Sniper shot incorrectly capping at 2.5x damage instead of 3x\n" +
 				"_-_ Golden Lotus having twice at much HP as intended\n" +
 				"_-_ Pickaxe not getting bloodied by killing bats in rare cases\n" +
@@ -624,9 +622,8 @@ public class v0_8_X_Changes {
 				"\n" +
 				"_-_ Upgrading a stack of missile weapons now resets the durability of the stack\n" +
 				"_-_ Brewing a potion with 3 of the same seed now identifies it.\n" +
-				"_-_ Skeletal remains now always spawn a wraith if a cursed item spawned within them."));
+				"_-_ Skeletal remains now always spawn a wraith if a cursed item spawned within them.",
 
-		changes.addButton( new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
 				"_-_ Dried rose desc now includes ghost's weapon and armor.\n" +
 				"_-_ Wand of Transfusion desc now includes damage/healing numbers.\n" +
 				"_-_ Beneficial darts now mention that they don't harm allies.\n" +
@@ -660,10 +657,8 @@ public class v0_8_X_Changes {
 				"_-_ Viscocity glyph not considering all armor sources when applying deferred damage\n" +
 				"_-_ Wand of warding bolts not pushing on terrain\n" +
 				"_-_ Wand of prismatic light rarely revealing areas it shouldn't\n" +
-				"_-_ Upgraded wands not spawning fully charged"));
+				"_-_ Upgraded wands not spawning fully charged",
 
-		changes.addButton( new ChangeButton(new Image( Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed:\n" +
 				"_-_ Invisibility not applying if the hero is also shadowmelded\n" +
 				"_-_ Landscape/portrait modes working incorrectly in rare cases\n" +
 				"_-_ Inventory incorrectly being seen as full when upgrading with the blacksmith\n" +
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_9_X_Changes.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_9_X_Changes.java
index 5e6c2ea..7e88d12 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_9_X_Changes.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v0_9_X_Changes.java
@@ -149,10 +149,8 @@ public class v0_9_X_Changes {
 				"_-_ AOE from crush combo move being blocked by chasms\n" +
 				"_-_ Blocking enchant and barkskin only applying to the hero\n" +
 				"_-_ Ghost hero not saying anything when the hero dies\n" +
-				"_-_ Various rare AI bugs with Ghost hero"));
+				"_-_ Various rare AI bugs with Ghost hero",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed:\n" +
 				"_-_ Incendiary darts being instantly used up when used on terrain\n" +
 				"_-_ Wands of regrowth and fireblast using more than 3 charges in rare cases\n" +
 				"_-_ Knockback effects not always working on dead characters\n" +
@@ -163,10 +161,8 @@ public class v0_9_X_Changes {
 				"_-_ Seeds disappearing if they fall into a chasm with the barren land challenge enabled\n" +
 				"_-_ Displacing darts sometimes teleporting enemies into unreachable places\n" +
 				"_-_ Items with boosted levels being remove-cursable\n" +
-				"_-_ Magical infusion not clearing the degrade debuff"));
+				"_-_ Magical infusion not clearing the degrade debuff",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed:\n" +
 				"_-_ Giant swarms duplicating in enclosed spaces\n" +
 				"_-_ Giant champions being able to attack through other characters\n" +
 				"_-_ Ghouls rarely healing without reviving\n" +
@@ -305,10 +301,8 @@ public class v0_9_X_Changes {
 				"_-_ Ethereal Chains pulling a rooted hero\n" +
 				"_-_ Cloak of Shadows spending an extra charge on save/load\n" +
 				"_-_ kinetic enchantment ignoring enemy shields\n" +
-				"_-_ regrowth bombs placing plants in incorrect locations"));
+				"_-_ regrowth bombs placing plants in incorrect locations",
 
-			changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed:\n" +
 				"_-_ combo moves not cancelling invisibility or time freeze\n" +
 				"_-_ cases where Assassin couldn't blink to places he should be able to blink to.\n" +
 				"_-_ some on-eat talents unintentionally stacking with themselves\n" +
@@ -437,13 +431,11 @@ public class v0_9_X_Changes {
 				"_-_ The Mage's staff is no longer automatically set to max charges when imbuing a new wand.\n" +
 				"_-_ Frozen carpaccio can now burn like mystery meat\n\n" +
 				"_-_ Necromancers now damage enemies if their summoning position is totally blocked\n" +
-				"_-_ Piranha are no longer invulnerable to electricity and frost\n\n" +
+				"_-_ Piranha are no longer invulnerable to electricity and frost",
 				"_-_ Barriers now decay more slowly when under 20 shielding.\n" +
 				"_-_ Sniper's mark, charm, and terror all now cancel if their subject is dead.\n" +
 				"_-_ Rogue's foresight can now also trigger when returning to a floor, if that floor was detected initially\n" +
-				"_-_ The Overgrowth curse can now trigger starflower effects"));
-
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
+				"_-_ The Overgrowth curse can now trigger starflower effects\n\n" +
 				"_-_ Slightly adjusted the Huntress' splash art to improve details on her face.\n" +
 				"_-_ The Sad Ghost's reward UI has been improved.\n" +
 				"_-_ Small UI improvements to rankings window\n" +
@@ -468,10 +460,8 @@ public class v0_9_X_Changes {
 				"_-_ Dwarf King and some Yog fists rarely taking negative damage\n" +
 				"_-_ Warlocks not having capped health potions drops\n" +
 				"_-_ Large characters entering tunnels when vertigoed\n" +
-				"_-_ Rare AI issues when paths are blocked"));
+				"_-_ Rare AI issues when paths are blocked",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed:\n" +
 				"_-_ Various minor errors relating to time freeze\n" +
 				"_-_ Assassin blink ignoring hero being rooted\n" +
 				"_-_ Various rare bugs with corruption\n" +
@@ -589,9 +579,8 @@ public class v0_9_X_Changes {
 				"_-_ Tweaked some interface visuals to be more rounded.\n\n" +
 				"_-_ Spider webs are now flammable, and can be shot through by fireblast.\n" +
 				"_-_ The reclaim trap spell can no longer be dropped when a trap is stored in it. This prevents an exploit.\n" +
-				"_-_ Items gained from secret mazes are now known to be uncursed."));
+				"_-_ Items gained from secret mazes are now known to be uncursed.",
 
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
 				"I'm making some adjustments to sewers loot to give players a bit more control of what gear they get, and to reduce the chance of spawning high tier gear that the player may never get to use:\n" +
 				"_-_ Chance for regular gear drops in the sewers to be T4/T5 reduced by 50%.\n" +
 				"_-_ Players can now see what type of weapon/armor the sad ghost has before selecting it.\n\n" +
@@ -615,15 +604,13 @@ public class v0_9_X_Changes {
 				"_-_ Spinners shooting webs though walls\n" +
 				"_-_ Elastic enchantment closing doors when used with spirit bow\n" +
 				"_-_ Shopkeepers buying items worth 0 gold\n" +
-				"_-_ Duplicate artifacts in rare cases\n" +
+				"_-_ Duplicate artifacts in rare cases",
+
 				"_-_ Custom names not applying to Mage's staff\n" +
 				"_-_ Ring of might not reducing max HP when degraded\n" +
 				"_-_ Rare bugs involving ripper demon leaping\n" +
 				"_-_ Hero unable to cleanse fire with chill when immune to it, and vice-versa\n" +
-				"_-_ DM-201's attacking while stunned"));
-
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed (existed prior to v0.9.0):\n" +
+				"_-_ DM-201's attacking while stunned\n" +
 				"_-_ Tengu's abilities being reset by saving/loading\n" +
 				"_-_ Various cases where game win badges would not appear\n" +
 				"_-_ Force cubes trigger traps before being placed to the floor\n" +
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java
index 51d352e..104e236 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v1_X_Changes.java
@@ -119,7 +119,7 @@ public class v1_X_Changes {
 		changes.addButton(new ChangeButton(Icons.get(Icons.DISPLAY_LAND), "Landscape Hero Select",
 				"Desktop and mobile landscape users will now see a new hero select screen that better makes use of screen real-estate."));
 
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 1",
+		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
 				"_Highlights:_\n" +
 				"_-_ Daily runs can now be replayed for practice\n" +
 				"_-_ Updated translations and translator credits\n" +
@@ -129,22 +129,20 @@ public class v1_X_Changes {
 				"_Hero Actions:_\n" +
 				"_-_ Waiting now always takes exactly 1 turn, regardless of hero speed\n" +
 				"_-_ Grass the hero is standing on can now be trampled by selecting the hero's position\n" +
-				"_-_ Hero now pauses before ascending/descending if enemies are nearby\n" +
-				"\n" +
+				"_-_ Hero now pauses before ascending/descending if enemies are nearby",
+
 				"_Items:_\n" +
 				"_-_ Wand of Disintegration no longer harms undiscovered neutral characters\n" +
 				"_-_ Blooming enchant now tries to avoid placing grass on the hero\n" +
 				"_-_ The scroll holder can now hold arcane resin\n" +
 				"_-_ Rotberry plant now gives a small puff of toxic gas when trampled\n" +
-				"_-_ Plants now trigger after time freeze ends, just like traps"));
-
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 2",
+				"_-_ Plants now trigger after time freeze ends, just like traps\n" +
 				"_Allies & Enemies:_\n" +
 				"_-_ Improved behavior of ally AI when told to hold a position\n" +
 				"_-_ Goo's pump up attack now always gives the hero at least 1 action to react\n" +
 				"_-_ DM-300 now knocks back during rockfall even if hero is 1 tile away\n" +
-				"_-_ Slightly adjusted enemy stats on ascension to smooth out difficulty\n" +
-				"\n" +
+				"_-_ Slightly adjusted enemy stats on ascension to smooth out difficulty",
+
 				"_UI/VFX:_\n" +
 				"_-_ Throwing weapons now show their quantity in orange when one is about to break\n" +
 				"_-_ Item boosts from potion of mastery or curse infusion now change the color of text in that item's item slot\n" +
@@ -153,14 +151,13 @@ public class v1_X_Changes {
 				"_-_ Added some ascension dialogue for the ghost hero\n" +
 				"_-_ Slightly improved the marsupial rat attacking animation\n" +
 				"_-_ Improved chains vfx, especially for prison guards\n" +
-				"_-_ Added lullaby vfx to the stone of deep sleep"));
-
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 3",
+				"_-_ Added lullaby vfx to the stone of deep sleep\n" +
+				"\n" +
 				"_Rankings:_\n" +
 				"_-_ Clarified description for boss score in rankings\n" +
 				"_-_ Yog's laser now deducts score even if the hero dodges it\n" +
-				"_-_ Goo no longer deducts score by healing in water\n" +
-				"\n" +
+				"_-_ Goo no longer deducts score by healing in water",
+
 				"_Levelgen:_\n" +
 				"_-_ Items and enemies can no longer spawn in aquarium room water\n" +
 				"_-_ Improved room merging logic in a few specific situations\n" +
@@ -174,7 +171,7 @@ public class v1_X_Changes {
 				"_-_ The controller pointer can now pan the game camera\n" +
 				"_-_ Heroes can now be renamed individually"));
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 1",
+		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
 				"Fixed the following bugs:\n\n" +
 				"_Highlights:_\n" +
 				"_-_ Victory and Champion badges not being awarded in some cases\n" +
@@ -189,9 +186,8 @@ public class v1_X_Changes {
 				"_-_ Albino rats causing bleed when hitting for 0 damage\n" +
 				"_-_ Necromancers being able to summon through crystal doors\n" +
 				"_-_ Giant necromancers summoning skeletons into doorways\n" +
-				"_-_ Goo Immediately using its pump up attack if a previous pump up was interrupted by sleep"));
+				"_-_ Goo Immediately using its pump up attack if a previous pump up was interrupted by sleep",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 2",
 				"_Items pt.1:_\n" +
 				"_-_ Honeypots not reacting correctly to being teleported\n" +
 				"_-_ Rare cases where lost inventory and items on stairs could softlock the game\n" +
@@ -205,11 +201,10 @@ public class v1_X_Changes {
 				"_-_ Various quirks with charge spending on timekeeper's hourglass\n" +
 				"_-_ Stones of aggression working much more effectively than intended\n" +
 				"_-_ Chalice of Blood benefitting from recharging while hero is starving\n" +
-				"_-_ Cases where explosive curse would create explosions at the wrong location\n" +
-				"_-_ Additional cases where magical spellbook could generate scrolls of lullaby"));
+				"_-_ Cases where explosive curse would create explosions at the wrong location",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 3",
 				"_Items pt.2:_\n" +
+				"_-_ Additional cases where magical spellbook could generate scrolls of lullaby" +
 				"_-_ Heavy boomerangs getting an accuracy penalty when returning\n" +
 				"_-_ Rare consistency errors in potion of might buff description\n" +
 				"_-_ Death to aqua blast counting as death to a geyser trap\n" +
@@ -222,9 +217,8 @@ public class v1_X_Changes {
 				"_-_ Cursed horn of plenty affecting non-food items\n" +
 				"_-_ Being able to self-target with cursed wands in rare cases\n" +
 				"_-_ Some thrown weapons triggering traps as Tengu jumps\n" +
-				"_-_ Magic resistance not applying to some cursed wand effects"));
+				"_-_ Magic resistance not applying to some cursed wand effects",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 4",
 				"_Effects:_\n" +
 				"_-_ Invisibility effects not working when applied to enemies\n" +
 				"_-_ Rare cases where giant enemies couldn't attack\n" +
@@ -239,9 +233,8 @@ public class v1_X_Changes {
 				"_-_ Caves boss arena not displacing all items on the tile that caves in\n" +
 				"_-_ Recharging effects sometimes getting an extra action on game load\n" +
 				"_-_ Exploits during ascension challenge that let players still use shops\n" +
-				"_-_ Elastic and battlemage blast wave ability conflicting with each other"));
+				"_-_ Elastic and battlemage blast wave ability conflicting with each other",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 5",
 				"_Misc:_\n" +
 				"_-_ Dailies using seeds that are also user-enterable\n" +
 				"_-_ Confusing text when a weapon or armor is partly uncursed\n" +
@@ -372,7 +365,7 @@ public class v1_X_Changes {
 				"Several buffs have been given icons when they didn't have any, or have had their icons adjusted to prevent icon duplication. This should improve buff clarity in a few cases, and ensure that two active buffs can never have the exact same icon (recolored icons are still present though).\n\n" +
 				"A few new overhead spell effects have been added as well."));
 
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 1",
+		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
 				"_-_ Updated translations, translator credits, and added a new language: Dutch!\n" +
 				"_-_ Made the Huntress a bit easier to unlock again\n" +
 				"_-_ Dreamfoil has been renamed to Mageroyal, to better fit its lack of sleeping functionality since 1.2\n" +
@@ -382,12 +375,11 @@ public class v1_X_Changes {
 				"_-_ Progress is now shown for badges that need to be unlocked with multiple heroes\n" +
 				"_-_ Multiple unlocked badges can now be shown at once\n" +
 				"_-_ Various minor tweaks to item and level generation to support seeded runs\n" +
-				"_-_ Keys now appear on top of other items in pit rooms\n" +
+				"_-_ Keys now appear on top of other items in pit rooms",
+
 				"_-_ Large floors now spawn two torches with the 'into darkness' challenge enabled\n" +
 				"_-_ Blazing champions no longer explode if they are killed by chasms\n" +
-				"_-_ Red sentries no longer fire on players with lost inventories"));
-
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 2",
+				"_-_ Red sentries no longer fire on players with lost inventories\n" +
 				"_-_ Wards and Sentries are now immune to sleep, vertigo and fear\n" +
 				"_-_ Characters with guaranteed dodges (e.g. spirit hawk) can now evade Yog's laser beam\n" +
 				"_-_ Boss health bars have been expanded to show current health and active buffs/debuffs.\n" +
@@ -532,7 +524,7 @@ public class v1_X_Changes {
 				"_-_ Added a new language: Galician!\n" +
 				"_-_ Removed the Catalan translation as it was below 70% complete"));
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 1",
+		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
 				"Fixed:\n" +
 				"_-_ Various rare cases of save corruption on Android\n" +
 				"_-_ Various minor textual and visual errors\n\n" +
@@ -546,10 +538,8 @@ public class v1_X_Changes {
 				"_-_ On-hit effects still triggering when the great crab blocks\n" +
 				"_-_ Corruption debuff affecting smoke bomb decoy\n" +
 				"_-_ Character mind vision persisting after a character dies\n" +
-				"_-_ Dwarf King not being targeted by wands or thrown weapons while on his throne"));
+				"_-_ Dwarf King not being targeted by wands or thrown weapons while on his throne",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 2",
-				"Fixed:\n" +
 				"_-_ Pharmacophobia challenge incorrectly blocking some alchemy recipes\n" +
 				"_-_ Unidentified wands being usable in alchemy\n" +
 				"_-_ Wild energy spell not cancelling invisibility or time freeze\n" +
@@ -559,10 +549,8 @@ public class v1_X_Changes {
 				"_-_ Some items rarely not being consumed when they should be\n" +
 				"_-_ Arcane catalysts not being able to be turned into energy\n" +
 				"_-_ Fog of War not properly updating when warp beacon is used\n" +
-				"_-_ Very rare cases where dried rose becomes unusable"));
+				"_-_ Very rare cases where dried rose becomes unusable",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 3",
-				"Fixed:\n" +
 				"_-_ Rare cases where lullaby scrolls were generated by the Unstable Spellbook\n" +
 				"_-_ Ring of might health boost not being affected by lost inventory debuff\n" +
 				"_-_ Items that spawn identified counting as being IDed by the player\n" +
@@ -703,32 +691,31 @@ public class v1_X_Changes {
 				"_- Scroll of Confusion_ is now _Scroll of Challenge_, which attracts enemies but creates an arena where you take reduced damage.\n" +
 				"_- Scroll of Polymorph_ is now _Scroll of Metamorphosis_, which lets you swap out a talent to one from another class." ));
 
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 1",
+		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
 				"_-_ Item drops and special room spawns are now more consistent. Getting loads of the same item is now much less likely.\n" +
 				"_-_ Items present on boss floors are now preserved if the hero is revived from an unblessed ankh\n" +
 				"_-_ Teleport mechanics now work on boss levels\n" +
 				"_-_ Traps that teleport no longer work on items in chests or similar containers\n" +
-				"_-_ Rewards from piranha and trap rooms now always appear in chests\n\n" +
-
+				"_-_ Rewards from piranha and trap rooms now always appear in chests\n" +
+				"\n" +
 				"_-_ Tipped darts can now be transmuted and recycled\n" +
 				"_-_ Thrown weapons no longer stick to allies\n" +
-				"_-_ Liquid metal production from upgraded thrown weapons now caps at +3"));
+				"_-_ Liquid metal production from upgraded thrown weapons now caps at +3",
 
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 2",
 				"_-_ Updated game icons on Android and Desktop platforms\n" +
 				"_-_ Tabs in rankings and hero info windows now use icons, not text\n" +
-				"_-_ 'potions cooked' badge and stats are now 'items crafted'\n\n" +
-
-				"_-_ Newborn elementals no longer have a ranged attack\n\n" +
-
+				"_-_ 'potions cooked' badge and stats are now 'items crafted'\n" +
+				"\n" +
+				"_-_ Newborn elementals no longer have a ranged attack\n" +
+				"\n" +
 				"Various small improvements for iOS Devices:\n" +
 				"_-_ Game can now run at higher framerates than 60\n" +
 				"_-_ Ingame UI elements now move inward if notched devices are used in landscape\n" +
-				"_-_ There is now an option to override silent mode\n\n" +
-
+				"_-_ There is now an option to override silent mode\n" +
+				"\n" +
 				"_-_ Updated translations and translator credits"));
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 1",
+		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
 				"Fixed:\n" +
 				"_-_ Various minor/rare visual and textual errors\n" +
 				"_-_ Cases where pausing/resuming the game at precise moments would cancel animations or attacks\n" +
@@ -744,11 +731,9 @@ public class v1_X_Changes {
 				"_-_ Various quirks with thrown weapon durability\n" +
 				"_-_ Rare cases where ghouls would get many extra turns when reviving\n" +
 				"_-_ Magical infusion not preserving curses on armor\n" +
-				"_-_ Vertigo and teleportation effects rarely interfering\n" +
-				"_-_ Layout issues in the hero info window with long buff names"));
+				"_-_ Vertigo and teleportation effects rarely interfering",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 2",
-				"Fixed:\n" +
+				"_-_ Layout issues in the hero info window with long buff names\n" +
 				"_-_ Cursed wands being usable to create arcane resin\n" +
 				"_-_ Unblessed ankh revival rarely causing crashes or placing the player on hazards\n" +
 				"_-_ Some glyphs not working for armored statues or the ghost hero\n" +
@@ -759,14 +744,12 @@ public class v1_X_Changes {
 				"_-_ Ring of Might not updating hero health total in rare cases\n" +
 				"_-_ Specific cases where darts would not recognize an equipped crossbow\n" +
 				"_-_ Cap on regrowth wand being affect by level boosts\n" +
-				"_-_ Some on-hit effects not triggering on ghost or armored statues\n" +
+				"_-_ Some on-hit effects not triggering on ghost or armored statues",
+
 				"_-_ Rare errors when gateway traps teleported multiple things at once\n" +
 				"_-_ Various rare errors when multiple inputs were given in the same frame\n" +
 				"_-_ Fog of War errors in Tengu's arena\n" +
-				"_-_ Rare errors with sheep spawning items and traps"));
-
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 3",
-				"Fixed:\n" +
+				"_-_ Rare errors with sheep spawning items and traps\n" +
 				"_-_ Various rare crash bugs\n" +
 				"_-_ Various minor textual and visual errors\n" +
 				"_-_ Gateway traps rarely teleporting immovable characters\n" +
@@ -922,24 +905,22 @@ public class v1_X_Changes {
 				"_-_ Various minor visual and text errors\n" +
 				"_-_ damage warn triggering when hero gains HP from being hit\n" +
 				"_-_ various rare bugs involving pitfall traps\n" +
-				"_-_ disarming traps opening chests\n\n" +
-
+				"_-_ disarming traps opening chests\n" +
+				"\n" +
 				"_-_ various minor errors with electricity effects\n" +
 				"_-_ soul mark not working properly on low HP enemies with shielding\n" +
 				"_-_ various rare errors with shadows buff\n" +
 				"_-_ errors with time freeze and inter-floor teleportation mechanics\n" +
 				"_-_ rooted characters not being immune to knockback effects\n" +
-				"_-_ time stasis sometimes not preventing harmful effects in its last turn.\n\n" +
-
+				"_-_ time stasis sometimes not preventing harmful effects in its last turn.\n" +
+				"\n" +
 				"_-_ wands losing max charge on save/load in rare cases\n" +
 				"_-_ magical infusion clearing curses\n" +
 				"_-_ dewdrops stacking on each other in rare cases\n" +
 				"_-_ exploding skeletons not being blocked by transfusion shield in rare cases\n" +
 				"_-_ rare incorrect interactions between swiftthistle and golden lotus\n" +
-				"_-_ Rings not being renamable if they weren't IDed"));
+				"_-_ Rings not being renamable if they weren't IDed",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
-				"Fixed:\n" +
 				"_-_ statues not becoming aggressive when debuffed\n" +
 				"_-_ swapping places with allies reducing momentum\n" +
 				"_-_ DK minions dropping imp quest tokens\n" +
@@ -947,8 +928,8 @@ public class v1_X_Changes {
 				"_-_ spectral blades being blocked by allies\n" +
 				"_-_ Spirit Hawk and Shadow Clone being corruptible\n" +
 				"_-_ Rogue's body replacement ally being vulnerable to various AI-related debuffs\n" +
-				"_-_ some ranged enemies becoming frozen if they were attacked from out of their vision\n\n" +
-
+				"_-_ some ranged enemies becoming frozen if they were attacked from out of their vision\n" +
+				"\n" +
 				"_-_ gladiator combos dealing much more damage than intended in certain cases\n" +
 				"_-_ magical charge and scroll empower interacting incorrectly\n" +
 				"_-_ magical sight not working with farsight talent\n" +
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java
index fad1b1c..c3fc1ef 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/ui/changelist/v2_X_Changes.java
@@ -76,6 +76,86 @@ public class v2_X_Changes {
 		changes.hardlight(Window.TITLE_COLOR);
 		changeInfos.add(changes);
 
+		changes = new ChangeInfo("v2.0.2", false, null);
+		changes.hardlight(Window.TITLE_COLOR);
+		changeInfos.add(changes);
+
+		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
+				"_-_ Overhauled visuals for the action indicator. It now has different background colors for different actions, and supports a smaller secondary icon or text. Subclass abilities all make use of this new functionality, and some info has been moved from buff icons to this new indicator.\n\n" +
+				"_-_ The game's pixel font now supports Vietnamese!\n\n" +
+				"_-_ Rankings now attempt to show some basic information if loading full game data fails.\n\n" +
+				"_-_ The changes scene now shows a warning if the user is not viewing it in English.\n\n" +
+				"_-_ Liquid metal value increased to 1 from 0.5."));
+
+		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
+				"Fixed (Caused by v2.0):\n" +
+				"_-_ Various minor visual errors\n" +
+				"_-_ Flail spin ability triggering talents when already at full spin power\n" +
+				"_-_ Lucky elemental strike working on ally characters\n" +
+				"_-_ Resistance from empowered meditate lasting 1 turn longer than intended\n" +
+				"_-_ Threshold for Monastic Vigor being lower than intended (95/75/55 instead of 100/80/60)\n" +
+				"_-_ New quickslot swap behaviour sometimes placing items without a quick-use action into quickslots\n" +
+				"_-_ Levitation persisting for 1 extra turn after the hero falls into a pit\n" +
+				"_-_ Lunge ability still allowing the Duelist to attack if it placed her onto a teleportation trap\n" +
+				"_-_ Spirit bow arrows triggering the deadly followup talent",
+				"Fixed (existed prior to v2.0):\n" +
+				"_-_ Various bugs with controller input which occurred when two or more inputs were entered at once.\n" +
+				"_-_ Hero being able to leave floor 5 after it locks in rare cases\n" +
+				"_-_ Various minor rounding errors in alchemy produce values\n" +
+				"_-_ Spirit bow encumbrance calculations always using a strength requirement of 10\n" +
+				"_-_ Downed ghoul visuals sometimes staying visible in the fog of war"));
+
+		changes = new ChangeInfo("v2.0.1", false, null);
+		changes.hardlight(Window.TITLE_COLOR);
+		changeInfos.add(changes);
+
+		changes.addButton(new ChangeButton(HeroSprite.avatar(HeroClass.DUELIST, 6), "Duelist Buffs",
+				"I expect to make some more thorough changes in v2.1, after gameplay data becomes more reliable, but for now I'm making some early buffs to the Duelist to improve on a bunch of her talents and weapon abilities that are not performing as well as others. This should hopefully make her gameplay feel more consistent.\n\n" +
+				"_-_ Weapon ability recharge speed increased by 12.5% at no missing charges, down to being unchanged when at 0/10\n" +
+				"\n" +
+				"_- Strengthening Meal_ bonus damage up to 3 from 2\n" +
+				"_- Swift Equip_ cooldown down to 20 turns from 30\n" +
+				"_- Unencumbered Spirit_ energy boost up to 33/67/100/150%, from 25/50/100/150%\n" +
+				"_- Monastic Vigor_ threshold changed to 100/80/60%, from 100/85/70%\n" +
+				"\n" +
+				"_- Sneak_ now grants 8/6/4 turns of stealth, up from 6/5/4\n" +
+				"_- Spike_ now deals +40/30% bonus damage, up from +15/10%\n" +
+				"_- Heavy Blow_ now deals +65/60/55/50% damage, up from +50/45/40/35%\n" +
+				"_- Combo Strike_ now deals +40/35/30% damage per stack, up from +30/25/20%\n" +
+				"_- Spin_ now deals +33% damage per stack, up from +20%"));
+
+		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
+				"_-_ Quickslot contents are now automatically swapped if a newly equipped item that is not quickslotted replaces an item that was quickslotted. This should make weapon swapping gameplay smoother.\n" +
+				"\n" +
+				"_-_ The changes screen now supports more text for a single entry. On mobile UI the changes window can now have multiple tabs, on full UI the changes pane on the right is now scrollable.\n" +
+				"\n" +
+				"_-_ Updated translations\n" +
+				"_-_ Attacking an enemy now properly sets them as the auto-targeting target in all cases\n" +
+				"_-_ Levitation now prevents damage from floor electricity during the DM-300 fight\n" +
+				"_-_ Removed support for save data prior to v1.2.3"));
+
+		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
+				"Fixed (Caused by v2.0):\n" +
+				"_-_ Various rare crash bugs\n" +
+				"_-_ Duelist not being automatically unlocked for existing players with a win\n" +
+				"_-_ Blooming elemental strike placing tall grass on plants\n" +
+				"_-_ Various minor textual errors\n" +
+				"_-_ Enemies frozen by Challenge ability still being fearable\n" +
+				"_-_ Charged shot ability rarely messing with the game's UI when its animation ends\n" +
+				"_-_ Combined energy talent rarely boosting energy above 100%\n" +
+				"_-_ Brawler's stance not preventing damage blocking from equipped weapon\n" +
+				"_-_ Duelist Unlock badge not registering on Google Play Games\n" +
+				"_-_ Champion weapon swapping not triggering an attack indicator update",
+				"Fixed (existed prior to v2.0):\n" +
+				"_-_ Various UI bugs caused by pressing multiple buttons simultaneously\n" +
+				"_-_ Noisemakers being visually defusable after trigger but not exploding\n" +
+				"_-_ Noisemakers being collectable in some cases after triggering\n" +
+				"_-_ Damage/Stun from blastwave knockback applying to downed ghouls\n" +
+				"_-_ Even more cases of particle effects sometimes failing to appear\n" +
+				"_-_ Projecting champions with ranged attacks refusing to melee from a distance in some cases\n" +
+				"_-_ Life Link sometimes persisting for longer than intended during Dwarf King fight" +
+				"_-_ Various rare UI bug"));
+
 		changes = new ChangeInfo(Messages.get(ChangesScene.class, "new"), false, null);
 		changes.hardlight(Window.TITLE_COLOR);
 		changeInfos.add(changes);
@@ -129,7 +209,7 @@ public class v2_X_Changes {
 				"_- Gnoll & Snake_ stat boost up to 9x from 7x\n" +
 				"_- Rat_ stat boost up to 10x from 8x"));
 
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 1",
+		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc"),
 				"_Highlights:_\n" +
 				"_-_ The game now remembers if the player removes the waterskin from their quickslot right after starting a run\n" +
 				"_-_ The damage warning vfx now always interrupts the hero, regardless of any other factors\n" +
@@ -137,33 +217,31 @@ public class v2_X_Changes {
 				"_-_ Added metamorphosis effects to the two remaining talents that previously couldn't be gained by metamorphosis\n" +
 				"_-_ Desktop users can now toggle fullscreen with right-alt + enter\n" +
 				"_-_ Added a setting to enable/disable playing music in background on desktop\n" +
-				"_-_ Added a 5th games in progress slot for the Duelist\n" +
-				"\n" +
+				"_-_ Added a 5th games in progress slot for the Duelist",
+
 				"_Translations:_\n" +
 				"_-_ Added a new Language: _Vietnamese!_ Currently only system font is supported for Vietnamese.\n" +
-				"_-_ Removed the following Languages due to low usage and lack of maintenance: Finnish, Galician, Basque, Esperanto."));
-
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 2",
+				"_-_ Removed the following Languages due to low usage and lack of maintenance: Finnish, Galician, Basque, Esperanto.\n" +
+						"\n" +
 				"_iOS:_\n" +
 				"_-_ Improved gesture handling, should reduce/eliminate touch delays\n" +
 				"_-_ Removed unused audio files, reducing download size by about 15%\n" +
 				"\n" +
+				"_Effects:_\n" +
+				"_-_ Backup barrier now triggers before wand zaps fully resolve\n" +
+				"_-_ The chasm warning screen now also appears when levitation is about to end.",
+
 				"_Hero, Allies, & Enemies:_\n" +
 				"_-_ The hero can now also self-trample plants, in addition to grass\n" +
 				"_-_ Ripper demons will now try to leap even if their destination is blocked by terrain\n" +
 				"_-_ Red Sentry attacks can now be dodged or blocked, but are very accurate.\n" +
 				"_-_ Knockback effects now round up after being halved vs. bosses\n" +
 				"\n" +
-				"_Effects:_\n" +
-				"_-_ Backup barrier now triggers before wand zaps fully resolve\n" +
-				"_-_ The chasm warning screen now also appears when levitation is about to end."));
-
-		changes.addButton(new ChangeButton(Icons.get(Icons.PREFS), Messages.get(ChangesScene.class, "misc") + " 3",
 				"_Levelgen:_\n" +
 				"_-_ Adjusted the layout of sacrifice rooms to provide some cover from ranged enemies\n" +
 				"_-_ Secret rooms now never affect the generation of items in other rooms\n" +
-				"_-_ Items and Enemies can no longer spawn on the Wandmaker quest ritual marker.\n" +
-				"\n" +
+				"_-_ Items and Enemies can no longer spawn on the Wandmaker quest ritual marker.",
+
 				"_Items:_\n" +
 				"_-_ Several artifacts now cancel invisibility when used\n" +
 				"_-_ Items no longer spawn on pitfall traps\n" +
@@ -175,7 +253,7 @@ public class v2_X_Changes {
 				"_-_ Healing no longer interrupts resting when HP is already full\n" +
 				"_-_ Updated various code libraries\n"));
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 1",
+		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes"),
 				"Fixed the following bugs:\n" +
 				"_Highlights:_\n" +
 				"_-_ Various rare crash and freeze errors\n" +
@@ -184,7 +262,12 @@ public class v2_X_Changes {
 				"_-_ AOE from gladiator's crush move invalidating Dwarf King's 'no weapons' badge\n" +
 				"_-_ Magic resistance being extremely effective against Grim traps at low HP\n" +
 				"_-_ Allies spawned by some armor abilities getting boosted stats during ascension\n" +
-				"\n" +
+				"_-_ One upgrade being lost when transferring class armor with a warrior's seal attached\n" +
+				"_-_ Transmuting a dried rose deleting any items held by the ghost\n" +
+				"_-_ Rare cases of hero stacking onto enemies when trying to swap positions with an ally\n" +
+				"_-_ Directable allies being easily distracted after being told to move\n" +
+				"_-_ Several on-kill effects incorrectly triggering when ghouls get downed",
+
 				"_Effects:_\n" +
 				"_-_ Lethal momentum not triggering on kills made via enchantment\n" +
 				"_-_ Teleportation effects not being blocked by magic immunity\n" +
@@ -195,13 +278,10 @@ public class v2_X_Changes {
 				"_-_ Iron Stomach talent cancelling fall damage in rare cases\n" +
 				"_-_ Time freeze causing various odd behaviour when triggering plants and traps\n" +
 				"_-_ Rare cases of earthroot armor and hold fast working after movement\n" +
-				"_-_ Volley ability not triggering lethal momentum"));
+				"_-_ Volley ability not triggering lethal momentum",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 2",
 				"_Items:_\n" +
-				"_-_ One upgrade being lost when transferring class armor with a warrior's seal attached\n" +
-				"_-_ Leftover darts being lost in rare cases when tipped darts have bonus durability\n" +
-				"_-_ Transmuting a dried rose deleting any items held by the ghost\n" +
+				"_-_ Darts being lost in rare cases when tipped darts have bonus durability\n" +
 				"_-_ Alchemist's Toolkit not triggering the enhanced rings talent\n" +
 				"_-_ Wand of fireblast rarely shooting great distances\n" +
 				"_-_ Wand of lightning rarely taking credit for hero deaths not caused by it\n" +
@@ -214,17 +294,13 @@ public class v2_X_Changes {
 				"_-_ Rare cases where cloak of shadows wouldn't spend a charge on activation\n" +
 				"_-_ Disarming traps rarely teleporting weapons into chests or graves\n" +
 				"_-_ Blacksmith failing to take his pickaxe back in rare cases\n" +
-				"_-_ Various rare errors with blacksmith reforging and resin boosted wands"));
+				"_-_ Various rare errors with blacksmith reforging and resin boosted wands",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 3",
 				"_Allies & Enemies:_\n" +
-				"_-_ Rare cases of hero stacking onto enemies when trying to swap positions with an ally\n" +
-				"_-_ Directable allies being easily distracted if attacked after being told to move\n" +
 				"_-_ DM-300 not using abilities in its first phase in specific situations\n" +
 				"_-_ DM-201s rarely lobbing grenades when they shouldn't\n" +
 				"_-_ DM-300's rockfall attack very rarely having no delay\n" +
 				"_-_ Tengu rarely throwing bombs into walls\n" +
-				"_-_ Several on-kill effects incorrectly triggering when ghouls get downed, but not killed\n" +
 				"_-_ Soiled fist being able to see through shrouding fog\n" +
 				"_-_ Rare cases where the Imp's shop could appear without completing his quest\n" +
 				"_-_ Gladiator not gaining combo from attacking hiding mimics\n" +
@@ -235,10 +311,8 @@ public class v2_X_Changes {
 				"_-_ Evil eyes only resisting some disintegration effects\n" +
 				"_-_ Several rare issues with spinner web shooting\n" +
 				"_-_ Very rare cases where surprise attacks on mimics would fail\n" +
-				"_-_ Very rare pathfinding bugs with flying enemies\n" +
-				"_-_ Mirror and Prismatic images benefiting from more accuracy or evasion effects than intended"));
+				"_-_ Very rare pathfinding bugs with flying enemies",
 
-		changes.addButton(new ChangeButton(new Image(Assets.Sprites.SPINNER, 144, 0, 16, 16), Messages.get(ChangesScene.class, "bugfixes") + " 4",
 				"_UI/VFX:_\n" +
 				"_-_ Various minor audiovisual errors\n" +
 				"_-_ Various minor textual errors\n" +
diff --git a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndCombo.java b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndCombo.java
index bba4b48..a7a45a1 100644
--- a/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndCombo.java
+++ b/core/src/main/java/com/shatteredpixel/shatteredpixeldungeon/windows/WndCombo.java
@@ -62,7 +62,6 @@ public class WndCombo extends Window {
 		}
 
 		for (Combo.ComboMove move : Combo.ComboMove.values()) {
-			Image ic = new Image(icon);
 
 			RedButton moveBtn = new RedButton(move.desc(combo.getComboCount()), 6){
 				@Override
@@ -72,8 +71,6 @@ public class WndCombo extends Window {
 					combo.useMove(move);
 				}
 			};
-			ic.tint(move.tintColor);
-			moveBtn.icon(ic);
 			moveBtn.leftJustify = true;
 			moveBtn.multiline = true;
 			moveBtn.setSize(width, moveBtn.reqHeight());
diff --git a/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java b/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
index 3ccd000..a30446f 100644
--- a/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
+++ b/desktop/src/main/java/com/shatteredpixel/shatteredpixeldungeon/desktop/DesktopLauncher.java
@@ -161,16 +161,6 @@ public class DesktopLauncher {
 			String titleLinux = title.toLowerCase(Locale.ROOT).replace(" ", "-");
 			basePath = XDGHome + "/." + vendor + "/" + titleLinux + "/";
 
-			//copy over files from old linux save DIR, pre-1.2.0
-			FileHandle oldBase = new Lwjgl3FileHandle("." + vendor + "/" + titleLinux + "/", Files.FileType.External);
-			FileHandle newBase = new Lwjgl3FileHandle(basePath, Files.FileType.Absolute);
-			if (oldBase.exists()){
-				if (!newBase.exists()) {
-					oldBase.copyTo(newBase.parent());
-				}
-				oldBase.deleteDirectory();
-				oldBase.parent().delete(); //only regular delete, in case of saves from other PD versions
-			}
 			baseFileType = Files.FileType.Absolute;
 		}
 
-- 
2.33.0.windows.2

